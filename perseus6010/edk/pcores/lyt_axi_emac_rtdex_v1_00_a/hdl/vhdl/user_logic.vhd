--------------------------------------------------------------------------------
-- Filename:          user_logic.vhd
-- Version:           v1_00_a
-- Description:       User Logic implementation module
-- Generated by:      khalid.bensadek
-- Date:              2012-12-06 11:40:23
-- Generated:         using LyrtechRD REGGENUTIL based on Xilinx IPIF Wizard.
-- VHDL Standard:     VHDL'93
------------------------------------------------------------------------------
-- Copyright (c) 2001-2012 LYRtech RD Inc.  All rights reserved.
------------------------------------------------------------------------------
--
-----------------------------------------------------------------------------
-- Register Memory Map & Description
-----------------------------------------------------------------------------
-- BASEADDR + 0x0   CORE_ID_VERS    0
--   31:0 coreId R

-- BASEADDR + 0x4   CORE_RST    1
--   0:0 CoreResetPulse P O=o_CoreResetPulse_p
--   31:1 rsvd R

-- BASEADDR + 0x8   RX_TX_FIFO_RST    2
--   15:8 rsvd R
--   23:16 TxFifoReset R W O=ov8_TxFifoReset_p
--   31:24 rsvd R
--   7:0 RxFifoReset R W O=ov8_RxFifoReset_p

-- BASEADDR + 0xc   HOSTMACADDRESSLOWWORD    3
--   31:0 HostMacAddrLowWord R W O=ov32_HostMacAddrLowWord_p

-- BASEADDR + 0x10   HOSTMACADDRESSHIGHWORD    4
--   15:0 HostMacAddrHighWord R W O=ov16_HostMacAddrHighWord_p
--   31:16 rsvd R

-- BASEADDR + 0x14   FPGAMACADDRESSLOWWORD    5
--   31:0 FpgaMacAddrLowWord R W O=ov32_FpgaMacAddrLowWord_p

-- BASEADDR + 0x18   FPGAMACADDRESSHIGHWORD    6
--   15:0 FpgaMacAddrHighWord R W O=ov16_FpgaMacAddrHighWord_p
--   31:16 rsvd R

-- BASEADDR + 0x1c   RX_TX_MODE   7
--   0:0 TxMode R W O=o_TxMode_p
--   1:1 RxMode R W O=o_RxMode_p
--   31:4 rsvd R
--   3:2 rsvd R

-- BASEADDR + 0x20   RX_TIMEOUT_2DROPFRM    8
--   31:0 RxTimeout2DropFrm R W O=ov32_RxTimeout2DropFrm_p

-- BASEADDR + 0x24   RX_CONFIG_INFO    8  
--   31:0 RxConfigInfo R I=iv32_RxConfigInfo_p

-- BASEADDR + 0x28   RX_STARTNEWTRANSFER    10 
--   31:8 rsvd R
--   7:0 RxStartNewTransfer R W O=ov8_RxStartNewTransfer_p

-- BASEADDR + 0x2c   RX_FRAMECNT_CH0    11
--   31:0 RcvdFrameCntCh0 R I=iv32_RcvdFrameCntCh0_p

-- BASEADDR + 0x30   RX_FRAMECNT_CH1    12
--   31:0 RcvdFrameCntCh1 R I=iv32_RcvdFrameCntCh1_p

-- BASEADDR + 0x34   RX_FRAMECNT_CH2    13
--   31:0 RcvdFrameCntCh2 R I=iv32_RcvdFrameCntCh2_p

-- BASEADDR + 0x38   RX_FRAMECNT_CH3    14
--   31:0 RcvdFrameCntCh3 R I=iv32_RcvdFrameCntCh3_p

-- BASEADDR + 0x3c   RX_FRAMECNT_CH4    15
--   31:0 RcvdFrameCntCh4 R I=iv32_RcvdFrameCntCh4_p

-- BASEADDR + 0x40   RX_FRAMECNT_CH5    16
--   31:0 RcvdFrameCntCh5 R I=iv32_RcvdFrameCntCh5_p

-- BASEADDR + 0x44   RX_FRAMECNT_CH6    17
--   31:0 RcvdFrameCntCh6 R I=iv32_RcvdFrameCntCh6_p

-- BASEADDR + 0x48   RX_FRAMECNT_CH7    18  
--   31:0 RcvdFrameCntCh7 R I=iv32_RcvdFrameCntCh7_p

-- BASEADDR + 0x4c   RX_ERR_STATUS_REG    19
--   2:0 RxErrStatus R W I=iv3_RxErrStatus_p
--   31:3 rsvd R

-- BASEADDR + 0x50   RX_BADFRAMECNT    20
--   31:0 RxBadFrameCnt R I=iv32_RxBadFrameCnt_p

-- BASEADDR + 0x54   RX_FRAMELOSTCNTCH0    21
--   31:0 RxFrameLostCntCh0 R I=iv32_RxFrameLostCntCh0_p

-- BASEADDR + 0x58   RX_FRAMELOSTCNTCH1    22
--   31:0 RxFrameLostCntCh1 R I=iv32_RxFrameLostCntCh1_p

-- BASEADDR + 0x5c   RX_FRAMELOSTCNTCH2    23
--   31:0 RxFrameLostCntCh2 R I=iv32_RxFrameLostCntCh2_p

-- BASEADDR + 0x60   RX_FRAMELOSTCNTCH3    24
--   31:0 RxFrameLostCntCh3 R I=iv32_RxFrameLostCntCh3_p

-- BASEADDR + 0x64   RX_FRAMELOSTCNTCH4    25
--   31:0 RxFrameLostCntCh4 R I=iv32_RxFrameLostCntCh4_p

-- BASEADDR + 0x68   RX_FRAMELOSTCNTCH5    26
--   31:0 RxFrameLostCntCh5 R I=iv32_RxFrameLostCntCh5_p

-- BASEADDR + 0x6c   RX_FRAMELOSTCNTCH6    27
--   31:0 RxFrameLostCntCh6 R I=iv32_RxFrameLostCntCh6_p

-- BASEADDR + 0x70   RX_FRAMELOSTCNTCH7       
--   31:0 RxFrameLostCntCh7 R I=iv32_RxFrameLostCntCh7_p

-- BASEADDR + 0x74   RX_DROPEDFRMCNT_CH0    28
--   31:0 RxDropedFrmCntCh0 R I=iv32_RxDropedFrmCntCh0_p

-- BASEADDR + 0x78   RX_DROPEDFRMCNT_CH1    29
--   31:0 RxDropedFrmCntCh1 R I=iv32_RxDropedFrmCntCh1_p

-- BASEADDR + 0x7c   RX_DROPEDFRMCNT_CH2    30
--   31:0 RxDropedFrmCntCh2 R I=iv32_RxDropedFrmCntCh2_p

-- BASEADDR + 0x80   RX_DROPEDFRMCNT_CH3    31
--   31:0 RxDropedFrmCntCh3 R I=iv32_RxDropedFrmCntCh3_p

-- BASEADDR + 0x84   RX_DROPEDFRMCNT_CH4    32
--   31:0 RxDropedFrmCntCh4 R I=iv32_RxDropedFrmCntCh4_p

-- BASEADDR + 0x88   RX_DROPEDFRMCNT_CH5    33
--   31:0 RxDropedFrmCntCh5 R I=iv32_RxDropedFrmCntCh5_p

-- BASEADDR + 0x8c   RX_DROPEDFRMCNT_CH6    34
--   31:0 RxDropedFrmCntCh6 R I=iv32_RxDropedFrmCntCh6_p

-- BASEADDR + 0x90   RX_DROPEDFRMCNT_CH7    35
--   31:0 RxDropedFrmCntCh7 R I=iv32_RxDropedFrmCntCh7_p

-- BASEADDR + 0x94   RX_FIFO_UNDERRUN   36
--   31:8 rsvd R
--   7:0 RxFifoUnderrun R+ I=iv8_RxFifoUnderrun_p

-- BASEADDR + 0x98   RX_FOR_FUTURE_USE_1   37
--   31:0 rsvd R

-- BASEADDR + 0x9c   TX_FIFO_OVERRUN   38
--   31:8 rsvd R
--   7:0 TxFifoOverrun R+ I=iv8_TxFifoOverrun_p

-- BASEADDR + 0xa0   TX_FRAMESIZE_CH0    39
--   14:0 TxFrameSizeCh0 R W O=ov15_TxFrameSizeCh0_p
--   31:15 rsvd R

-- BASEADDR + 0xa4   TX_FRAMESIZE_CH1    40
--   14:0 TxFrameSizeCh1 R W O=ov15_TxFrameSizeCh1_p
--   31:15 rsvd R

-- BASEADDR + 0xa8   TX_FRAMESIZE_CH2    41
--   14:0 TxFrameSizeCh2 R W O=ov15_TxFrameSizeCh2_p
--   31:15 rsvd R

-- BASEADDR + 0xac   TX_FRAMESIZE_CH3    42
--   14:0 TxFrameSizeCh3 R W O=ov15_TxFrameSizeCh3_p
--   31:15 rsvd R

-- BASEADDR + 0xb0   TX_FRAMESIZE_CH4    43
--   14:0 TxFrameSizeCh4 R W O=ov15_TxFrameSizeCh4_p
--   31:15 rsvd R

-- BASEADDR + 0xb4   TX_FRAMESIZE_CH5    44
--   14:0 TxFrameSizeCh5 R W O=ov15_TxFrameSizeCh5_p
--   31:15 rsvd R

-- BASEADDR + 0xb8   TX_FRAMESIZE_CH6    45
--   14:0 TxFrameSizeCh6 R W O=ov15_TxFrameSizeCh6_p
--   31:15 rsvd R

-- BASEADDR + 0xbc   TX_FRAMESIZE_CH7    46
--   14:0 TxFrameSizeCh7 R W O=ov15_TxFrameSizeCh7_p
--   31:15 rsvd R

-- BASEADDR + 0xc0   TX_TRANSFERSIZE_CH0    47 
--   31:0 TxTransferSizeCh0 R W O=ov32_TxTransferSizeCh0_p

-- BASEADDR + 0xc4   TX_TRANSFERSIZE_CH1    48 
--   31:0 TxTransferSizeCh1 R W O=ov32_TxTransferSizeCh1_p

-- BASEADDR + 0xc8   TX_TRANSFERSIZE_CH2    49
--   31:0 TxTransferSizeCh2 R W O=ov32_TxTransferSizeCh2_p

-- BASEADDR + 0xcc   TX_TRANSFERSIZE_CH3    50
--   31:0 TxTransferSizeCh3 R W O=ov32_TxTransferSizeCh3_p

-- BASEADDR + 0xd0   TX_TRANSFERSIZE_CH4    51
--   31:0 TxTransferSizeCh4 R W O=ov32_TxTransferSizeCh4_p

-- BASEADDR + 0xd4   TX_TRANSFERSIZE_CH5    52
--   31:0 TxTransferSizeCh5 R W O=ov32_TxTransferSizeCh5_p

-- BASEADDR + 0xd8   TX_TRANSFERSIZE_CH6    53
--   31:0 TxTransferSizeCh6 R W O=ov32_TxTransferSizeCh6_p

-- BASEADDR + 0xdc   TX_TRANSFERSIZE_CH7    54
--   31:0 TxTransferSizeCh7 R W O=ov32_TxTransferSizeCh7_p

-- BASEADDR + 0xe0   TX_FRAME_GAP    55
--   31:0 TxFrameGap R W O=ov32_TxFrameGap_p

-- BASEADDR + 0xe4   TX_FRAME_BURST    56     
--   31:8 rsvd R
--   7:0 TxChFrsBurst R W O=ov8_TxChFrsBurst_p

-- BASEADDR + 0xe8   TX_CONFIG_INFO    57     
--   31:0 TxConfigInfo R I=iv32_TxConfigInfo_p

-- BASEADDR + 0xec   TX_STARTNEWTRANSFER    58
--   31:8 rsvd R
--   7:0 TxStartNewTransfer R W O=ov8_TxStartNewTransfer_p

-- BASEADDR + 0xf0   TX_FRAMECNT_CH0    59
--   31:0 SentFrameCntCh0 R I=iv32_SentFrameCntCh0_p

-- BASEADDR + 0xf4   TX_FRAMECNT_CH1    60
--   31:0 SentFrameCntCh1 R I=iv32_SentFrameCntCh1_p

-- BASEADDR + 0xf8   TX_FRAMECNT_CH2    61
--   31:0 SentFrameCntCh2 R I=iv32_SentFrameCntCh2_p

-- BASEADDR + 0xfc   TX_FRAMECNT_CH3    62
--   31:0 SentFrameCntCh3 R I=iv32_SentFrameCntCh3_p

-- BASEADDR + 0x100   TX_FRAMECNT_CH4    63
--   31:0 SentFrameCntCh4 R I=iv32_SentFrameCntCh4_p

-- BASEADDR + 0x104   TX_FRAMECNT_CH5    64
--   31:0 SentFrameCntCh5 R I=iv32_SentFrameCntCh5_p

-- BASEADDR + 0x108   TX_FRAMECNT_CH6    65
--   31:0 SentFrameCntCh6 R I=iv32_SentFrameCntCh6_p

-- BASEADDR + 0x10c   TX_FRAMECNT_CH7    66    
--   31:0 SentFrameCntCh7 R I=iv32_SentFrameCntCh7_p

-- BASEADDR + 0x110   TX_NBDATAINFIFO_CH0    67 
--   31:0 TxNbDataInfoCh0 R I=iv32_TxNbDataInfoCh0_p

-- BASEADDR + 0x114   TX_NBDATAINFIFO_CH1    68 
--   31:0 TxNbDataInfoCh1 R I=iv32_TxNbDataInfoCh1_p

-- BASEADDR + 0x118   TX_NBDATAINFIFO_CH2    69 
--   31:0 TxNbDataInfoCh2 R I=iv32_TxNbDataInfoCh2_p

-- BASEADDR + 0x11c   TX_NBDATAINFIFO_CH3    70 
--   31:0 TxNbDataInfoCh3 R I=iv32_TxNbDataInfoCh3_p

-- BASEADDR + 0x120   TX_NBDATAINFIFO_CH4    71 
--   31:0 TxNbDataInfoCh4 R I=iv32_TxNbDataInfoCh4_p

-- BASEADDR + 0x124   TX_NBDATAINFIFO_CH5    74 
--   31:0 TxNbDataInfoCh5 R I=iv32_TxNbDataInfoCh5_p

-- BASEADDR + 0x128   TX_NBDATAINFIFO_CH6    75 
--   31:0 TxNbDataInfoCh6 R I=iv32_TxNbDataInfoCh6_p

-- BASEADDR + 0x12c   TX_NBDATAINFIFO_CH7    76
--   31:0 TxNbDataInfoCh7 R I=iv32_TxNbDataInfoCh7_p

-- BASEADDR + 0x130   RX_THRESHOLD_H_CH0    77
--   14:0 RxThresholdHigh_ch0 R W O=ov15_RxThresholdHigh_ch0_p
--   31:15 rsvd R

-- BASEADDR + 0x134   RX_THRESHOLD_L_CH0    78
--   14:0 RxThresholdLow_ch0 R W O=ov15_RxThresholdLow_ch0_p
--   31:15 rsvd R

--------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library proc_common_v3_00_a;
use proc_common_v3_00_a.proc_common_pkg.all;

-- DO NOT EDIT ABOVE THIS LINE --------------------

--USER libraries added here

------------------------------------------------------------------------------
-- Entity section
------------------------------------------------------------------------------
-- Definition of Generics:
--   C_NUM_REG                    -- Number of software accessible registers
--   C_SLV_DWIDTH                 -- Slave interface data bus width
--
-- Definition of Ports:
--   Bus2IP_Clk                   -- Bus to IP clock
--   Bus2IP_Resetn                -- Bus to IP reset
--   Bus2IP_Data                  -- Bus to IP data bus
--   Bus2IP_BE                    -- Bus to IP byte enables
--   Bus2IP_RdCE                  -- Bus to IP read chip enable
--   Bus2IP_WrCE                  -- Bus to IP write chip enable
--   IP2Bus_Data                  -- IP to Bus data bus
--   IP2Bus_RdAck                 -- IP to Bus read transfer acknowledgement
--   IP2Bus_WrAck                 -- IP to Bus write transfer acknowledgement
--   IP2Bus_Error                 -- IP to Bus error response
------------------------------------------------------------------------------

entity user_logic is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------
    --USER generics added here
    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_NUM_REG                      : integer              := 78;
    C_SLV_DWIDTH                   : integer              := 32
    -- DO NOT EDIT ABOVE THIS LINE ---------------------
  );
  port
  (
    -- ADD USER PORTS BELOW THIS LINE ------------------
    --USER ports added here
    -- ADD USER PORTS ABOVE THIS LINE ------------------
    -- User ports
  i_logicRst_p : in std_logic;

    o_CoreResetPulse_p : out std_logic;
    ov8_TxFifoReset_p : out std_logic_vector(7 downto 0);
    ov8_RxFifoReset_p : out std_logic_vector(7 downto 0);
    ov32_HostMacAddrLowWord_p : out std_logic_vector(31 downto 0);
    ov16_HostMacAddrHighWord_p : out std_logic_vector(15 downto 0);
    ov32_FpgaMacAddrLowWord_p : out std_logic_vector(31 downto 0);
    ov16_FpgaMacAddrHighWord_p : out std_logic_vector(15 downto 0);
    o_TxMode_p : out std_logic;
    o_RxMode_p : out std_logic;
    ov32_RxTimeout2DropFrm_p : out std_logic_vector(31 downto 0);
    iv32_RxConfigInfo_p : in std_logic_vector(31 downto 0);
    ov8_RxStartNewTransfer_p : out std_logic_vector(7 downto 0);
    iv32_RcvdFrameCntCh0_p : in std_logic_vector(31 downto 0);
    iv32_RcvdFrameCntCh1_p : in std_logic_vector(31 downto 0);
    iv32_RcvdFrameCntCh2_p : in std_logic_vector(31 downto 0);
    iv32_RcvdFrameCntCh3_p : in std_logic_vector(31 downto 0);
    iv32_RcvdFrameCntCh4_p : in std_logic_vector(31 downto 0);
    iv32_RcvdFrameCntCh5_p : in std_logic_vector(31 downto 0);
    iv32_RcvdFrameCntCh6_p : in std_logic_vector(31 downto 0);
    iv32_RcvdFrameCntCh7_p : in std_logic_vector(31 downto 0);
    iv3_RxErrStatus_p : in std_logic_vector(2 downto 0);
    iv32_RxBadFrameCnt_p : in std_logic_vector(31 downto 0);
    iv32_RxFrameLostCntCh0_p : in std_logic_vector(31 downto 0);
    iv32_RxFrameLostCntCh1_p : in std_logic_vector(31 downto 0);
    iv32_RxFrameLostCntCh2_p : in std_logic_vector(31 downto 0);
    iv32_RxFrameLostCntCh3_p : in std_logic_vector(31 downto 0);
    iv32_RxFrameLostCntCh4_p : in std_logic_vector(31 downto 0);
    iv32_RxFrameLostCntCh5_p : in std_logic_vector(31 downto 0);
    iv32_RxFrameLostCntCh6_p : in std_logic_vector(31 downto 0);
    iv32_RxFrameLostCntCh7_p : in std_logic_vector(31 downto 0);
    iv32_RxDropedFrmCntCh0_p : in std_logic_vector(31 downto 0);
    iv32_RxDropedFrmCntCh1_p : in std_logic_vector(31 downto 0);
    iv32_RxDropedFrmCntCh2_p : in std_logic_vector(31 downto 0);
    iv32_RxDropedFrmCntCh3_p : in std_logic_vector(31 downto 0);
    iv32_RxDropedFrmCntCh4_p : in std_logic_vector(31 downto 0);
    iv32_RxDropedFrmCntCh5_p : in std_logic_vector(31 downto 0);
    iv32_RxDropedFrmCntCh6_p : in std_logic_vector(31 downto 0);
    iv32_RxDropedFrmCntCh7_p : in std_logic_vector(31 downto 0);
    iv8_RxFifoUnderrun_p : in std_logic_vector(7 downto 0);
    o_RxFifoUnderrunRead_p : out std_logic;
    iv8_TxFifoOverrun_p : in std_logic_vector(7 downto 0);
    o_TxFifoOverrunRead_p : out std_logic;
    ov15_TxFrameSizeCh0_p : out std_logic_vector(14 downto 0);
    ov15_TxFrameSizeCh1_p : out std_logic_vector(14 downto 0);
    ov15_TxFrameSizeCh2_p : out std_logic_vector(14 downto 0);
    ov15_TxFrameSizeCh3_p : out std_logic_vector(14 downto 0);
    ov15_TxFrameSizeCh4_p : out std_logic_vector(14 downto 0);
    ov15_TxFrameSizeCh5_p : out std_logic_vector(14 downto 0);
    ov15_TxFrameSizeCh6_p : out std_logic_vector(14 downto 0);
    ov15_TxFrameSizeCh7_p : out std_logic_vector(14 downto 0);
    ov32_TxTransferSizeCh0_p : out std_logic_vector(31 downto 0);
    ov32_TxTransferSizeCh1_p : out std_logic_vector(31 downto 0);
    ov32_TxTransferSizeCh2_p : out std_logic_vector(31 downto 0);
    ov32_TxTransferSizeCh3_p : out std_logic_vector(31 downto 0);
    ov32_TxTransferSizeCh4_p : out std_logic_vector(31 downto 0);
    ov32_TxTransferSizeCh5_p : out std_logic_vector(31 downto 0);
    ov32_TxTransferSizeCh6_p : out std_logic_vector(31 downto 0);
    ov32_TxTransferSizeCh7_p : out std_logic_vector(31 downto 0);
    ov32_TxFrameGap_p : out std_logic_vector(31 downto 0);
    ov8_TxChFrsBurst_p : out std_logic_vector(7 downto 0);
    iv32_TxConfigInfo_p : in std_logic_vector(31 downto 0);
    ov8_TxStartNewTransfer_p : out std_logic_vector(7 downto 0);
    iv32_SentFrameCntCh0_p : in std_logic_vector(31 downto 0);
    iv32_SentFrameCntCh1_p : in std_logic_vector(31 downto 0);
    iv32_SentFrameCntCh2_p : in std_logic_vector(31 downto 0);
    iv32_SentFrameCntCh3_p : in std_logic_vector(31 downto 0);
    iv32_SentFrameCntCh4_p : in std_logic_vector(31 downto 0);
    iv32_SentFrameCntCh5_p : in std_logic_vector(31 downto 0);
    iv32_SentFrameCntCh6_p : in std_logic_vector(31 downto 0);
    iv32_SentFrameCntCh7_p : in std_logic_vector(31 downto 0);
    iv32_TxNbDataInfoCh0_p : in std_logic_vector(31 downto 0);
    iv32_TxNbDataInfoCh1_p : in std_logic_vector(31 downto 0);
    iv32_TxNbDataInfoCh2_p : in std_logic_vector(31 downto 0);
    iv32_TxNbDataInfoCh3_p : in std_logic_vector(31 downto 0);
    iv32_TxNbDataInfoCh4_p : in std_logic_vector(31 downto 0);
    iv32_TxNbDataInfoCh5_p : in std_logic_vector(31 downto 0);
    iv32_TxNbDataInfoCh6_p : in std_logic_vector(31 downto 0);
    iv32_TxNbDataInfoCh7_p : in std_logic_vector(31 downto 0);
    ov15_RxThresholdHigh_ch0_p : out std_logic_vector(14 downto 0);
    ov15_RxThresholdLow_ch0_p : out std_logic_vector(14 downto 0);
    -- Bus protocol ports, do not add to or delete
    Bus2IP_Clk                     : in  std_logic;
    Bus2IP_Resetn                  : in  std_logic;
    Bus2IP_Data                    : in  std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    Bus2IP_BE                      : in  std_logic_vector(C_SLV_DWIDTH/8-1 downto 0);
    Bus2IP_RdCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    Bus2IP_WrCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    IP2Bus_Data                    : out std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    IP2Bus_RdAck                   : out std_logic;
    IP2Bus_WrAck                   : out std_logic;
    IP2Bus_Error                   : out std_logic
  );

 attribute MAX_FANOUT : string;
 attribute SIGIS : string;
 attribute SIGIS of Bus2IP_Clk    : signal is "CLK";
 attribute SIGIS of Bus2IP_Resetn : signal is "RST";

end entity user_logic;

------------------------------------------------------------------------------
-- Architecture section
------------------------------------------------------------------------------

architecture IMP of user_logic is

-------------------------------------------------------------------------------
-- Constant declarations
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
--     ************** Function declaratin *******************                   
-- Return a std_logic_vector with only one bit set to one.
-- The argument BitPosition represent the bit position to set to one, starting with 0.
-- The argument Width represent the width of the returned std_logic_vector.
-------------------------------------------------------------------------------
  function OneHotVector( BitPosition : integer;                              
                Width : integer)                                             
                return std_logic_vector                                      
  is                                                                         
    variable Result                   : std_logic_vector(Width - 1 downto 0);

  begin                        
    Result := (others => '0'); 
    Result(BitPosition) := '1';
    return Result;             
  end OneHotVector;            
-------------------------------------------------------------------------------
-- Signal and Type Declarations
-------------------------------------------------------------------------------

  signal CoreResetPulse_s                     : std_logic;
  signal v8_TxFifoReset_s                     : std_logic_vector(7 downto 0);
  signal v8_RxFifoReset_s                     : std_logic_vector(7 downto 0);
  signal v32_HostMacAddrLowWord_s                     : std_logic_vector(31 downto 0);
  signal v16_HostMacAddrHighWord_s                     : std_logic_vector(15 downto 0);
  signal v32_FpgaMacAddrLowWord_s                     : std_logic_vector(31 downto 0);
  signal v16_FpgaMacAddrHighWord_s                     : std_logic_vector(15 downto 0);
  signal TxMode_s                     : std_logic;
  signal RxMode_s                     : std_logic;
  signal v32_RxTimeout2DropFrm_s                     : std_logic_vector(31 downto 0);
  signal v8_RxStartNewTransfer_s                     : std_logic_vector(7 downto 0);
  signal v3_RxErrStatus_s                     : std_logic_vector(2 downto 0);
  signal v15_TxFrameSizeCh0_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh1_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh2_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh3_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh4_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh5_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh6_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh7_s                     : std_logic_vector(14 downto 0);
  signal v32_TxTransferSizeCh0_s                     : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh1_s                     : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh2_s                     : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh3_s                     : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh4_s                     : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh5_s                     : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh6_s                     : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh7_s                     : std_logic_vector(31 downto 0);
  signal v32_TxFrameGap_s                     : std_logic_vector(31 downto 0);
  signal v8_TxChFrsBurst_s                     : std_logic_vector(7 downto 0);
  signal v8_TxStartNewTransfer_s                     : std_logic_vector(7 downto 0);
  signal v15_RxThresholdHigh_ch0_s                     : std_logic_vector(14 downto 0);
  signal v15_RxThresholdLow_ch0_s                     : std_logic_vector(14 downto 0);
  signal slv_reg_write_sel              : std_logic_vector(77 downto 0);
  signal slv_reg_read_sel               : std_logic_vector(77 downto 0);
  signal slv_ip2bus_data                : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal slv_read_ack                   : std_logic;
  signal slv_write_ack                  : std_logic;

------------------------------------------------------------------------------
begin
------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Begin architecture
-------------------------------------------------------------------------------

-- swap bits
WrCeBitSwap: for i in 0 to slv_reg_write_sel'high generate
  slv_reg_write_sel(i) <= Bus2IP_WrCE(slv_reg_write_sel'high - i);
end generate WrCeBitSwap;

RdCeBitSwap: for i in 0 to slv_reg_read_sel'high generate
  slv_reg_read_sel(i)  <= Bus2IP_RdCE(slv_reg_read_sel'high - i);
end generate RdCeBitSwap;

-- generate write/read ack
  slv_write_ack <=   Bus2IP_WrCE(0) or   Bus2IP_WrCE(1) or   Bus2IP_WrCE(2) or   Bus2IP_WrCE(3) or   Bus2IP_WrCE(4) or   Bus2IP_WrCE(5) or   Bus2IP_WrCE(6) or   Bus2IP_WrCE(7) or   Bus2IP_WrCE(8) or   Bus2IP_WrCE(9) or   Bus2IP_WrCE(10) or   Bus2IP_WrCE(11) or   Bus2IP_WrCE(12) or   Bus2IP_WrCE(13) or   Bus2IP_WrCE(14) or   Bus2IP_WrCE(15) or   Bus2IP_WrCE(16) or   Bus2IP_WrCE(17) or   Bus2IP_WrCE(18) or   Bus2IP_WrCE(19) or   Bus2IP_WrCE(20) or   Bus2IP_WrCE(21) or   Bus2IP_WrCE(22) or   Bus2IP_WrCE(23) or   Bus2IP_WrCE(24) or   Bus2IP_WrCE(25) or   Bus2IP_WrCE(26) or   Bus2IP_WrCE(27) or   Bus2IP_WrCE(28) or   Bus2IP_WrCE(29) or   Bus2IP_WrCE(30) or   Bus2IP_WrCE(31) or   Bus2IP_WrCE(32) or   Bus2IP_WrCE(33) or   Bus2IP_WrCE(34) or   Bus2IP_WrCE(35) or   Bus2IP_WrCE(36) or   Bus2IP_WrCE(37) or   Bus2IP_WrCE(38) or   Bus2IP_WrCE(39) or   Bus2IP_WrCE(40) or   Bus2IP_WrCE(41) or   Bus2IP_WrCE(42) or   Bus2IP_WrCE(43) or   Bus2IP_WrCE(44) or   Bus2IP_WrCE(45) or   Bus2IP_WrCE(46) or   Bus2IP_WrCE(47) or   Bus2IP_WrCE(48) or   Bus2IP_WrCE(49) or   Bus2IP_WrCE(50) or   Bus2IP_WrCE(51) or   Bus2IP_WrCE(52) or   Bus2IP_WrCE(53) or   Bus2IP_WrCE(54) or   Bus2IP_WrCE(55) or   Bus2IP_WrCE(56) or   Bus2IP_WrCE(57) or   Bus2IP_WrCE(58) or   Bus2IP_WrCE(59) or   Bus2IP_WrCE(60) or   Bus2IP_WrCE(61) or   Bus2IP_WrCE(62) or   Bus2IP_WrCE(63) or   Bus2IP_WrCE(64) or   Bus2IP_WrCE(65) or   Bus2IP_WrCE(66) or   Bus2IP_WrCE(67) or   Bus2IP_WrCE(68) or   Bus2IP_WrCE(69) or   Bus2IP_WrCE(70) or   Bus2IP_WrCE(71) or   Bus2IP_WrCE(72) or   Bus2IP_WrCE(73) or   Bus2IP_WrCE(74) or   Bus2IP_WrCE(75) or   Bus2IP_WrCE(76) or   Bus2IP_WrCE(77);
  slv_read_ack  <=   Bus2IP_RdCE(0) or   Bus2IP_RdCE(1) or   Bus2IP_RdCE(2) or   Bus2IP_RdCE(3) or   Bus2IP_RdCE(4) or   Bus2IP_RdCE(5) or   Bus2IP_RdCE(6) or   Bus2IP_RdCE(7) or   Bus2IP_RdCE(8) or   Bus2IP_RdCE(9) or   Bus2IP_RdCE(10) or   Bus2IP_RdCE(11) or   Bus2IP_RdCE(12) or   Bus2IP_RdCE(13) or   Bus2IP_RdCE(14) or   Bus2IP_RdCE(15) or   Bus2IP_RdCE(16) or   Bus2IP_RdCE(17) or   Bus2IP_RdCE(18) or   Bus2IP_RdCE(19) or   Bus2IP_RdCE(20) or   Bus2IP_RdCE(21) or   Bus2IP_RdCE(22) or   Bus2IP_RdCE(23) or   Bus2IP_RdCE(24) or   Bus2IP_RdCE(25) or   Bus2IP_RdCE(26) or   Bus2IP_RdCE(27) or   Bus2IP_RdCE(28) or   Bus2IP_RdCE(29) or   Bus2IP_RdCE(30) or   Bus2IP_RdCE(31) or   Bus2IP_RdCE(32) or   Bus2IP_RdCE(33) or   Bus2IP_RdCE(34) or   Bus2IP_RdCE(35) or   Bus2IP_RdCE(36) or   Bus2IP_RdCE(37) or   Bus2IP_RdCE(38) or   Bus2IP_RdCE(39) or   Bus2IP_RdCE(40) or   Bus2IP_RdCE(41) or   Bus2IP_RdCE(42) or   Bus2IP_RdCE(43) or   Bus2IP_RdCE(44) or   Bus2IP_RdCE(45) or   Bus2IP_RdCE(46) or   Bus2IP_RdCE(47) or   Bus2IP_RdCE(48) or   Bus2IP_RdCE(49) or   Bus2IP_RdCE(50) or   Bus2IP_RdCE(51) or   Bus2IP_RdCE(52) or   Bus2IP_RdCE(53) or   Bus2IP_RdCE(54) or   Bus2IP_RdCE(55) or   Bus2IP_RdCE(56) or   Bus2IP_RdCE(57) or   Bus2IP_RdCE(58) or   Bus2IP_RdCE(59) or   Bus2IP_RdCE(60) or   Bus2IP_RdCE(61) or   Bus2IP_RdCE(62) or   Bus2IP_RdCE(63) or   Bus2IP_RdCE(64) or   Bus2IP_RdCE(65) or   Bus2IP_RdCE(66) or   Bus2IP_RdCE(67) or   Bus2IP_RdCE(68) or   Bus2IP_RdCE(69) or   Bus2IP_RdCE(70) or   Bus2IP_RdCE(71) or   Bus2IP_RdCE(72) or   Bus2IP_RdCE(73) or   Bus2IP_RdCE(74) or   Bus2IP_RdCE(75) or   Bus2IP_RdCE(76) or   Bus2IP_RdCE(77);

 -- implement slave model software accessible register(s)
 SLAVE_REG_WRITE_PROC : process( Bus2IP_Clk ) is
 begin

  if Bus2IP_Clk'event and Bus2IP_Clk = '1' then
    if Bus2IP_Resetn = '0' then
      CoreResetPulse_s <= '0';
      v8_TxFifoReset_s <= X"00";
      v8_RxFifoReset_s <= X"00";
      v32_HostMacAddrLowWord_s <= X"00000000";
      v16_HostMacAddrHighWord_s <= X"0000";
      v32_FpgaMacAddrLowWord_s <= X"00000000";
      v16_FpgaMacAddrHighWord_s <= X"0000";
      TxMode_s <= '0';
      RxMode_s <= '0';
      v32_RxTimeout2DropFrm_s <= X"000001F4";
      v8_RxStartNewTransfer_s <= X"00";
      v3_RxErrStatus_s <= "000";  	  
      v15_TxFrameSizeCh0_s <= "000000000000000";
      v15_TxFrameSizeCh1_s <= "000000000000000";
      v15_TxFrameSizeCh2_s <= "000000000000000";
      v15_TxFrameSizeCh3_s <= "000000000000000";
      v15_TxFrameSizeCh4_s <= "000000000000000";
      v15_TxFrameSizeCh5_s <= "000000000000000";
      v15_TxFrameSizeCh6_s <= "000000000000000";
      v15_TxFrameSizeCh7_s <= "000000000000000";
      v32_TxTransferSizeCh0_s <= X"00000000";
      v32_TxTransferSizeCh1_s <= X"00000000";
      v32_TxTransferSizeCh2_s <= X"00000000";
      v32_TxTransferSizeCh3_s <= X"00000000";
      v32_TxTransferSizeCh4_s <= X"00000000";
      v32_TxTransferSizeCh5_s <= X"00000000";
      v32_TxTransferSizeCh6_s <= X"00000000";
      v32_TxTransferSizeCh7_s <= X"00000000";
      v32_TxFrameGap_s <= X"00000000";
      v8_TxChFrsBurst_s <= x"00";
      v8_TxStartNewTransfer_s <= X"00";
      v15_RxThresholdHigh_ch0_s <= "111111111111111";
      v15_RxThresholdLow_ch0_s <= "000000000000000";

    else

  -- Synchronous reset
  if ( i_logicRst_p = '1' ) then
    CoreResetPulse_s <= '0';
    v8_TxFifoReset_s <= X"00";
    v8_RxFifoReset_s <= X"00";
    v32_HostMacAddrLowWord_s <= X"00000000";
    v16_HostMacAddrHighWord_s <= X"0000";
    v32_FpgaMacAddrLowWord_s <= X"00000000";
    v16_FpgaMacAddrHighWord_s <= X"0000";
    TxMode_s <= '0';
    RxMode_s <= '0';
    v32_RxTimeout2DropFrm_s <= X"000001F4";
    v8_RxStartNewTransfer_s <= X"00";
    v3_RxErrStatus_s <= "000";
    v15_TxFrameSizeCh0_s <= "000000000000000";
    v15_TxFrameSizeCh1_s <= "000000000000000";
    v15_TxFrameSizeCh2_s <= "000000000000000";
    v15_TxFrameSizeCh3_s <= "000000000000000";
    v15_TxFrameSizeCh4_s <= "000000000000000";
    v15_TxFrameSizeCh5_s <= "000000000000000";
    v15_TxFrameSizeCh6_s <= "000000000000000";
    v15_TxFrameSizeCh7_s <= "000000000000000";
    v32_TxTransferSizeCh0_s <= X"00000000";
    v32_TxTransferSizeCh1_s <= X"00000000";
    v32_TxTransferSizeCh2_s <= X"00000000";
    v32_TxTransferSizeCh3_s <= X"00000000";
    v32_TxTransferSizeCh4_s <= X"00000000";
    v32_TxTransferSizeCh5_s <= X"00000000";
    v32_TxTransferSizeCh6_s <= X"00000000";
    v32_TxTransferSizeCh7_s <= X"00000000";
    v32_TxFrameGap_s <= X"00000000";
    v8_TxChFrsBurst_s <= x"00";
    v8_TxStartNewTransfer_s <= X"00";
    v15_RxThresholdHigh_ch0_s <= "111111111111111";
    v15_RxThresholdLow_ch0_s <= "000000000000000";
  end if;

  CoreResetPulse_s <= '0';
      case slv_reg_write_sel is

        when OneHotVector(1,78) =>
          CoreResetPulse_s <= Bus2IP_Data(0);

        when OneHotVector(2,78) =>
          v8_TxFifoReset_s <= Bus2IP_Data(23 downto 16);
          v8_RxFifoReset_s <= Bus2IP_Data(7 downto 0);

        when OneHotVector(3,78) =>
          v32_HostMacAddrLowWord_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(4,78) =>
          v16_HostMacAddrHighWord_s <= Bus2IP_Data(15 downto 0);

        when OneHotVector(5,78) =>
          v32_FpgaMacAddrLowWord_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(6,78) =>
          v16_FpgaMacAddrHighWord_s <= Bus2IP_Data(15 downto 0);

        when OneHotVector(7,78) =>
          TxMode_s <= Bus2IP_Data(0);
          RxMode_s <= Bus2IP_Data(1);

        when OneHotVector(8,78) =>
          v32_RxTimeout2DropFrm_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(10,78) =>
          v8_RxStartNewTransfer_s <= Bus2IP_Data(7 downto 0);

        when OneHotVector(19,78) =>
          v3_RxErrStatus_s <= Bus2IP_Data(2 downto 0);

        when OneHotVector(40,78) =>
          v15_TxFrameSizeCh0_s <= Bus2IP_Data(14 downto 0);

        when OneHotVector(41,78) =>
          v15_TxFrameSizeCh1_s <= Bus2IP_Data(14 downto 0);

        when OneHotVector(42,78) =>
          v15_TxFrameSizeCh2_s <= Bus2IP_Data(14 downto 0);

        when OneHotVector(43,78) =>
          v15_TxFrameSizeCh3_s <= Bus2IP_Data(14 downto 0);

        when OneHotVector(44,78) =>
          v15_TxFrameSizeCh4_s <= Bus2IP_Data(14 downto 0);

        when OneHotVector(45,78) =>
          v15_TxFrameSizeCh5_s <= Bus2IP_Data(14 downto 0);

        when OneHotVector(46,78) =>
          v15_TxFrameSizeCh6_s <= Bus2IP_Data(14 downto 0);

        when OneHotVector(47,78) =>
          v15_TxFrameSizeCh7_s <= Bus2IP_Data(14 downto 0);

        when OneHotVector(48,78) =>
          v32_TxTransferSizeCh0_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(49,78) =>
          v32_TxTransferSizeCh1_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(50,78) =>
          v32_TxTransferSizeCh2_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(51,78) =>
          v32_TxTransferSizeCh3_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(52,78) =>
          v32_TxTransferSizeCh4_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(53,78) =>
          v32_TxTransferSizeCh5_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(54,78) =>
          v32_TxTransferSizeCh6_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(55,78) =>
          v32_TxTransferSizeCh7_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(56,78) =>
          v32_TxFrameGap_s <= Bus2IP_Data(31 downto 0);

        when OneHotVector(57,78) =>
          v8_TxChFrsBurst_s <= Bus2IP_Data(7 downto 0);

        when OneHotVector(59,78) =>
          v8_TxStartNewTransfer_s <= Bus2IP_Data(7 downto 0);

        when OneHotVector(76,78) =>
          v15_RxThresholdHigh_ch0_s <= Bus2IP_Data(14 downto 0);

        when OneHotVector(77,78) =>
          v15_RxThresholdLow_ch0_s <= Bus2IP_Data(14 downto 0);
        when others =>
          null;
      end case;
    end if;
  end if;

 end process SLAVE_REG_WRITE_PROC;

 -- implement slave model software accessible register(s) read mux
SLAVE_REG_READ_PROC : process( slv_reg_read_sel, v8_TxFifoReset_s, v8_RxFifoReset_s, v32_HostMacAddrLowWord_s, v16_HostMacAddrHighWord_s, v32_FpgaMacAddrLowWord_s, v16_FpgaMacAddrHighWord_s, TxMode_s, RxMode_s, v32_RxTimeout2DropFrm_s, iv32_RxConfigInfo_p, v8_RxStartNewTransfer_s, iv32_RcvdFrameCntCh0_p, iv32_RcvdFrameCntCh1_p, iv32_RcvdFrameCntCh2_p, iv32_RcvdFrameCntCh3_p, iv32_RcvdFrameCntCh4_p, iv32_RcvdFrameCntCh5_p, iv32_RcvdFrameCntCh6_p, iv32_RcvdFrameCntCh7_p, iv3_RxErrStatus_p, iv32_RxBadFrameCnt_p, iv32_RxFrameLostCntCh0_p, iv32_RxFrameLostCntCh1_p, iv32_RxFrameLostCntCh2_p, iv32_RxFrameLostCntCh3_p, iv32_RxFrameLostCntCh4_p, iv32_RxFrameLostCntCh5_p, iv32_RxFrameLostCntCh6_p, iv32_RxFrameLostCntCh7_p, iv32_RxDropedFrmCntCh0_p, iv32_RxDropedFrmCntCh1_p, iv32_RxDropedFrmCntCh2_p, iv32_RxDropedFrmCntCh3_p, iv32_RxDropedFrmCntCh4_p, iv32_RxDropedFrmCntCh5_p, iv32_RxDropedFrmCntCh6_p, iv32_RxDropedFrmCntCh7_p, iv8_RxFifoUnderrun_p, iv8_TxFifoOverrun_p, v15_TxFrameSizeCh0_s, v15_TxFrameSizeCh1_s, v15_TxFrameSizeCh2_s, v15_TxFrameSizeCh3_s, v15_TxFrameSizeCh4_s, v15_TxFrameSizeCh5_s, v15_TxFrameSizeCh6_s, v15_TxFrameSizeCh7_s, v32_TxTransferSizeCh0_s, v32_TxTransferSizeCh1_s, v32_TxTransferSizeCh2_s, v32_TxTransferSizeCh3_s, v32_TxTransferSizeCh4_s, v32_TxTransferSizeCh5_s, v32_TxTransferSizeCh6_s, v32_TxTransferSizeCh7_s, v32_TxFrameGap_s, v8_TxChFrsBurst_s, iv32_TxConfigInfo_p, v8_TxStartNewTransfer_s, iv32_SentFrameCntCh0_p, iv32_SentFrameCntCh1_p, iv32_SentFrameCntCh2_p, iv32_SentFrameCntCh3_p, iv32_SentFrameCntCh4_p, iv32_SentFrameCntCh5_p, iv32_SentFrameCntCh6_p, iv32_SentFrameCntCh7_p, iv32_TxNbDataInfoCh0_p, iv32_TxNbDataInfoCh1_p, iv32_TxNbDataInfoCh2_p, iv32_TxNbDataInfoCh3_p, iv32_TxNbDataInfoCh4_p, iv32_TxNbDataInfoCh5_p, iv32_TxNbDataInfoCh6_p, iv32_TxNbDataInfoCh7_p, v15_RxThresholdHigh_ch0_s, v15_RxThresholdLow_ch0_s) is
 begin
 	--
 	o_RxFifoUnderrunRead_p <= '0';
 	o_TxFifoOverrunRead_p  <= '0';
 	
   case slv_reg_read_sel is

        when OneHotVector(0,78) =>
          slv_ip2bus_data(31 downto 0) <= X"DE880201";

        when OneHotVector(1,78) =>
          slv_ip2bus_data(31 downto 1) <= "0000000000000000000000000000000";

        when OneHotVector(2,78) =>
          slv_ip2bus_data(15 downto 8) <= x"00";
          slv_ip2bus_data(23 downto 16) <= v8_TxFifoReset_s;
          slv_ip2bus_data(31 downto 24) <= x"00";
          slv_ip2bus_data(7 downto 0) <= v8_RxFifoReset_s;

        when OneHotVector(3,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_HostMacAddrLowWord_s;

        when OneHotVector(4,78) =>
          slv_ip2bus_data(15 downto 0) <= v16_HostMacAddrHighWord_s;
          slv_ip2bus_data(31 downto 16) <= X"0000";

        when OneHotVector(5,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_FpgaMacAddrLowWord_s;

        when OneHotVector(6,78) =>
          slv_ip2bus_data(15 downto 0) <= v16_FpgaMacAddrHighWord_s;
          slv_ip2bus_data(31 downto 16) <= X"0000";

        when OneHotVector(7,78) =>
          slv_ip2bus_data(0) <= TxMode_s;
          slv_ip2bus_data(1) <= RxMode_s;
          slv_ip2bus_data(31 downto 4) <= X"0000000";
          slv_ip2bus_data(3 downto 2) <= "00";

        when OneHotVector(8,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_RxTimeout2DropFrm_s;

        when OneHotVector(9,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxConfigInfo_p;

        when OneHotVector(10,78) =>
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(7 downto 0) <= v8_RxStartNewTransfer_s;

        when OneHotVector(11,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdFrameCntCh0_p;

        when OneHotVector(12,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdFrameCntCh1_p;

        when OneHotVector(13,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdFrameCntCh2_p;

        when OneHotVector(14,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdFrameCntCh3_p;

        when OneHotVector(15,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdFrameCntCh4_p;

        when OneHotVector(16,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdFrameCntCh5_p;

        when OneHotVector(17,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdFrameCntCh6_p;

        when OneHotVector(18,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdFrameCntCh7_p;

        when OneHotVector(19,78) =>
          slv_ip2bus_data(2 downto 0) <= iv3_RxErrStatus_p;
          slv_ip2bus_data(31 downto 3) <= "00000000000000000000000000000";

        when OneHotVector(20,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxBadFrameCnt_p;

        when OneHotVector(21,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxFrameLostCntCh0_p;

        when OneHotVector(22,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxFrameLostCntCh1_p;

        when OneHotVector(23,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxFrameLostCntCh2_p;

        when OneHotVector(24,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxFrameLostCntCh3_p;

        when OneHotVector(25,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxFrameLostCntCh4_p;

        when OneHotVector(26,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxFrameLostCntCh5_p;

        when OneHotVector(27,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxFrameLostCntCh6_p;

        when OneHotVector(28,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxFrameLostCntCh7_p;

        when OneHotVector(29,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxDropedFrmCntCh0_p;

        when OneHotVector(30,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxDropedFrmCntCh1_p;

        when OneHotVector(31,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxDropedFrmCntCh2_p;

        when OneHotVector(32,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxDropedFrmCntCh3_p;

        when OneHotVector(33,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxDropedFrmCntCh4_p;

        when OneHotVector(34,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxDropedFrmCntCh5_p;

        when OneHotVector(35,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxDropedFrmCntCh6_p;

        when OneHotVector(36,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxDropedFrmCntCh7_p;

        when OneHotVector(37,78) =>
          slv_ip2bus_data(31 downto 8) <= X"000000";
          slv_ip2bus_data(7 downto 0) <= iv8_RxFifoUnderrun_p;
          o_RxFifoUnderrunRead_p <= '1';

        when OneHotVector(38,78) =>
          slv_ip2bus_data(31 downto 0) <= X"00000000";

        when OneHotVector(39,78) =>
          slv_ip2bus_data(31 downto 8) <= X"000000";
          slv_ip2bus_data(7 downto 0) <= iv8_TxFifoOverrun_p;
          o_TxFifoOverrunRead_p <= '1';

        when OneHotVector(40,78) =>
          slv_ip2bus_data(14 downto 0) <= v15_TxFrameSizeCh0_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";

        when OneHotVector(41,78) =>
          slv_ip2bus_data(14 downto 0) <= v15_TxFrameSizeCh1_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";

        when OneHotVector(42,78) =>
          slv_ip2bus_data(14 downto 0) <= v15_TxFrameSizeCh2_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";

        when OneHotVector(43,78) =>
          slv_ip2bus_data(14 downto 0) <= v15_TxFrameSizeCh3_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";

        when OneHotVector(44,78) =>
          slv_ip2bus_data(14 downto 0) <= v15_TxFrameSizeCh4_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";

        when OneHotVector(45,78) =>
          slv_ip2bus_data(14 downto 0) <= v15_TxFrameSizeCh5_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";

        when OneHotVector(46,78) =>
          slv_ip2bus_data(14 downto 0) <= v15_TxFrameSizeCh6_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";

        when OneHotVector(47,78) =>
          slv_ip2bus_data(14 downto 0) <= v15_TxFrameSizeCh7_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";

        when OneHotVector(48,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxTransferSizeCh0_s;

        when OneHotVector(49,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxTransferSizeCh1_s;

        when OneHotVector(50,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxTransferSizeCh2_s;

        when OneHotVector(51,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxTransferSizeCh3_s;

        when OneHotVector(52,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxTransferSizeCh4_s;

        when OneHotVector(53,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxTransferSizeCh5_s;

        when OneHotVector(54,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxTransferSizeCh6_s;

        when OneHotVector(55,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxTransferSizeCh7_s;

        when OneHotVector(56,78) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxFrameGap_s;

        when OneHotVector(57,78) =>
          slv_ip2bus_data(31 downto 8) <= X"000000";
          slv_ip2bus_data(7 downto 0) <= v8_TxChFrsBurst_s;

        when OneHotVector(58,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_TxConfigInfo_p;

        when OneHotVector(59,78) =>
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(7 downto 0) <= v8_TxStartNewTransfer_s;

        when OneHotVector(60,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_SentFrameCntCh0_p;

        when OneHotVector(61,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_SentFrameCntCh1_p;

        when OneHotVector(62,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_SentFrameCntCh2_p;

        when OneHotVector(63,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_SentFrameCntCh3_p;

        when OneHotVector(64,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_SentFrameCntCh4_p;

        when OneHotVector(65,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_SentFrameCntCh5_p;

        when OneHotVector(66,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_SentFrameCntCh6_p;

        when OneHotVector(67,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_SentFrameCntCh7_p;

        when OneHotVector(68,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_TxNbDataInfoCh0_p;

        when OneHotVector(69,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_TxNbDataInfoCh1_p;

        when OneHotVector(70,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_TxNbDataInfoCh2_p;

        when OneHotVector(71,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_TxNbDataInfoCh3_p;

        when OneHotVector(72,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_TxNbDataInfoCh4_p;

        when OneHotVector(73,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_TxNbDataInfoCh5_p;

        when OneHotVector(74,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_TxNbDataInfoCh6_p;

        when OneHotVector(75,78) =>
          slv_ip2bus_data(31 downto 0) <= iv32_TxNbDataInfoCh7_p;

        when OneHotVector(76,78) =>
          slv_ip2bus_data(14 downto 0) <= v15_RxThresholdHigh_ch0_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";

        when OneHotVector(77,78) =>
          slv_ip2bus_data(14 downto 0) <= v15_RxThresholdLow_ch0_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";
        when others =>
          slv_ip2bus_data <= (others => '0');
      end case;

 end process SLAVE_REG_READ_PROC;

------------------------------------------
-- drive IP to Bus signals
------------------------------------------
IP2Bus_Data  <= slv_ip2bus_data when slv_read_ack = '1' else (others => '0');
IP2Bus_WrAck <= slv_write_ack;
IP2Bus_RdAck <= slv_read_ack;
IP2Bus_Error <= '0';

------------------------------------------
-- Output assignments
------------------------------------------
o_CoreResetPulse_p <= CoreResetPulse_s;
ov8_TxFifoReset_p <= v8_TxFifoReset_s;
ov8_RxFifoReset_p <= v8_RxFifoReset_s;
ov32_HostMacAddrLowWord_p <= v32_HostMacAddrLowWord_s;
ov16_HostMacAddrHighWord_p <= v16_HostMacAddrHighWord_s;
ov32_FpgaMacAddrLowWord_p <= v32_FpgaMacAddrLowWord_s;
ov16_FpgaMacAddrHighWord_p <= v16_FpgaMacAddrHighWord_s;
o_TxMode_p <= TxMode_s;
o_RxMode_p <= RxMode_s;
ov32_RxTimeout2DropFrm_p <= v32_RxTimeout2DropFrm_s;
ov8_RxStartNewTransfer_p <= v8_RxStartNewTransfer_s;
ov15_TxFrameSizeCh0_p <= v15_TxFrameSizeCh0_s;
ov15_TxFrameSizeCh1_p <= v15_TxFrameSizeCh1_s;
ov15_TxFrameSizeCh2_p <= v15_TxFrameSizeCh2_s;
ov15_TxFrameSizeCh3_p <= v15_TxFrameSizeCh3_s;
ov15_TxFrameSizeCh4_p <= v15_TxFrameSizeCh4_s;
ov15_TxFrameSizeCh5_p <= v15_TxFrameSizeCh5_s;
ov15_TxFrameSizeCh6_p <= v15_TxFrameSizeCh6_s;
ov15_TxFrameSizeCh7_p <= v15_TxFrameSizeCh7_s;
ov32_TxTransferSizeCh0_p <= v32_TxTransferSizeCh0_s;
ov32_TxTransferSizeCh1_p <= v32_TxTransferSizeCh1_s;
ov32_TxTransferSizeCh2_p <= v32_TxTransferSizeCh2_s;
ov32_TxTransferSizeCh3_p <= v32_TxTransferSizeCh3_s;
ov32_TxTransferSizeCh4_p <= v32_TxTransferSizeCh4_s;
ov32_TxTransferSizeCh5_p <= v32_TxTransferSizeCh5_s;
ov32_TxTransferSizeCh6_p <= v32_TxTransferSizeCh6_s;
ov32_TxTransferSizeCh7_p <= v32_TxTransferSizeCh7_s;
ov32_TxFrameGap_p <= v32_TxFrameGap_s;
ov8_TxChFrsBurst_p <= v8_TxChFrsBurst_s;
ov8_TxStartNewTransfer_p <= v8_TxStartNewTransfer_s;
ov15_RxThresholdHigh_ch0_p <= v15_RxThresholdHigh_ch0_s;
ov15_RxThresholdLow_ch0_p <= v15_RxThresholdLow_ch0_s;

end IMP;

