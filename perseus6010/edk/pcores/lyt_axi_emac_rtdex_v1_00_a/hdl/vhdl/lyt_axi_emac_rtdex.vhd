--------------------------------------------------------------------------------
-- Filename:          lyt_axi_emac_rtdex.vhd
-- Version:           v1_00_a
-- Description:       User Logic implementation module
-- Generated by:      khalid.bensadek
-- Date:              2012-12-06 11:40:23
-- Generated:         using LyrtechRD REGGENUTIL based on Xilinx IPIF Wizard.
-- VHDL Standard:     VHDL'93
------------------------------------------------------------------------------
-- Copyright (c) 2001-2012 LYRtech RD Inc.  All rights reserved.
------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_misc.all;

library lyt_axi_emac_rtdex_v1_00_a;
use lyt_axi_emac_rtdex_v1_00_a.axi_emac_rtdex;

use lyt_axi_emac_rtdex_v1_00_a.emac_rtdex_top;

entity lyt_axi_emac_rtdex is
generic
(
  -- ADD USER GENERICS BELOW THIS LINE ---------------
  	  C_RTDEX_RX_NUMER_OF_CHANNELS : integer range 1 to 8 :=1;
      C_RTDEX_TX_NUMER_OF_CHANNELS : integer range 1 to 8 :=1;
      C_TX_CH_FIFO_DEPTH           : integer := 4096;
      C_RX_CH_FIFO_DEPTH           : integer := 4096;
      C_SUPPORT_JUMBO_FRM		   : integer range 0 to 1 := 1;
      C_RX_STATS_COUNTERS  		   : integer range 0 to 1 := 0;	
      C_TX_STATS_COUNTERS  		   : integer range 0 to 1 := 0;
      C_ENABLE_FLOW_CTRL		   		: integer range 0 to 1 := 0;
  -- ADD USER GENERICS ABOVE THIS LINE ---------------

  -- DO NOT EDIT BELOW THIS LINE ---------------------
  -- Bus protocol parameters, do not add to or delete
      C_S_AXI_DATA_WIDTH             : integer              := 32;
      C_S_AXI_ADDR_WIDTH             : integer              := 32;
      C_S_AXI_MIN_SIZE               : std_logic_vector     := X"000001FF";
      C_USE_WSTRB                    : integer              := 0;
      C_DPHASE_TIMEOUT               : integer              := 8;
      C_BASEADDR                     : std_logic_vector     := X"FFFFFFFF";
      C_HIGHADDR                     : std_logic_vector     := X"00000000";
      C_FAMILY                       : string               := "virtex6"      
  -- DO NOT EDIT ABOVE THIS LINE ---------------------
);
port
(
  -- User ports --
    --- RX User ports ---           
      i_RxUserClk_p        : in std_logic;      
      o_RxReadyCh0_p       : out std_logic;
      i_RxReCh0_p          : in std_logic;
      ov32_RxDataCh0_p     : out std_logic_vector(31 downto 0);
      o_RxDataValidCh0_p   : out std_logic;      
      o_RxReadyCh1_p       : out std_logic;
      i_RxReCh1_p          : in std_logic;
      ov32_RxDataCh1_p     : out std_logic_vector(31 downto 0);
      o_RxDataValidCh1_p   : out std_logic;      
      o_RxReadyCh2_p       : out std_logic;
      i_RxReCh2_p          : in std_logic;
      ov32_RxDataCh2_p     : out std_logic_vector(31 downto 0);
      o_RxDataValidCh2_p   : out std_logic;      
      o_RxReadyCh3_p       : out std_logic;
      i_RxReCh3_p          : in std_logic;
      ov32_RxDataCh3_p     : out std_logic_vector(31 downto 0);
      o_RxDataValidCh3_p   : out std_logic;      
      o_RxReadyCh4_p       : out std_logic;
      i_RxReCh4_p          : in std_logic;
      ov32_RxDataCh4_p     : out std_logic_vector(31 downto 0);
      o_RxDataValidCh4_p   : out std_logic;      
      o_RxReadyCh5_p       : out std_logic;
      i_RxReCh5_p          : in std_logic;
      ov32_RxDataCh5_p     : out std_logic_vector(31 downto 0);
      o_RxDataValidCh5_p   : out std_logic;
      o_RxReadyCh6_p       : out std_logic;
      i_RxReCh6_p          : in std_logic;
      ov32_RxDataCh6_p     : out std_logic_vector(31 downto 0);
      o_RxDataValidCh6_p   : out std_logic;      
      o_RxReadyCh7_p       : out std_logic;
      i_RxReCh7_p          : in std_logic;
      ov32_RxDataCh7_p     : out std_logic_vector(31 downto 0);
      o_RxDataValidCh7_p   : out std_logic;
      
  --- TX User ports ---                     
      i_TxUserClk_p                 : in std_logic;
                                    
      i_TxWeCh0_p                   : in std_logic;
      o_TxReadyCh0_p                : out std_logic;
      iv32_TxDataCh0_p              : in std_logic_vector(31 downto 0);
                                          
      i_TxWeCh1_p                   : in std_logic;
      o_TxReadyCh1_p                : out std_logic;
      iv32_TxDataCh1_p              : in std_logic_vector(31 downto 0);
                                          
      i_TxWeCh2_p                   : in std_logic;
      o_TxReadyCh2_p                : out std_logic;
      iv32_TxDataCh2_p              : in std_logic_vector(31 downto 0);
                                          
      i_TxWeCh3_p                   : in std_logic;
      o_TxReadyCh3_p                : out std_logic;
      iv32_TxDataCh3_p              : in std_logic_vector(31 downto 0);
                                          
      i_TxWeCh4_p                   : in std_logic;
      o_TxReadyCh4_p                : out std_logic;
      iv32_TxDataCh4_p              : in std_logic_vector(31 downto 0);
                                          
      i_TxWeCh5_p                   : in std_logic;
      o_TxReadyCh5_p                : out std_logic;
      iv32_TxDataCh5_p              : in std_logic_vector(31 downto 0);
                                          
      i_TxWeCh6_p                   : in std_logic;
      o_TxReadyCh6_p                : out std_logic;
      iv32_TxDataCh6_p              : in std_logic_vector(31 downto 0);
                                          
      i_TxWeCh7_p                   : in std_logic;
      o_TxReadyCh7_p                : out std_logic;
      iv32_TxDataCh7_p              : in std_logic_vector(31 downto 0);
            
        -- AXI Streaming BUS Ports ------------------------------------
      --------------------------------------------   
      ----    RX side: From EMAC to EDMA     -----
      --------------------------------------------		
	  -- AXI streaming RX To EDMA --
	  AXI_STR_EDMA_RXD_ACLK       : in  std_logic;                           --  AXI-Stream RXD OUT Data Clk
      AXI_STR_EDMA_RXD_ARESETN      : in  std_logic;                           --  AXI-Stream RXD OUT Data Reset
      AXI_STR_EDMA_RXD_TVALID       : out std_logic;                           --  AXI-Stream RXD OUT Data Valid
      AXI_STR_EDMA_RXD_TREADY       : in  std_logic;                           --  AXI-Stream RXD OUT Data Ready
      AXI_STR_EDMA_RXD_TLAST        : out std_logic;                           --  AXI-Stream RXD OUT Data Last
      AXI_STR_EDMA_RXD_TKEEP        : out std_logic_vector(3 downto 0);        --  AXI-Stream RXD OUT Data Keep
      AXI_STR_EDMA_RXD_TDATA        : out std_logic_vector(31 downto 0);       --  AXI-Stream RXD OUT Data Data
      
      AXI_STR_EDMA_RXS_ACLK         : in  std_logic;                           --  AXI-Stream RXS OUT Clk
      AXI_STR_EDMA_RXS_ARESETN      : in  std_logic;                           --  AXI-Stream RXS OUT Reset
      AXI_STR_EDMA_RXS_TVALID       : out std_logic;                           --  AXI-Stream RXS OUT Valid
      AXI_STR_EDMA_RXS_TREADY       : in  std_logic;                           --  AXI-Stream RXS OUT Ready
      AXI_STR_EDMA_RXS_TLAST        : out std_logic;                           --  AXI-Stream RXS OUT Last
      AXI_STR_EDMA_RXS_TKEEP        : out std_logic_vector(3 downto 0);        --  AXI-Stream RXS OUT Keep
      AXI_STR_EDMA_RXS_TDATA        : out std_logic_vector(31 downto 0);       --  AXI-Stream RXS OUT Data
            
      -- AXI streaming RX From EMAC --
      AXI_STR_EMAC_TXD_ACLK         : in  std_logic;                           --  AXI-Stream RXD IN Data Clk
      AXI_STR_EMAC_TXD_ARESETN      : in  std_logic;                           --  AXI-Stream RXD IN Data Reset
      AXI_STR_EMAC_TXD_TVALID       : in  std_logic;                           --  AXI-Stream RXD IN Data Valid
      AXI_STR_EMAC_TXD_TREADY       : out std_logic;                           --  AXI-Stream RXD IN Data Ready
      AXI_STR_EMAC_TXD_TLAST        : in  std_logic;                           --  AXI-Stream RXD IN Data Last
      AXI_STR_EMAC_TXD_TKEEP        : in  std_logic_vector(3 downto 0);        --  AXI-Stream RXD IN Data Keep
      AXI_STR_EMAC_TXD_TDATA        : in  std_logic_vector(31 downto 0);       --  AXI-Stream RXD IN Data Data
      
      AXI_STR_EMAC_TXC_ACLK         : in  std_logic;                           --  AXI-Stream RDS IN Control Clk
      AXI_STR_EMAC_TXC_ARESETN      : in  std_logic;                           --  AXI-Stream RDS IN Control Reset
      AXI_STR_EMAC_TXC_TVALID       : in  std_logic;                           --  AXI-Stream RDS IN Control Valid
      AXI_STR_EMAC_TXC_TREADY       : out std_logic;                           --  AXI-Stream RDS IN Control Ready
      AXI_STR_EMAC_TXC_TLAST        : in  std_logic;                           --  AXI-Stream RDS IN Control Last
      AXI_STR_EMAC_TXC_TKEEP        : in  std_logic_vector(3 downto 0);        --  AXI-Stream RDS IN Control Keep
      AXI_STR_EMAC_TXC_TDATA        : in  std_logic_vector(31 downto 0);
      
      --------------------------------------------   
      ----     TX side: From EDMA to EMAC     -----
      --------------------------------------------
      -- AXI streaming TX to EMAC --
		AXI_STR_EMAC_RXD_ACLK         : in  std_logic;                           --  AXI-Stream Receive Data Clk
      AXI_STR_EMAC_RXD_ARESETN      : in  std_logic;                           --  AXI-Stream Receive Data Reset
      AXI_STR_EMAC_RXD_TVALID       : out std_logic;                           --  AXI-Stream Receive Data Valid
      AXI_STR_EMAC_RXD_TREADY       : in  std_logic;                           --  AXI-Stream Receive Data Ready
      AXI_STR_EMAC_RXD_TLAST        : out std_logic;                           --  AXI-Stream Receive Data Last
      AXI_STR_EMAC_RXD_TKEEP        : out std_logic_vector(3 downto 0);        --  AXI-Stream Receive Data Keep
      AXI_STR_EMAC_RXD_TDATA        : out std_logic_vector(31 downto 0);       --  AXI-Stream Receive Data Data
      
      AXI_STR_EMAC_RXS_ACLK         : in  std_logic;                           --  AXI-Stream Receive Status Clk
      AXI_STR_EMAC_RXS_ARESETN      : in  std_logic;                           --  AXI-Stream Receive Status Reset
      AXI_STR_EMAC_RXS_TVALID       : out std_logic;                           --  AXI-Stream Receive Status Valid
      AXI_STR_EMAC_RXS_TREADY       : in  std_logic;                           --  AXI-Stream Receive Status Ready
      AXI_STR_EMAC_RXS_TLAST        : out std_logic;                           --  AXI-Stream Receive Status Last
      AXI_STR_EMAC_RXS_TKEEP        : out std_logic_vector(3 downto 0);        --  AXI-Stream Receive Status Keep
      AXI_STR_EMAC_RXS_TDATA        : out std_logic_vector(31 downto 0);       --  AXI-Stream Receive Status Data
            
      -- AXI streaming TX From EDMA --
      AXI_STR_EDMA_TXD_ACLK         : in  std_logic;                           --  AXI-Stream Transmit Data Clk
      AXI_STR_EDMA_TXD_ARESETN      : in  std_logic;                           --  AXI-Stream Transmit Data Reset
      AXI_STR_EDMA_TXD_TVALID       : in  std_logic;                           --  AXI-Stream Transmit Data Valid
      AXI_STR_EDMA_TXD_TREADY       : out std_logic;                           --  AXI-Stream Transmit Data Ready
      AXI_STR_EDMA_TXD_TLAST        : in  std_logic;                           --  AXI-Stream Transmit Data Last
      AXI_STR_EDMA_TXD_TKEEP        : in  std_logic_vector(3 downto 0);        --  AXI-Stream Transmit Data Keep
      AXI_STR_EDMA_TXD_TDATA        : in  std_logic_vector(31 downto 0);       --  AXI-Stream Transmit Data Data
      
      AXI_STR_EDMA_TXC_ACLK         : in  std_logic;                           --  AXI-Stream Transmit Control Clk
      AXI_STR_EDMA_TXC_ARESETN      : in  std_logic;                           --  AXI-Stream Transmit Control Reset
      AXI_STR_EDMA_TXC_TVALID       : in  std_logic;                           --  AXI-Stream Transmit Control Valid
      AXI_STR_EDMA_TXC_TREADY       : out std_logic;                           --  AXI-Stream Transmit Control Ready
      AXI_STR_EDMA_TXC_TLAST        : in  std_logic;                           --  AXI-Stream Transmit Control Last
      AXI_STR_EDMA_TXC_TKEEP        : in  std_logic_vector(3 downto 0);        --  AXI-Stream Transmit Control Keep
      AXI_STR_EDMA_TXC_TDATA        : in  std_logic_vector(31 downto 0);
            
  -- DO NOT EDIT BELOW THIS LINE ---------------------
  -- Bus protocol ports, do not add to or delete
     S_AXI_ACLK                     : in  std_logic;
     S_AXI_ARESETN                  : in  std_logic;
     S_AXI_AWADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
     S_AXI_AWVALID                  : in  std_logic;
     S_AXI_WDATA                    : in  std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
     S_AXI_WSTRB                    : in  std_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);
     S_AXI_WVALID                   : in  std_logic;
     S_AXI_BREADY                   : in  std_logic;
     S_AXI_ARADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
     S_AXI_ARVALID                  : in  std_logic;
     S_AXI_RREADY                   : in  std_logic;
     S_AXI_ARREADY                  : out std_logic;
     S_AXI_RDATA                    : out std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
     S_AXI_RRESP                    : out std_logic_vector(1 downto 0);
     S_AXI_RVALID                   : out std_logic;
     S_AXI_WREADY                   : out std_logic;
     S_AXI_BRESP                    : out std_logic_vector(1 downto 0);
     S_AXI_BVALID                   : out std_logic;
     S_AXI_AWREADY                  : out std_logic
  -- DO NOT EDIT ABOVE THIS LINE --
);

 attribute MAX_FANOUT                     : string;
 attribute SIGIS                          : string;
 attribute MAX_FANOUT of S_AXI_ACLK       : signal is "10000";
 attribute MAX_FANOUT of S_AXI_ARESETN    : signal is "10000";
 attribute SIGIS of S_AXI_ACLK            : signal is "Clk";
 attribute SIGIS of S_AXI_ARESETN         : signal is "Rst";

end entity lyt_axi_emac_rtdex;

------------------------------------------------------------------------------
-- Architecture section
------------------------------------------------------------------------------

architecture arch of lyt_axi_emac_rtdex is

 ----------------------------------------
 -- Signals declaration
 ----------------------------------------
  signal CoreResetPulse_s                     : std_logic;
  signal v8_TxFifoReset_s                     : std_logic_vector(7 downto 0);
  signal v8_RxFifoReset_s                     : std_logic_vector(7 downto 0);
  signal v32_HostMacAddrLowWord_s                     : std_logic_vector(31 downto 0);
  signal v16_HostMacAddrHighWord_s                     : std_logic_vector(15 downto 0);
  signal v32_FpgaMacAddrLowWord_s                     : std_logic_vector(31 downto 0);
  signal v16_FpgaMacAddrHighWord_s                     : std_logic_vector(15 downto 0);
  signal TxMode_s                     : std_logic;
  signal RxMode_s                     : std_logic;
  signal v32_RxTimeout2DropFrm_s                     : std_logic_vector(31 downto 0);
  signal v32_RxConfigInfo_s                     : std_logic_vector(31 downto 0);
  signal v8_RxStartNewTransfer_s                     : std_logic_vector(7 downto 0);
  signal v32_RcvdFrameCntCh0_s                     : std_logic_vector(31 downto 0);
  signal v32_RcvdFrameCntCh1_s                     : std_logic_vector(31 downto 0);
  signal v32_RcvdFrameCntCh2_s                     : std_logic_vector(31 downto 0);
  signal v32_RcvdFrameCntCh3_s                     : std_logic_vector(31 downto 0);
  signal v32_RcvdFrameCntCh4_s                     : std_logic_vector(31 downto 0);
  signal v32_RcvdFrameCntCh5_s                     : std_logic_vector(31 downto 0);
  signal v32_RcvdFrameCntCh6_s                     : std_logic_vector(31 downto 0);
  signal v32_RcvdFrameCntCh7_s                     : std_logic_vector(31 downto 0);
  signal v3_RxErrStatus_s                     : std_logic_vector(2 downto 0);
  signal v32_RxBadFrameCnt_s                     : std_logic_vector(31 downto 0);
  signal v32_RxFrameLostCntCh0_s                     : std_logic_vector(31 downto 0);
  signal v32_RxFrameLostCntCh1_s                     : std_logic_vector(31 downto 0);
  signal v32_RxFrameLostCntCh2_s                     : std_logic_vector(31 downto 0);
  signal v32_RxFrameLostCntCh3_s                     : std_logic_vector(31 downto 0);
  signal v32_RxFrameLostCntCh4_s                     : std_logic_vector(31 downto 0);
  signal v32_RxFrameLostCntCh5_s                     : std_logic_vector(31 downto 0);
  signal v32_RxFrameLostCntCh6_s                     : std_logic_vector(31 downto 0);
  signal v32_RxFrameLostCntCh7_s                     : std_logic_vector(31 downto 0);
  signal v32_RxDropedFrmCntCh0_s                     : std_logic_vector(31 downto 0);
  signal v32_RxDropedFrmCntCh1_s                     : std_logic_vector(31 downto 0);
  signal v32_RxDropedFrmCntCh2_s                     : std_logic_vector(31 downto 0);
  signal v32_RxDropedFrmCntCh3_s                     : std_logic_vector(31 downto 0);
  signal v32_RxDropedFrmCntCh4_s                     : std_logic_vector(31 downto 0);
  signal v32_RxDropedFrmCntCh5_s                     : std_logic_vector(31 downto 0);
  signal v32_RxDropedFrmCntCh6_s                     : std_logic_vector(31 downto 0);
  signal v32_RxDropedFrmCntCh7_s                     : std_logic_vector(31 downto 0);
  signal v8_RxFifoUnderrun_s                     : std_logic_vector(7 downto 0);
  signal v8_TxFifoOverrun_s                     : std_logic_vector(7 downto 0);
  signal v15_TxFrameSizeCh0_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh1_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh2_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh3_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh4_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh5_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh6_s                     : std_logic_vector(14 downto 0);
  signal v15_TxFrameSizeCh7_s                     : std_logic_vector(14 downto 0);
  signal v32_TxTransferSizeCh0_s                  : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh1_s                  : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh2_s                  : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh3_s                  : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh4_s                  : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh5_s                  : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh6_s                  : std_logic_vector(31 downto 0);
  signal v32_TxTransferSizeCh7_s                  : std_logic_vector(31 downto 0);
  signal v32_TxFrameGap_s                     : std_logic_vector(31 downto 0);
  signal v8_TxChFrsBurst_s                     : std_logic_vector(7 downto 0);
  signal v32_TxConfigInfo_s                     : std_logic_vector(31 downto 0);
  signal v8_TxStartNewTransfer_s                     : std_logic_vector(7 downto 0);
  signal v32_SentFrameCntCh0_s                     : std_logic_vector(31 downto 0);
  signal v32_SentFrameCntCh1_s                     : std_logic_vector(31 downto 0);
  signal v32_SentFrameCntCh2_s                     : std_logic_vector(31 downto 0);
  signal v32_SentFrameCntCh3_s                     : std_logic_vector(31 downto 0);
  signal v32_SentFrameCntCh4_s                     : std_logic_vector(31 downto 0);
  signal v32_SentFrameCntCh5_s                     : std_logic_vector(31 downto 0);
  signal v32_SentFrameCntCh6_s                     : std_logic_vector(31 downto 0);
  signal v32_SentFrameCntCh7_s                     : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh0_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh1_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh2_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh3_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh4_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh5_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh6_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh7_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh0D1_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh1D1_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh2D1_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh3D1_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh4D1_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh5D1_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh6D1_s                    : std_logic_vector(31 downto 0);
  signal v32_TxNbDataInfoCh7D1_s                    : std_logic_vector(31 downto 0); 
  
  -- User signals  
  signal v8_SignalStretch_s			: std_logic_vector(7 downto 0);
  signal CoreReset_s				: std_logic;
  signal v15_RxThresholdHigh_ch0_s 	: std_logic_vector(14 downto 0);
  signal v15_RxThresholdLow_ch0_s  	: std_logic_vector(14 downto 0);  
  signal v8_RxFifoUnderrunReg_s		: std_logic_vector(7 downto 0);
  signal v8_TxFifoOverrunReg_s		: std_logic_vector(7 downto 0);
  signal RxFifoUnderrunRead_s		: std_logic;
  signal TxFifoOverrunRead_s		: std_logic;
begin

 ------------------------------------------
 -- instantiate RTDEx Top
 ------------------------------------------
 Rtdex_top_i0 : entity lyt_axi_emac_rtdex_v1_00_a.emac_rtdex_top
 generic map(
     C_RTDEX_RX_NUMER_OF_CHANNELS 	=> C_RTDEX_RX_NUMER_OF_CHANNELS,
     C_RTDEX_TX_NUMER_OF_CHANNELS 	=> C_RTDEX_TX_NUMER_OF_CHANNELS,
     C_TX_CH_FIFO_DEPTH  			=> C_TX_CH_FIFO_DEPTH,
     C_RX_CH_FIFO_DEPTH  			=> C_RX_CH_FIFO_DEPTH,
     C_SUPPORT_JUMBO_FRM 			=> C_SUPPORT_JUMBO_FRM,
     C_RX_STATS_COUNTERS 			=> C_RX_STATS_COUNTERS,
     C_TX_STATS_COUNTERS 			=> C_TX_STATS_COUNTERS,
     C_ENABLE_FLOW_CTRL				=> C_ENABLE_FLOW_CTRL,
     big_Endian_g					=> 0
  )
	port map
	(
	-- config signals from/to axi registers --
	iv32_RemoteEndMacAddrH_p        => v32_HostMacAddrLowWord_s,
    iv16_RemoteEndMacAddrL_p        => v16_HostMacAddrHighWord_s,
    iv32_LocalEndMacAddrH_p        	=> v32_FpgaMacAddrLowWord_s, 
	iv16_LocalEndMacAddrL_p        	=> v16_FpgaMacAddrHighWord_s, 	
    -- RX --
    i_RxMode_p					=> RxMode_s,
	iv8_RxStartNewTransfer_p   	=> v8_RxStartNewTransfer_s,
	ov32_RxBadFrameCnt_p       	=> v32_RxBadFrameCnt_s,
	ov32_RxFrameLostCntCh0_p   	=> v32_RxFrameLostCntCh0_s,
    ov32_RxFrameLostCntCh1_p   	=> v32_RxFrameLostCntCh1_s,
    ov32_RxFrameLostCntCh2_p   	=> v32_RxFrameLostCntCh2_s,
    ov32_RxFrameLostCntCh3_p   	=> v32_RxFrameLostCntCh3_s,
    ov32_RxFrameLostCntCh4_p   	=> v32_RxFrameLostCntCh4_s,
    ov32_RxFrameLostCntCh5_p   	=> v32_RxFrameLostCntCh5_s,
    ov32_RxFrameLostCntCh6_p   	=> v32_RxFrameLostCntCh6_s,
    ov32_RxFrameLostCntCh7_p   	=> v32_RxFrameLostCntCh7_s,
    iv8_RxFifoReset_p          	=> v8_RxFifoReset_s,
    i_RxReset_p                	=> CoreReset_s,    
    ov32_RxConfigInfo_p        	=> v32_RxConfigInfo_s,
    iv32_RxTimeout2DropFrm_p    => v32_RxTimeout2DropFrm_s,
    ov32_RcvdFrameCntCh0_p		=> v32_RcvdFrameCntCh0_s,
	ov32_RcvdFrameCntCh1_p		=> v32_RcvdFrameCntCh1_s,
	ov32_RcvdFrameCntCh2_p		=> v32_RcvdFrameCntCh2_s,
	ov32_RcvdFrameCntCh3_p		=> v32_RcvdFrameCntCh3_s,
	ov32_RcvdFrameCntCh4_p		=> v32_RcvdFrameCntCh4_s,
	ov32_RcvdFrameCntCh5_p		=> v32_RcvdFrameCntCh5_s,
	ov32_RcvdFrameCntCh6_p		=> v32_RcvdFrameCntCh6_s,
	ov32_RcvdFrameCntCh7_p		=> v32_RcvdFrameCntCh7_s,
	ov32_RxDropdFrmsCh0_p       => v32_RxDropedFrmCntCh0_s,
    ov32_RxDropdFrmsCh1_p       => v32_RxDropedFrmCntCh1_s,
    ov32_RxDropdFrmsCh2_p       => v32_RxDropedFrmCntCh2_s,
    ov32_RxDropdFrmsCh3_p       => v32_RxDropedFrmCntCh3_s,
    ov32_RxDropdFrmsCh4_p       => v32_RxDropedFrmCntCh4_s,
    ov32_RxDropdFrmsCh5_p       => v32_RxDropedFrmCntCh5_s,
    ov32_RxDropdFrmsCh6_p       => v32_RxDropedFrmCntCh6_s,
    ov32_RxDropdFrmsCh7_p       => v32_RxDropedFrmCntCh7_s,    
    ov3_RxErrStatus_p           => v3_RxErrStatus_s,
    iv15_RxFifoFullThrCh0_p 	=> v15_RxThresholdHigh_ch0_s,
    iv15_RxFifoEmptyThrCh0_p	=> v15_RxThresholdLow_ch0_s,
    ov8_RxFifoUnderrun_p		=> v8_RxFifoUnderrun_s,
        
    -- TX --      
    iv32_FrameGap_p            	=> v32_TxFrameGap_s,
    i_Mode_p					=> TxMode_s,
    iv8_TxChFrsBurst_p             => v8_TxChFrsBurst_s,
    iv15_FrameSizeCh0_p        	=> v15_TxFrameSizeCh0_s,
    iv32_TransferSizeCh0_p     	=> v32_TxTransferSizeCh0_s,                                    
    iv15_FrameSizeCh1_p        	=> v15_TxFrameSizeCh1_s,   
    iv32_TransferSizeCh1_p     	=> v32_TxTransferSizeCh1_s,                                    
    iv15_FrameSizeCh2_p        	=> v15_TxFrameSizeCh2_s,   
    iv32_TransferSizeCh2_p     	=> v32_TxTransferSizeCh2_s,                                    
    iv15_FrameSizeCh3_p        	=> v15_TxFrameSizeCh3_s,
    iv32_TransferSizeCh3_p     	=> v32_TxTransferSizeCh3_s,                                     
    iv15_FrameSizeCh4_p        	=> v15_TxFrameSizeCh4_s,
    iv32_TransferSizeCh4_p     	=> v32_TxTransferSizeCh4_s,                                     
    iv15_FrameSizeCh5_p        	=> v15_TxFrameSizeCh5_s,
    iv32_TransferSizeCh5_p     	=> v32_TxTransferSizeCh5_s,                                     
    iv15_FrameSizeCh6_p        	=> v15_TxFrameSizeCh6_s,
    iv32_TransferSizeCh6_p     	=> v32_TxTransferSizeCh6_s,                                     
    iv15_FrameSizeCh7_p        	=> v15_TxFrameSizeCh7_s,
    iv32_TransferSizeCh7_p     	=> v32_TxTransferSizeCh7_s,      
    i_TxReset_p                	=> CoreReset_s,
    iv8_TxFifoReset_p          	=> v8_TxFifoReset_s,      
    iv8_TxStartNewTransfer_p   	=> v8_TxStartNewTransfer_s,
    ov32_TxConfigInfo_p        	=> v32_TxConfigInfo_s,
    ov8_TxFifoOverrun_p			=> v8_TxFifoOverrun_s,    
	--------------------------------------------   
    ----    RX side: From EMAC to EDMA     -----
    --------------------------------------------		
	-- AXI streaming RX To EDMA --		
	AXI_STR_EDMA_RXD_ACLK         => AXI_STR_EDMA_RXD_ACLK,   
    AXI_STR_EDMA_RXD_ARESETN      => AXI_STR_EDMA_RXD_ARESETN,
    AXI_STR_EDMA_RXD_TVALID       => AXI_STR_EDMA_RXD_TVALID, 
    AXI_STR_EDMA_RXD_TREADY       => AXI_STR_EDMA_RXD_TREADY, 
    AXI_STR_EDMA_RXD_TLAST        => AXI_STR_EDMA_RXD_TLAST,  
    AXI_STR_EDMA_RXD_TKEEP        => AXI_STR_EDMA_RXD_TKEEP,  
    AXI_STR_EDMA_RXD_TDATA        => AXI_STR_EDMA_RXD_TDATA,  
    
    AXI_STR_EDMA_RXS_ACLK         => AXI_STR_EDMA_RXS_ACLK,   
    AXI_STR_EDMA_RXS_ARESETN      => AXI_STR_EDMA_RXS_ARESETN,
    AXI_STR_EDMA_RXS_TVALID       => AXI_STR_EDMA_RXS_TVALID, 
    AXI_STR_EDMA_RXS_TREADY       => AXI_STR_EDMA_RXS_TREADY, 
    AXI_STR_EDMA_RXS_TLAST        => AXI_STR_EDMA_RXS_TLAST,  
    AXI_STR_EDMA_RXS_TKEEP        => AXI_STR_EDMA_RXS_TKEEP,  
    AXI_STR_EDMA_RXS_TDATA        => AXI_STR_EDMA_RXS_TDATA,
          
    -- AXI streaming RX From EMAC --
    AXI_STR_EMAC_TXD_ACLK         => AXI_STR_EMAC_TXD_ACLK,   
    AXI_STR_EMAC_TXD_ARESETN      => AXI_STR_EMAC_TXD_ARESETN,
    AXI_STR_EMAC_TXD_TVALID       => AXI_STR_EMAC_TXD_TVALID, 
    AXI_STR_EMAC_TXD_TREADY       => AXI_STR_EMAC_TXD_TREADY, 
    AXI_STR_EMAC_TXD_TLAST        => AXI_STR_EMAC_TXD_TLAST,  
    AXI_STR_EMAC_TXD_TKEEP        => AXI_STR_EMAC_TXD_TKEEP,  
    AXI_STR_EMAC_TXD_TDATA        => AXI_STR_EMAC_TXD_TDATA,  
    
    AXI_STR_EMAC_TXC_ACLK         => AXI_STR_EMAC_TXC_ACLK,   
    AXI_STR_EMAC_TXC_ARESETN      => AXI_STR_EMAC_TXC_ARESETN,
    AXI_STR_EMAC_TXC_TVALID       => AXI_STR_EMAC_TXC_TVALID, 
    AXI_STR_EMAC_TXC_TREADY       => AXI_STR_EMAC_TXC_TREADY, 
    AXI_STR_EMAC_TXC_TLAST        => AXI_STR_EMAC_TXC_TLAST,  
    AXI_STR_EMAC_TXC_TKEEP        => AXI_STR_EMAC_TXC_TKEEP,  
    AXI_STR_EMAC_TXC_TDATA        => AXI_STR_EMAC_TXC_TDATA,
           
      --------------------------------------------   
      ----     TX side: From EDMA to EMAC     -----
      --------------------------------------------
      -- AXI streaming TX to EMAC --
		AXI_STR_EMAC_RXD_ACLK         => AXI_STR_EMAC_RXD_ACLK,
      AXI_STR_EMAC_RXD_ARESETN      => AXI_STR_EMAC_RXD_ARESETN,
      AXI_STR_EMAC_RXD_TVALID       => AXI_STR_EMAC_RXD_TVALID,
      AXI_STR_EMAC_RXD_TREADY       => AXI_STR_EMAC_RXD_TREADY,
      AXI_STR_EMAC_RXD_TLAST        => AXI_STR_EMAC_RXD_TLAST,
      AXI_STR_EMAC_RXD_TKEEP        => AXI_STR_EMAC_RXD_TKEEP,
      AXI_STR_EMAC_RXD_TDATA        => AXI_STR_EMAC_RXD_TDATA,
      
      AXI_STR_EMAC_RXS_ACLK         => AXI_STR_EMAC_RXS_ACLK,
      AXI_STR_EMAC_RXS_ARESETN      => AXI_STR_EMAC_RXS_ARESETN,
      AXI_STR_EMAC_RXS_TVALID       => AXI_STR_EMAC_RXS_TVALID,
      AXI_STR_EMAC_RXS_TREADY       => AXI_STR_EMAC_RXS_TREADY,
      AXI_STR_EMAC_RXS_TLAST        => AXI_STR_EMAC_RXS_TLAST,
      AXI_STR_EMAC_RXS_TKEEP        => AXI_STR_EMAC_RXS_TKEEP,
      AXI_STR_EMAC_RXS_TDATA        => AXI_STR_EMAC_RXS_TDATA,
            
      -- AXI streaming TX From EDMA --
      AXI_STR_EDMA_TXD_ACLK         => AXI_STR_EDMA_TXD_ACLK,
      AXI_STR_EDMA_TXD_ARESETN      => AXI_STR_EDMA_TXD_ARESETN,
      AXI_STR_EDMA_TXD_TVALID       => AXI_STR_EDMA_TXD_TVALID,
      AXI_STR_EDMA_TXD_TREADY       => AXI_STR_EDMA_TXD_TREADY,
      AXI_STR_EDMA_TXD_TLAST        => AXI_STR_EDMA_TXD_TLAST,
      AXI_STR_EDMA_TXD_TKEEP        => AXI_STR_EDMA_TXD_TKEEP,
      AXI_STR_EDMA_TXD_TDATA        => AXI_STR_EDMA_TXD_TDATA,
      
      AXI_STR_EDMA_TXC_ACLK         => AXI_STR_EDMA_TXC_ACLK,
      AXI_STR_EDMA_TXC_ARESETN      => AXI_STR_EDMA_TXC_ARESETN,
      AXI_STR_EDMA_TXC_TVALID       => AXI_STR_EDMA_TXC_TVALID,
      AXI_STR_EDMA_TXC_TREADY       => AXI_STR_EDMA_TXC_TREADY,
      AXI_STR_EDMA_TXC_TLAST        => AXI_STR_EDMA_TXC_TLAST,
      AXI_STR_EDMA_TXC_TKEEP        => AXI_STR_EDMA_TXC_TKEEP,
      AXI_STR_EDMA_TXC_TDATA        => AXI_STR_EDMA_TXC_TDATA,  
      
      -- RX User side
      i_RxUserClk_p              => i_RxUserClk_p,
      o_RxReadyCh0_p             => o_RxReadyCh0_p,
      i_RxReCh0_p                => i_RxReCh0_p,
      ov32_RxDataCh0_p           => ov32_RxDataCh0_p,
      o_RxDataValidCh0_p         => o_RxDataValidCh0_p,
      o_RxReadyCh1_p             => o_RxReadyCh1_p,
      i_RxReCh1_p                => i_RxReCh1_p,
      ov32_RxDataCh1_p           => ov32_RxDataCh1_p,
      o_RxDataValidCh1_p         => o_RxDataValidCh1_p,
      o_RxReadyCh2_p             => o_RxReadyCh2_p,
      i_RxReCh2_p                => i_RxReCh2_p,
      ov32_RxDataCh2_p           => ov32_RxDataCh2_p,
      o_RxDataValidCh2_p         => o_RxDataValidCh2_p,
      o_RxReadyCh3_p             => o_RxReadyCh3_p,
      i_RxReCh3_p                => i_RxReCh3_p,
      ov32_RxDataCh3_p           => ov32_RxDataCh3_p,
      o_RxDataValidCh3_p         => o_RxDataValidCh3_p,
      o_RxReadyCh4_p             => o_RxReadyCh4_p,
      i_RxReCh4_p                => i_RxReCh4_p,
      ov32_RxDataCh4_p           => ov32_RxDataCh4_p,
      o_RxDataValidCh4_p         => o_RxDataValidCh4_p,
      o_RxReadyCh5_p             => o_RxReadyCh5_p,
      i_RxReCh5_p                => i_RxReCh5_p,
      ov32_RxDataCh5_p           => ov32_RxDataCh5_p,
      o_RxDataValidCh5_p         => o_RxDataValidCh5_p,
      o_RxReadyCh6_p             => o_RxReadyCh6_p,
      i_RxReCh6_p                => i_RxReCh6_p,
      ov32_RxDataCh6_p           => ov32_RxDataCh6_p,
      o_RxDataValidCh6_p         => o_RxDataValidCh6_p,
      o_RxReadyCh7_p             => o_RxReadyCh7_p,
      i_RxReCh7_p                => i_RxReCh7_p,
      ov32_RxDataCh7_p           => ov32_RxDataCh7_p,
      o_RxDataValidCh7_p         => o_RxDataValidCh7_p,
      
      -- TX User side
      i_TxUserClk_p              => i_TxUserClk_p,
                                    
      i_TxWeCh0_p                => i_TxWeCh0_p,
      o_TxReadyCh0_p             => o_TxReadyCh0_p,
      iv32_TxDataCh0_p           => iv32_TxDataCh0_p,
      ov32_TxFifoCountCh0_p      => v32_TxNbDataInfoCh0_s,
      ov32_NbrSentFramesCh0_p    => v32_SentFrameCntCh0_s,
                                 
      i_TxWeCh1_p                => i_TxWeCh1_p,
      o_TxReadyCh1_p             => o_TxReadyCh1_p,
      iv32_TxDataCh1_p           => iv32_TxDataCh1_p,
      ov32_TxFifoCountCh1_p      => v32_TxNbDataInfoCh1_s,
      ov32_NbrSentFramesCh1_p    => v32_SentFrameCntCh1_s,
                                 
      i_TxWeCh2_p                => i_TxWeCh2_p,
      o_TxReadyCh2_p             => o_TxReadyCh2_p,
      iv32_TxDataCh2_p           => iv32_TxDataCh2_p,
      ov32_TxFifoCountCh2_p      => v32_TxNbDataInfoCh2_s,
      ov32_NbrSentFramesCh2_p    => v32_SentFrameCntCh2_s,
                                 
      i_TxWeCh3_p                => i_TxWeCh3_p,
      o_TxReadyCh3_p             => o_TxReadyCh3_p,
      iv32_TxDataCh3_p           => iv32_TxDataCh3_p,
      ov32_TxFifoCountCh3_p      => v32_TxNbDataInfoCh3_s,
      ov32_NbrSentFramesCh3_p    => v32_SentFrameCntCh3_s,
                                 
      i_TxWeCh4_p                => i_TxWeCh4_p,
      o_TxReadyCh4_p             => o_TxReadyCh4_p,
      iv32_TxDataCh4_p           => iv32_TxDataCh4_p,
      ov32_TxFifoCountCh4_p      => v32_TxNbDataInfoCh4_s,
      ov32_NbrSentFramesCh4_p    => v32_SentFrameCntCh4_s,
                                 
      i_TxWeCh5_p                => i_TxWeCh5_p,
      o_TxReadyCh5_p             => o_TxReadyCh5_p,
      iv32_TxDataCh5_p           => iv32_TxDataCh5_p,
      ov32_TxFifoCountCh5_p      => v32_TxNbDataInfoCh5_s,
      ov32_NbrSentFramesCh5_p    => v32_SentFrameCntCh5_s,
                                 
      i_TxWeCh6_p                => i_TxWeCh6_p,
      o_TxReadyCh6_p             => o_TxReadyCh6_p,
      iv32_TxDataCh6_p           => iv32_TxDataCh6_p,
      ov32_TxFifoCountCh6_p      => v32_TxNbDataInfoCh6_s,
      ov32_NbrSentFramesCh6_p    => v32_SentFrameCntCh6_s,
                                 
      i_TxWeCh7_p                => i_TxWeCh7_p,
      o_TxReadyCh7_p             => o_TxReadyCh7_p,
      iv32_TxDataCh7_p           => iv32_TxDataCh7_p,
      ov32_TxFifoCountCh7_p      => v32_TxNbDataInfoCh7_s,
      ov32_NbrSentFramesCh7_p    => v32_SentFrameCntCh7_s
	);

 --------------------------------------------
 -- instantiate AXI Memory Mapped User Logic
 --------------------------------------------
 USER_LOGIC_I : entity lyt_axi_emac_rtdex_v1_00_a.axi_emac_rtdex
   generic map
   (
     -- MAP USER GENERICS BELOW THIS LINE ---------------
     --USER generics mapped here
     -- MAP USER GENERICS ABOVE THIS LINE ---------------
     C_S_AXI_DATA_WIDTH        		=> C_S_AXI_DATA_WIDTH,
     C_S_AXI_ADDR_WIDTH        		=> C_S_AXI_ADDR_WIDTH,
     C_S_AXI_MIN_SIZE          		=> C_S_AXI_MIN_SIZE  ,
     C_USE_WSTRB               		=> C_USE_WSTRB       ,
     C_DPHASE_TIMEOUT          		=> C_DPHASE_TIMEOUT  ,
     C_BASEADDR                		=> C_BASEADDR        ,
     C_HIGHADDR                		=> C_HIGHADDR        ,
     C_FAMILY                  		=> C_FAMILY
   )
   port map
   (
     -- user_logic entity ports mapping  ---------------
     i_logicRst_p					   => CoreReset_s,
     o_CoreResetPulse_p                => CoreResetPulse_s,
     ov8_TxFifoReset_p                 => v8_TxFifoReset_s,
     ov8_RxFifoReset_p                 => v8_RxFifoReset_s,
     ov32_HostMacAddrLowWord_p         => v32_HostMacAddrLowWord_s,
     ov16_HostMacAddrHighWord_p        => v16_HostMacAddrHighWord_s,
     ov32_FpgaMacAddrLowWord_p         => v32_FpgaMacAddrLowWord_s,
     ov16_FpgaMacAddrHighWord_p        => v16_FpgaMacAddrHighWord_s,
     o_TxMode_p                        => TxMode_s,
     o_RxMode_p                        => RxMode_s,--open, --RxMode_s,
     ov32_RxTimeout2DropFrm_p          => v32_RxTimeout2DropFrm_s,
     iv32_RxConfigInfo_p               => v32_RxConfigInfo_s,
     ov8_RxStartNewTransfer_p          => v8_RxStartNewTransfer_s,
     iv32_RcvdFrameCntCh0_p            => v32_RcvdFrameCntCh0_s,
     iv32_RcvdFrameCntCh1_p            => v32_RcvdFrameCntCh1_s,
     iv32_RcvdFrameCntCh2_p            => v32_RcvdFrameCntCh2_s,
     iv32_RcvdFrameCntCh3_p            => v32_RcvdFrameCntCh3_s,
     iv32_RcvdFrameCntCh4_p            => v32_RcvdFrameCntCh4_s,
     iv32_RcvdFrameCntCh5_p            => v32_RcvdFrameCntCh5_s,
     iv32_RcvdFrameCntCh6_p            => v32_RcvdFrameCntCh6_s,
     iv32_RcvdFrameCntCh7_p            => v32_RcvdFrameCntCh7_s,
     iv3_RxErrStatus_p                 => v3_RxErrStatus_s,
     iv32_RxBadFrameCnt_p              => v32_RxBadFrameCnt_s,
     iv32_RxFrameLostCntCh0_p          => v32_RxFrameLostCntCh0_s,
     iv32_RxFrameLostCntCh1_p          => v32_RxFrameLostCntCh1_s,
     iv32_RxFrameLostCntCh2_p          => v32_RxFrameLostCntCh2_s,
     iv32_RxFrameLostCntCh3_p          => v32_RxFrameLostCntCh3_s,
     iv32_RxFrameLostCntCh4_p          => v32_RxFrameLostCntCh4_s,
     iv32_RxFrameLostCntCh5_p          => v32_RxFrameLostCntCh5_s,
     iv32_RxFrameLostCntCh6_p          => v32_RxFrameLostCntCh6_s,
     iv32_RxFrameLostCntCh7_p          => v32_RxFrameLostCntCh7_s,
     iv32_RxDropedFrmCntCh0_p          => v32_RxDropedFrmCntCh0_s,
     iv32_RxDropedFrmCntCh1_p          => v32_RxDropedFrmCntCh1_s,
     iv32_RxDropedFrmCntCh2_p          => v32_RxDropedFrmCntCh2_s,
     iv32_RxDropedFrmCntCh3_p          => v32_RxDropedFrmCntCh3_s,
     iv32_RxDropedFrmCntCh4_p          => v32_RxDropedFrmCntCh4_s,
     iv32_RxDropedFrmCntCh5_p          => v32_RxDropedFrmCntCh5_s,
     iv32_RxDropedFrmCntCh6_p          => v32_RxDropedFrmCntCh6_s,
     iv32_RxDropedFrmCntCh7_p          => v32_RxDropedFrmCntCh7_s,
     iv8_RxFifoUnderrun_p              => v8_RxFifoUnderrunReg_s,
     o_RxFifoUnderrunRead_p			   => RxFifoUnderrunRead_s,
     iv8_TxFifoOverrun_p               => v8_TxFifoOverrunReg_s,
     o_TxFifoOverrunRead_p             => TxFifoOverrunRead_s,
     ov15_TxFrameSizeCh0_p             => v15_TxFrameSizeCh0_s,
     ov15_TxFrameSizeCh1_p             => v15_TxFrameSizeCh1_s,
     ov15_TxFrameSizeCh2_p             => v15_TxFrameSizeCh2_s,
     ov15_TxFrameSizeCh3_p             => v15_TxFrameSizeCh3_s,
     ov15_TxFrameSizeCh4_p             => v15_TxFrameSizeCh4_s,
     ov15_TxFrameSizeCh5_p             => v15_TxFrameSizeCh5_s,
     ov15_TxFrameSizeCh6_p             => v15_TxFrameSizeCh6_s,
     ov15_TxFrameSizeCh7_p             => v15_TxFrameSizeCh7_s,
     ov32_TxTransferSizeCh0_p          => v32_TxTransferSizeCh0_s,
     ov32_TxTransferSizeCh1_p          => v32_TxTransferSizeCh1_s,
     ov32_TxTransferSizeCh2_p          => v32_TxTransferSizeCh2_s,
     ov32_TxTransferSizeCh3_p          => v32_TxTransferSizeCh3_s,
     ov32_TxTransferSizeCh4_p          => v32_TxTransferSizeCh4_s,
     ov32_TxTransferSizeCh5_p          => v32_TxTransferSizeCh5_s,
     ov32_TxTransferSizeCh6_p          => v32_TxTransferSizeCh6_s,
     ov32_TxTransferSizeCh7_p          => v32_TxTransferSizeCh7_s,
     ov32_TxFrameGap_p                 => v32_TxFrameGap_s,
     ov8_TxChFrsBurst_p                => v8_TxChFrsBurst_s,
     iv32_TxConfigInfo_p               => v32_TxConfigInfo_s,
     ov8_TxStartNewTransfer_p          => v8_TxStartNewTransfer_s,
     iv32_SentFrameCntCh0_p            => v32_SentFrameCntCh0_s,
     iv32_SentFrameCntCh1_p            => v32_SentFrameCntCh1_s,
     iv32_SentFrameCntCh2_p            => v32_SentFrameCntCh2_s,
     iv32_SentFrameCntCh3_p            => v32_SentFrameCntCh3_s,
     iv32_SentFrameCntCh4_p            => v32_SentFrameCntCh4_s,
     iv32_SentFrameCntCh5_p            => v32_SentFrameCntCh5_s,
     iv32_SentFrameCntCh6_p            => v32_SentFrameCntCh6_s,
     iv32_SentFrameCntCh7_p            => v32_SentFrameCntCh7_s,
     iv32_TxNbDataInfoCh0_p            => v32_TxNbDataInfoCh0D1_s,
     iv32_TxNbDataInfoCh1_p            => v32_TxNbDataInfoCh1D1_s,
     iv32_TxNbDataInfoCh2_p            => v32_TxNbDataInfoCh2D1_s,
     iv32_TxNbDataInfoCh3_p            => v32_TxNbDataInfoCh3D1_s,
     iv32_TxNbDataInfoCh4_p            => v32_TxNbDataInfoCh4D1_s,
     iv32_TxNbDataInfoCh5_p            => v32_TxNbDataInfoCh5D1_s,
     iv32_TxNbDataInfoCh6_p            => v32_TxNbDataInfoCh6D1_s,
     iv32_TxNbDataInfoCh7_p            => v32_TxNbDataInfoCh7D1_s,
     ov15_RxThresholdHigh_ch0_p        => v15_RxThresholdHigh_ch0_s,
     ov15_RxThresholdLow_ch0_p         => v15_RxThresholdLow_ch0_s,
     -- Bus Protocol Ports mapping --
     S_AXI_ACLK                		=> S_AXI_ACLK    ,
     S_AXI_ARESETN             		=> S_AXI_ARESETN ,
     S_AXI_AWADDR              		=> S_AXI_AWADDR  ,
     S_AXI_AWVALID             		=> S_AXI_AWVALID ,
     S_AXI_WDATA               		=> S_AXI_WDATA   ,
     S_AXI_WSTRB               		=> S_AXI_WSTRB   ,
     S_AXI_WVALID              		=> S_AXI_WVALID  ,
     S_AXI_BREADY              		=> S_AXI_BREADY  ,
     S_AXI_ARADDR              		=> S_AXI_ARADDR  ,
     S_AXI_ARVALID             		=> S_AXI_ARVALID ,
     S_AXI_RREADY              		=> S_AXI_RREADY  ,
     S_AXI_ARREADY             		=> S_AXI_ARREADY ,
     S_AXI_RDATA               		=> S_AXI_RDATA   ,
     S_AXI_RRESP               		=> S_AXI_RRESP   ,
     S_AXI_RVALID              		=> S_AXI_RVALID  ,
     S_AXI_WREADY              		=> S_AXI_WREADY  ,
     S_AXI_BRESP               		=> S_AXI_BRESP   ,
     S_AXI_BVALID              		=> S_AXI_BVALID  ,
     S_AXI_AWREADY             		=> S_AXI_AWREADY  
    );
    
 --------------------------------------------
 -- SW reset pulse stretcher.
 --------------------------------------------
 Process(S_AXI_ACLK)
 begin
 	if rising_edge(S_AXI_ACLK) then
 		v8_SignalStretch_s <= v8_SignalStretch_s(6 downto 0) & CoreResetPulse_s; 			 		
    CoreReset_s <= or_reduce(v8_SignalStretch_s);
 	end if;
 end process;
 
 
 --------------------------------------------
 -- Clear upon read
 --------------------------------------------
 -- RX FIFO UnderRun
 RxFifoUnderRun_gen: for i in 0 to 7 generate 
	 Process(S_AXI_ACLK)
	 begin
	 	if rising_edge(S_AXI_ACLK) then
	 		-- clear
	 		if RxFifoUnderrunRead_s = '1' then
	 			v8_RxFifoUnderrunReg_s(i) <= '0';
	 		end if;
	 		-- set
	 		if v8_RxFifoUnderrun_s(i) = '1' then
	 			v8_RxFifoUnderrunReg_s(i) <= '1';
	 		end if;	
	 	end if;
	 end process;
 end generate RxFifoUnderRun_gen;
 
 -- TX FIFO OverRun
 TxFifoOverRun_gen: for i in 0 to 7 generate 
	 Process(S_AXI_ACLK)
	 begin
	 	if rising_edge(S_AXI_ACLK) then
	 		-- clear
	 		if TxFifoOverrunRead_s = '1' then
	 			v8_TxFifoOverrunReg_s(i) <= '0';
	 		end if;
	 		-- set
	 		if v8_TxFifoOverrun_s(i) = '1' then
	 			v8_TxFifoOverrunReg_s(i) <= '1';
	 		end if;	
	 	end if;
	 end process;
 end generate TxFifoOverRun_gen;
 
 --------------------------------------------
 -- Regs to help timings
 --------------------------------------------
 Process(S_AXI_ACLK)
 begin
 	if rising_edge(S_AXI_ACLK) then
 		v32_TxNbDataInfoCh0D1_s <= v32_TxNbDataInfoCh0_s;
 		v32_TxNbDataInfoCh1D1_s <= v32_TxNbDataInfoCh1_s;
 		v32_TxNbDataInfoCh2D1_s <= v32_TxNbDataInfoCh2_s;
 		v32_TxNbDataInfoCh3D1_s <= v32_TxNbDataInfoCh3_s;
 		v32_TxNbDataInfoCh4D1_s <= v32_TxNbDataInfoCh4_s;
 		v32_TxNbDataInfoCh5D1_s <= v32_TxNbDataInfoCh5_s;
 		v32_TxNbDataInfoCh6D1_s <= v32_TxNbDataInfoCh6_s;
 		v32_TxNbDataInfoCh7D1_s <= v32_TxNbDataInfoCh7_s; 	
 	end if;
 end process;	  
end arch;
