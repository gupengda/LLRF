--------------------------------------------------------------------------------
-- Filename:          user_logic.vhd
-- Version:           v1_00_a
-- Description:       User Logic implementation module
-- Generated by:      julien.roy
-- Date:              2013-08-29 14:30:10
-- Generated:         using LyrtechRD REGGENUTIL based on Xilinx IPIF Wizard.
-- VHDL Standard:     VHDL'93
------------------------------------------------------------------------------
-- Copyright (c) 2001-2012 LYRtech RD Inc.  All rights reserved.
------------------------------------------------------------------------------
--
-----------------------------------------------------------------------------
-- Register Memory Map & Description
-----------------------------------------------------------------------------
-- BASEADDR + 0x0   DAUGHTERS_ABSENT   Start Signals for the bus test
--   0:0 DaughterIoAbsent R I=i_DaughterIoAbsent_p
--   1:1 FmcAbsent R I=i_FmcAbsent_p
--   2:2 FmcStackAbsent R I=i_FmcStackAbsent_p
--   31:5 rsvd R
--   4:3 UartSelectMode R W O=ov2_UartSelectMode_p

-- BASEADDR + 0x4   CLK_CTRL    Lock Signals for the bustest and clocks status
--   0:0 CtrlTclkdTxEn R W O=o_CtrlTclkdTxEn_p
--   1:1 CtrlTclkdRxDis R W O=o_CtrlTclkdRxDis_p
--   10:10 CtrlAmctclkc2Fmcclk3En R W O=o_CtrlAmctclkc2Fmcclk3En_p
--   11:11 CtrlAmctclka2Fmcclk2En R W O=o_CtrlAmctclka2Fmcclk2En_p
--   12:12 CtrlFclkaHighz R W O=o_CtrlFclkaHighz_p
--   13:13 Ctrl100mhzOutEn R W O=o_Ctrl100mhzOutEn_p
--   14:14 CtrlGatedClkEn R W O=o_CtrlGatedClkEn_p
--   2:2 CtrlTclkcTxEn R W O=o_CtrlTclkcTxEn_p
--   3:3 CtrlTclkcRxDis R W O=o_CtrlTclkcRxDis_p
--   31:15 rsvd R
--   4:4 CtrlTclkbTxEn R W O=o_CtrlTclkbTxEn_p
--   5:5 CtrlTclkbRxDis R W O=o_CtrlTclkbRxDis_p
--   6:6 CtrlTclkaTxEn R W O=o_CtrlTclkaTxEn_p
--   7:7 CtrlTclkaRxDis R W O=o_CtrlTclkaRxDis_p
--   8:8 CtrlFmcclk12AmctclkdEn R W O=o_CtrlFmcclk12AmctclkdEn_p
--   9:9 CtrlFmcclk02AmctclkbEn R W O=o_CtrlFmcclk02AmctclkbEn_p

-- BASEADDR + 0x8   VADJ_AND_FPGA_PROG_CTRL    Output Ctrl for the test
--   1:0 CtrlVadjSel R W O=ov2_CtrlVadjSel_p
--   2:2 CtrlVadjEn R W O=o_CtrlVadjEn_p
--   3:3 nFpgaProg R W O=o_nFpgaProg_p
--   31:4 rsvd R

-- BASEADDR + 0xc   LED_CTRL    Output Ctrl for the test
--   15:8 nCtrlLedGrn R W O=ov8_nCtrlLedGrn_p
--   16:16 CtrlLedBufOd R W O=o_CtrlLedBufOd_p
--   31:17 rsvd R
--   7:0 nCtrlLedRed R W O=ov8_nCtrlLedRed_p

-- BASEADDR + 0x10   CLK_STATUS    Lock Signals for the bustest and clocks status
--   0:0 TclkdInStop R I=i_TclkdInStop_p
--   1:1 TclkcInStop R I=i_TclkcInStop_p
--   10:10 FmcClk2Stop R I=i_FmcClk2Stop_p
--   11:11 FmcClk3Stop R I=i_FmcClk3Stop_p
--   2:2 TclkbInStop R I=i_TclkbInStop_p
--   3:3 TclkaInStop R I=i_TclkaInStop_p
--   31:12 rsvd R
--   4:4 DDr3CceMmcmLock R I=i_DDr3CceMmcmLock_p
--   5:5 DDr3SodimmMmcmLock R I=i_DDr3SodimmMmcmLock_p
--   6:6 Qdr2MmcmLock R I=i_Qdr2MmcmLock_p
--   7:7 DpioClkStop R I=i_DpioClkStop_p
--   8:8 FmcClk0Stop R I=i_FmcClk0Stop_p
--   9:9 FmcClk1Stop R I=i_FmcClk1Stop_p

-- BASEADDR + 0x14   MEMORY_INIT_DONE_STATUS    cmt
--   0:0 Ddr3CceInitDone R I=i_Ddr3CceInitDone_p
--   1:1 Ddr3SodimmInitDone R I=i_Ddr3SodimmInitDone_p
--   2:2 Qdr2B0InitDone R I=i_Qdr2B0InitDone_p
--   3:3 Qdr2B1InitDone R I=i_Qdr2B1InitDone_p
--   31:4 rsvd R

-- BASEADDR + 0x18   USER_REG0    User Register 0
--   31:0 CustomReg0 R W I=iv32_CustomReg0_p O=ov32_CustomReg0_p

-- BASEADDR + 0x1c   USER_REG1    User Register 1
--   31:0 CustomReg1 R W I=iv32_CustomReg1_p O=ov32_CustomReg1_p

-- BASEADDR + 0x20   USER_REG2    User Register 2
--   31:0 CustomReg2 R W I=iv32_CustomReg2_p O=ov32_CustomReg2_p

-- BASEADDR + 0x24   USER_REG3    User Register 3
--   31:0 CustomReg3 R W I=iv32_CustomReg3_p O=ov32_CustomReg3_p

-- BASEADDR + 0x28   USER_REG4    User Register 4
--   31:0 CustomReg4 R W I=iv32_CustomReg4_p O=ov32_CustomReg4_p

-- BASEADDR + 0x2c   USER_REG5    User Register 5
--   31:0 CustomReg5 R W I=iv32_CustomReg5_p O=ov32_CustomReg5_p

-- BASEADDR + 0x30   USER_REG6    User Register 6
--   31:0 CustomReg6 R W I=iv32_CustomReg6_p O=ov32_CustomReg6_p

-- BASEADDR + 0x34   USER_REG7    User Register 7
--   31:0 CustomReg7 R W I=iv32_CustomReg7_p O=ov32_CustomReg7_p

-- BASEADDR + 0x38   USER_REG8    User Register 8
--   31:0 CustomReg8 R W I=iv32_CustomReg8_p O=ov32_CustomReg8_p

-- BASEADDR + 0x3c   USER_REG9    User Register 9
--   31:0 CustomReg9 R W I=iv32_CustomReg9_p O=ov32_CustomReg9_p

-- BASEADDR + 0x40   USER_REG10    User Register 10
--   31:0 CustomReg10 R W I=iv32_CustomReg10_p O=ov32_CustomReg10_p

-- BASEADDR + 0x44   USER_REG11    User Register 11
--   31:0 CustomReg11 R W I=iv32_CustomReg11_p O=ov32_CustomReg11_p

-- BASEADDR + 0x48   USER_REG12    User Register 12
--   31:0 CustomReg12 R W I=iv32_CustomReg12_p O=ov32_CustomReg12_p

-- BASEADDR + 0x4c   USER_REG13    User Register 13
--   31:0 CustomReg13 R W I=iv32_CustomReg13_p O=ov32_CustomReg13_p

-- BASEADDR + 0x50   USER_REG14    User Register 14
--   31:0 CustomReg14 R W I=iv32_CustomReg14_p O=ov32_CustomReg14_p

-- BASEADDR + 0x54   USER_REG15    User Register 15
--   31:0 CustomReg15 R W I=iv32_CustomReg15_p O=ov32_CustomReg15_p

-- BASEADDR + 0x58   USER_REG16    User Register 16
--   31:0 CustomReg16 R W I=iv32_CustomReg16_p O=ov32_CustomReg16_p

-- BASEADDR + 0x5c   USER_REG17    User Register 17
--   31:0 CustomReg17 R W I=iv32_CustomReg17_p O=ov32_CustomReg17_p

-- BASEADDR + 0x60   USER_REG18    User Register 18
--   31:0 CustomReg18 R W I=iv32_CustomReg18_p O=ov32_CustomReg18_p

-- BASEADDR + 0x64   USER_REG19    User Register 19
--   31:0 CustomReg19 R W I=iv32_CustomReg19_p O=ov32_CustomReg19_p

-- BASEADDR + 0x68   USER_REG20    User Register 20
--   31:0 CustomReg20 R W I=iv32_CustomReg20_p O=ov32_CustomReg20_p

-- BASEADDR + 0x6c   USER_REG21    User Register 21
--   31:0 CustomReg21 R W I=iv32_CustomReg21_p O=ov32_CustomReg21_p

-- BASEADDR + 0x70   USER_REG22    User Register 22
--   31:0 CustomReg22 R W I=iv32_CustomReg22_p O=ov32_CustomReg22_p

-- BASEADDR + 0x74   USER_REG23    User Register 23
--   31:0 CustomReg23 R W I=iv32_CustomReg23_p O=ov32_CustomReg23_p

-- BASEADDR + 0x78   USER_REG24    User Register 24
--   31:0 CustomReg24 R W I=iv32_CustomReg24_p O=ov32_CustomReg24_p

-- BASEADDR + 0x7c   USER_REG25    User Register 25
--   31:0 CustomReg25 R W I=iv32_CustomReg25_p O=ov32_CustomReg25_p

-- BASEADDR + 0x80   USER_REG26    User Register 26
--   31:0 CustomReg26 R W I=iv32_CustomReg26_p O=ov32_CustomReg26_p

-- BASEADDR + 0x84   USER_REG27    User Register 27
--   31:0 CustomReg27 R W I=iv32_CustomReg27_p O=ov32_CustomReg27_p

-- BASEADDR + 0x88   USER_REG28    User Register 28
--   31:0 CustomReg28 R W I=iv32_CustomReg28_p O=ov32_CustomReg28_p

-- BASEADDR + 0x8c   USER_REG29    User Register 29
--   31:0 CustomReg29 R W I=iv32_CustomReg29_p O=ov32_CustomReg29_p

-- BASEADDR + 0x90   USER_REG30    User Register 30
--   31:0 CustomReg30 R W I=iv32_CustomReg30_p O=ov32_CustomReg30_p

-- BASEADDR + 0x94   USER_REG31    User Register 31
--   31:0 CustomReg31 R W I=iv32_CustomReg31_p O=ov32_CustomReg31_p

-- BASEADDR + 0x98   PCIE_CTRL_STAT    PCIe control/status register
--   0:0 PciePresent R I=i_PciePresent_p
--   1:1 PcieDcmLocked R I=i_PcieDcmLocked_p
--   2:2 PcieMsi R W O=o_PcieMsi_p
--   31:3 rsvd R

-- BASEADDR + 0x9c   RESERVED_REG0    cmt
--   31:0 ReservedReg0 R W O=ov32_ReservedReg0_p

-- BASEADDR + 0xa0   MMC_CTRL    MMC Control Register
--   0:0 MmcI2cReleaseReq R W O=o_MmcI2cReleaseReq_p
--   1:1 MmcI2cReleaseAck R I=i_MmcI2cReleaseAck_p
--   31:2 rsvd R

-- BASEADDR + 0xa4   ACCESS_STATUS    cmt
--   0:0 AccessFailed R W O=o_AccessFailed_p
--   31:1 rsvd R

-- BASEADDR + 0xa8   LAST_RW_ADDRESS    cmt
--   31:0 LastReadAddr R I=iv32_LastReadAddr_p

-- BASEADDR + 0xac   Aurora_4_7_CoreID    Aurora core id and version
--   31:0 Aurora_CoreId47 R I=iv32_Aurora_CoreId47_p

-- BASEADDR + 0xb0   Aurora_4_7_Control    control register for lane 4 to 7
--   31:0 Aurora_Ctrl47 R W I=iv32_Aurora_Ctrl47_p O=ov32_Aurora_Ctrl47_p

-- BASEADDR + 0xb4   Aurora_4_7_ReceiveDataCount    Rx data count for lane 4 to 7
--   31:0 Aurora_RxDataCnt47 R I=iv32_Aurora_RxDataCnt47_p

-- BASEADDR + 0xb8   Aurora_4_7_TransmitDataCount    Tx data count for lane 4 to 7
--   31:0 Aurora_TxDataCnt47 R I=iv32_Aurora_TxDataCnt47_p

-- BASEADDR + 0xbc   Aurora_8_11_CoreID    Aurora core id and version
--   31:0 Aurora_CoreId811 R I=iv32_Aurora_CoreId811_p

-- BASEADDR + 0xc0   Aurora_8_11_Control    control register for lane 8 to 11
--   31:0 Aurora_Ctrl811 R W I=iv32_Aurora_Ctrl811_p O=ov32_Aurora_Ctrl811_p

-- BASEADDR + 0xc4   Aurora_8_11_ReceiveDataCount    Rx data count for lane 8 to 11
--   31:0 Aurora_RxDataCnt811 R I=iv32_Aurora_RxDataCnt811_p

-- BASEADDR + 0xc8   Aurora_8_11_TransmitDataCount    Tx data count for lane 8 to 11
--   31:0 Aurora_TxDataCnt811 R I=iv32_Aurora_TxDataCnt811_p

-- BASEADDR + 0xcc   Aurora_17_20_CoreID    Aurora core id and version
--   31:0 Aurora_CoreId1720 R I=iv32_Aurora_CoreId1720_p

-- BASEADDR + 0xd0   Aurora_17_20_Control    control register for lane 17 to 20
--   31:0 Aurora_Ctrl1720 R W I=iv32_Aurora_Ctrl1720_p O=ov32_Aurora_Ctrl1720_p

-- BASEADDR + 0xd4   Aurora_17_20_ReceiveDataCount    Rx data count for lane 17 to 20
--   31:0 Aurora_RxDataCnt1720 R I=iv32_Aurora_RxDataCnt1720_p

-- BASEADDR + 0xd8   Aurora_17_20_TransmitDataCount    Tx data count for lane 17 to 20
--   31:0 Aurora_TxDataCnt1720 R I=iv32_Aurora_TxDataCnt1720_p

-- BASEADDR + 0xdc   PPS_SYNC_COREID    core id and version
--   31:0 PPSSYNC_CoreIdVers R I=iv32_PPSSYNC_CoreIdVers_p

-- BASEADDR + 0xe0   PPS_SYNC_FMCCLK    FMC expected clock value
--   31:0 PPSSYNC_FmcClkVal R W O=ov32_PPSSYNC_FmcClkVal_p

-- BASEADDR + 0xe4   PPS_SYNC_CTRL    control register
--   0:0 PPSSYNC_CoreReset R W O=o_PPSSYNC_CoreReset_p
--   1:1 PPSSYNC_RstUponRead R W O=o_PPSSYNC_RstUponRead_p
--   2:2 PPSSYNC_RstAcc R W O=o_PPSSYNC_RstAcc_p
--   3:3 PPSSYNC_CoreEnable R W O=o_PPSSYNC_CoreEnable_p
--   31:8 reserved R
--   4:4 MovSumEn R W O=o_PPSSYNC_MovSumEn_p
--   5:5 MovSumRst R W O=o_PPSSYNC_MovSumRst_p
--   7:6 reserved R

-- BASEADDR + 0xe8   PPS_SYNC_PPSCNT    pps count register
--   31:0 PPSSYNC_PpsCnt R I=iv32_PPSSYNC_PpsCnt_p

-- BASEADDR + 0xec   PPS_SYNC_DIFFACC    difference accumulator
--   31:0 PPSSYNC_DiffAcc R+ I=iv32_PPSSYNC_DiffAcc_p

-- BASEADDR + 0xf0   PPS_SYNC_PROGDELAY    programmable delay for moving window
--   31:0 PPSSYNC_ProgDelay R W O=ov32_PPSSYNC_ProgDelay_p

-- BASEADDR + 0xf4   LVDS0_COREID    LVDS instance 0 core ID
--   31:0 lvds0_coreid R I=iv32_lvds0_coreid_p

-- BASEADDR + 0xf8   LVDS0_CTRL    LVDS instance 0 control
--   31:0 lvds0_ctrl R W O=ov32_lvds0_ctrl_p

-- BASEADDR + 0xfc   LVDS0_VALUE    LVDS instance 0 value
--   31:0 lvds0_value R W I=iv32_lvds0_value_p O=ov32_lvds0_value_p

-- BASEADDR + 0x100   LVDS0_OE    LVDS instance 0 output enable
--   31:0 lvds0_oe R W O=ov32_lvds0_oe_p

-- BASEADDR + 0x104   LVDS1_COREID    LVDS instance 1 core ID
--   31:0 lvds1_coreid R I=iv32_lvds1_coreid_p

-- BASEADDR + 0x108   LVDS1_CTRL    LVDS instance 1 control
--   31:0 lvds1_ctrl R W O=ov32_lvds1_ctrl_p

-- BASEADDR + 0x10c   LVDS1_VALUE    LVDS instance 1 value
--   31:0 lvds1_value R W I=iv32_lvds1_value_p O=ov32_lvds1_value_p

-- BASEADDR + 0x110   LVDS1_OE    LVDS instance 1 output enable
--   31:0 lvds1_oe R W O=ov32_lvds1_oe_p

-- BASEADDR + 0x114   LVDS2_COREID    LVDS instance 2 core ID
--   31:0 lvds2_coreid R I=iv32_lvds2_coreid_p

-- BASEADDR + 0x118   LVDS2_CTRL    LVDS instance 2 control
--   31:0 lvds2_ctrl R W O=ov32_lvds2_ctrl_p

-- BASEADDR + 0x11c   LVDS2_VALUE    LVDS instance 2 value
--   31:0 lvds2_value R W I=iv32_lvds2_value_p O=ov32_lvds2_value_p

-- BASEADDR + 0x120   LVDS2_OE    LVDS instance 2 output enable
--   31:0 lvds2_oe R W O=ov32_lvds2_oe_p

-- BASEADDR + 0x124   LVDS3_COREID    LVDS instance 3 core ID
--   31:0 lvds3_coreid R I=iv32_lvds3_coreid_p

-- BASEADDR + 0x128   LVDS3_CTRL    LVDS instance 3 control
--   31:0 lvds3_ctrl R W O=ov32_lvds3_ctrl_p

-- BASEADDR + 0x12c   LVDS3_VALUE    LVDS instance 3 value
--   31:0 lvds3_value R W I=iv32_lvds3_value_p O=ov32_lvds3_value_p

-- BASEADDR + 0x130   LVDS3_OE    LVDS instance 3 output enable
--   31:0 lvds3_oe R W O=ov32_lvds3_oe_p

--------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library proc_common_v3_00_a;
use proc_common_v3_00_a.proc_common_pkg.all;

-- DO NOT EDIT ABOVE THIS LINE --------------------

--USER libraries added here

------------------------------------------------------------------------------
-- Entity section
------------------------------------------------------------------------------
-- Definition of Generics:
--   C_NUM_REG                    -- Number of software accessible registers
--   C_SLV_DWIDTH                 -- Slave interface data bus width
--
-- Definition of Ports:
--   Bus2IP_Clk                   -- Bus to IP clock
--   Bus2IP_Resetn                -- Bus to IP reset
--   Bus2IP_Data                  -- Bus to IP data bus
--   Bus2IP_BE                    -- Bus to IP byte enables
--   Bus2IP_RdCE                  -- Bus to IP read chip enable
--   Bus2IP_WrCE                  -- Bus to IP write chip enable
--   IP2Bus_Data                  -- IP to Bus data bus
--   IP2Bus_RdAck                 -- IP to Bus read transfer acknowledgement
--   IP2Bus_WrAck                 -- IP to Bus write transfer acknowledgement
--   IP2Bus_Error                 -- IP to Bus error response
------------------------------------------------------------------------------

entity user_logic is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------
    --USER generics added here
    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_NUM_REG                      : integer              := 77;
    C_SLV_DWIDTH                   : integer              := 32
    -- DO NOT EDIT ABOVE THIS LINE ---------------------
  );
  port
  (
    -- ADD USER PORTS BELOW THIS LINE ------------------
    --USER ports added here
    -- ADD USER PORTS ABOVE THIS LINE ------------------
    -- User ports
    i_DaughterIoAbsent_p : in std_logic;
    i_FmcAbsent_p : in std_logic;
    i_FmcStackAbsent_p : in std_logic;
    ov2_UartSelectMode_p : out std_logic_vector(1 downto 0);
    o_CtrlTclkdTxEn_p : out std_logic;
    o_CtrlTclkdRxDis_p : out std_logic;
    o_CtrlAmctclkc2Fmcclk3En_p : out std_logic;
    o_CtrlAmctclka2Fmcclk2En_p : out std_logic;
    o_CtrlFclkaHighz_p : out std_logic;
    o_Ctrl100mhzOutEn_p : out std_logic;
    o_CtrlGatedClkEn_p : out std_logic;
    o_CtrlTclkcTxEn_p : out std_logic;
    o_CtrlTclkcRxDis_p : out std_logic;
    o_CtrlTclkbTxEn_p : out std_logic;
    o_CtrlTclkbRxDis_p : out std_logic;
    o_CtrlTclkaTxEn_p : out std_logic;
    o_CtrlTclkaRxDis_p : out std_logic;
    o_CtrlFmcclk12AmctclkdEn_p : out std_logic;
    o_CtrlFmcclk02AmctclkbEn_p : out std_logic;
    ov2_CtrlVadjSel_p : out std_logic_vector(1 downto 0);
    o_CtrlVadjEn_p : out std_logic;
    o_nFpgaProg_p : out std_logic;
    ov8_nCtrlLedGrn_p : out std_logic_vector(7 downto 0);
    o_CtrlLedBufOd_p : out std_logic;
    ov8_nCtrlLedRed_p : out std_logic_vector(7 downto 0);
    i_TclkdInStop_p : in std_logic;
    i_TclkcInStop_p : in std_logic;
    i_FmcClk2Stop_p : in std_logic;
    i_FmcClk3Stop_p : in std_logic;
    i_TclkbInStop_p : in std_logic;
    i_TclkaInStop_p : in std_logic;
    i_DDr3CceMmcmLock_p : in std_logic;
    i_DDr3SodimmMmcmLock_p : in std_logic;
    i_Qdr2MmcmLock_p : in std_logic;
    i_DpioClkStop_p : in std_logic;
    i_FmcClk0Stop_p : in std_logic;
    i_FmcClk1Stop_p : in std_logic;
    i_Ddr3CceInitDone_p : in std_logic;
    i_Ddr3SodimmInitDone_p : in std_logic;
    i_Qdr2B0InitDone_p : in std_logic;
    i_Qdr2B1InitDone_p : in std_logic;
    iv32_CustomReg0_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg0_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg1_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg1_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg2_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg2_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg3_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg3_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg4_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg4_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg5_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg5_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg6_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg6_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg7_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg7_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg8_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg8_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg9_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg9_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg10_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg10_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg11_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg11_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg12_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg12_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg13_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg13_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg14_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg14_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg15_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg15_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg16_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg16_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg17_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg17_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg18_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg18_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg19_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg19_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg20_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg20_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg21_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg21_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg22_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg22_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg23_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg23_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg24_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg24_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg25_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg25_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg26_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg26_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg27_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg27_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg28_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg28_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg29_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg29_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg30_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg30_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg31_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg31_p : out std_logic_vector(31 downto 0);
    i_PciePresent_p : in std_logic;
    i_PcieDcmLocked_p : in std_logic;
    o_PcieMsi_p : out std_logic;
    ov32_ReservedReg0_p : out std_logic_vector(31 downto 0);
    o_MmcI2cReleaseReq_p : out std_logic;
    i_MmcI2cReleaseAck_p : in std_logic;
    o_AccessFailed_p : out std_logic;
    iv32_LastReadAddr_p : in std_logic_vector(31 downto 0);
    iv32_Aurora_CoreId47_p : in std_logic_vector(31 downto 0);
    iv32_Aurora_Ctrl47_p : in std_logic_vector(31 downto 0);
    ov32_Aurora_Ctrl47_p : out std_logic_vector(31 downto 0);
    iv32_Aurora_RxDataCnt47_p : in std_logic_vector(31 downto 0);
    iv32_Aurora_TxDataCnt47_p : in std_logic_vector(31 downto 0);
    iv32_Aurora_CoreId811_p : in std_logic_vector(31 downto 0);
    iv32_Aurora_Ctrl811_p : in std_logic_vector(31 downto 0);
    ov32_Aurora_Ctrl811_p : out std_logic_vector(31 downto 0);
    iv32_Aurora_RxDataCnt811_p : in std_logic_vector(31 downto 0);
    iv32_Aurora_TxDataCnt811_p : in std_logic_vector(31 downto 0);
    iv32_Aurora_CoreId1720_p : in std_logic_vector(31 downto 0);
    iv32_Aurora_Ctrl1720_p : in std_logic_vector(31 downto 0);
    ov32_Aurora_Ctrl1720_p : out std_logic_vector(31 downto 0);
    iv32_Aurora_RxDataCnt1720_p : in std_logic_vector(31 downto 0);
    iv32_Aurora_TxDataCnt1720_p : in std_logic_vector(31 downto 0);
    iv32_PPSSYNC_CoreIdVers_p : in std_logic_vector(31 downto 0);
    ov32_PPSSYNC_FmcClkVal_p : out std_logic_vector(31 downto 0);
    o_PPSSYNC_CoreReset_p : out std_logic;
    o_PPSSYNC_RstUponRead_p : out std_logic;
    o_PPSSYNC_RstAcc_p : out std_logic;
    o_PPSSYNC_CoreEnable_p : out std_logic;
    o_PPSSYNC_MovSumEn_p : out std_logic;
    o_PPSSYNC_MovSumRst_p : out std_logic;
    iv32_PPSSYNC_PpsCnt_p : in std_logic_vector(31 downto 0);
    iv32_PPSSYNC_DiffAcc_p : in std_logic_vector(31 downto 0);
    o_PPSSYNC_DiffAccRead_p : out std_logic;
    ov32_PPSSYNC_ProgDelay_p : out std_logic_vector(31 downto 0);
    iv32_lvds0_coreid_p : in std_logic_vector(31 downto 0);
    ov32_lvds0_ctrl_p : out std_logic_vector(31 downto 0);
    iv32_lvds0_value_p : in std_logic_vector(31 downto 0);
    ov32_lvds0_value_p : out std_logic_vector(31 downto 0);
    ov32_lvds0_oe_p : out std_logic_vector(31 downto 0);
    iv32_lvds1_coreid_p : in std_logic_vector(31 downto 0);
    ov32_lvds1_ctrl_p : out std_logic_vector(31 downto 0);
    iv32_lvds1_value_p : in std_logic_vector(31 downto 0);
    ov32_lvds1_value_p : out std_logic_vector(31 downto 0);
    ov32_lvds1_oe_p : out std_logic_vector(31 downto 0);
    iv32_lvds2_coreid_p : in std_logic_vector(31 downto 0);
    ov32_lvds2_ctrl_p : out std_logic_vector(31 downto 0);
    iv32_lvds2_value_p : in std_logic_vector(31 downto 0);
    ov32_lvds2_value_p : out std_logic_vector(31 downto 0);
    ov32_lvds2_oe_p : out std_logic_vector(31 downto 0);
    iv32_lvds3_coreid_p : in std_logic_vector(31 downto 0);
    ov32_lvds3_ctrl_p : out std_logic_vector(31 downto 0);
    iv32_lvds3_value_p : in std_logic_vector(31 downto 0);
    ov32_lvds3_value_p : out std_logic_vector(31 downto 0);
    ov32_lvds3_oe_p : out std_logic_vector(31 downto 0);
    -- Bus protocol ports, do not add to or delete
    Bus2IP_Clk                     : in  std_logic;
    Bus2IP_Resetn                  : in  std_logic;
    Bus2IP_Data                    : in  std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    Bus2IP_BE                      : in  std_logic_vector(C_SLV_DWIDTH/8-1 downto 0);
    Bus2IP_RdCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    Bus2IP_WrCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    IP2Bus_Data                    : out std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    IP2Bus_RdAck                   : out std_logic;
    IP2Bus_WrAck                   : out std_logic;
    IP2Bus_Error                   : out std_logic
  );

 attribute MAX_FANOUT : string;
 attribute SIGIS : string;
 attribute SIGIS of Bus2IP_Clk    : signal is "CLK";
 attribute SIGIS of Bus2IP_Resetn : signal is "RST";

end entity user_logic;

------------------------------------------------------------------------------
-- Architecture section
------------------------------------------------------------------------------

architecture IMP of user_logic is

-------------------------------------------------------------------------------
-- Constant declarations
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
--     ************** Function declaratin *******************                   
-- Return a std_logic_vector with only one bit set to one.
-- The argument BitPosition represent the bit position to set to one, starting with 0.
-- The argument Width represent the width of the returned std_logic_vector.
-------------------------------------------------------------------------------
  function OneHotVector( BitPosition : integer;                              
                Width : integer)                                             
                return std_logic_vector                                      
  is                                                                         
    variable Result                   : std_logic_vector(Width - 1 downto 0);

  begin                        
    Result := (others => '0'); 
    Result(BitPosition) := '1';
    return Result;             
  end OneHotVector;            
-------------------------------------------------------------------------------
-- Signal and Type Declarations
-------------------------------------------------------------------------------

  signal v2_UartSelectMode_s                     : std_logic_vector(1 downto 0);
  signal CtrlTclkdTxEn_s                     : std_logic;
  signal CtrlTclkdRxDis_s                     : std_logic;
  signal CtrlAmctclkc2Fmcclk3En_s                     : std_logic;
  signal CtrlAmctclka2Fmcclk2En_s                     : std_logic;
  signal CtrlFclkaHighz_s                     : std_logic;
  signal Ctrl100mhzOutEn_s                     : std_logic;
  signal CtrlGatedClkEn_s                     : std_logic;
  signal CtrlTclkcTxEn_s                     : std_logic;
  signal CtrlTclkcRxDis_s                     : std_logic;
  signal CtrlTclkbTxEn_s                     : std_logic;
  signal CtrlTclkbRxDis_s                     : std_logic;
  signal CtrlTclkaTxEn_s                     : std_logic;
  signal CtrlTclkaRxDis_s                     : std_logic;
  signal CtrlFmcclk12AmctclkdEn_s                     : std_logic;
  signal CtrlFmcclk02AmctclkbEn_s                     : std_logic;
  signal v2_CtrlVadjSel_s                     : std_logic_vector(1 downto 0);
  signal CtrlVadjEn_s                     : std_logic;
  signal nFpgaProg_s                     : std_logic;
  signal v8_nCtrlLedGrn_s                     : std_logic_vector(7 downto 0);
  signal CtrlLedBufOd_s                     : std_logic;
  signal v8_nCtrlLedRed_s                     : std_logic_vector(7 downto 0);
  signal v32_CustomReg0_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg1_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg2_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg3_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg4_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg5_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg6_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg7_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg8_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg9_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg10_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg11_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg12_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg13_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg14_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg15_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg16_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg17_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg18_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg19_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg20_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg21_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg22_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg23_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg24_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg25_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg26_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg27_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg28_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg29_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg30_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg31_s                     : std_logic_vector(31 downto 0);
  signal PcieMsi_s                     : std_logic;
  signal v32_ReservedReg0_s                     : std_logic_vector(31 downto 0);
  signal MmcI2cReleaseReq_s                     : std_logic;
  signal AccessFailed_s                     : std_logic;
  signal v32_Aurora_Ctrl47_s                     : std_logic_vector(31 downto 0);
  signal v32_Aurora_Ctrl811_s                     : std_logic_vector(31 downto 0);
  signal v32_Aurora_Ctrl1720_s                     : std_logic_vector(31 downto 0);
  signal v32_PPSSYNC_FmcClkVal_s                     : std_logic_vector(31 downto 0);
  signal PPSSYNC_CoreReset_s                     : std_logic;
  signal PPSSYNC_RstUponRead_s                     : std_logic;
  signal PPSSYNC_RstAcc_s                     : std_logic;
  signal PPSSYNC_CoreEnable_s                     : std_logic;
  signal MovSumEn_s                     : std_logic;
  signal MovSumRst_s                     : std_logic;
  signal v32_PPSSYNC_ProgDelay_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds0_ctrl_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds0_value_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds0_oe_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds1_ctrl_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds1_value_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds1_oe_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds2_ctrl_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds2_value_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds2_oe_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds3_ctrl_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds3_value_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds3_oe_s                     : std_logic_vector(31 downto 0);
  signal slv_reg_write_sel              : std_logic_vector(76 downto 0);
  signal slv_reg_read_sel               : std_logic_vector(76 downto 0);
  signal slv_ip2bus_data                : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal slv_read_ack                   : std_logic;
  signal slv_write_ack                  : std_logic;

------------------------------------------------------------------------------
begin
------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Begin architecture
-------------------------------------------------------------------------------

-- swap bits
WrCeBitSwap: for i in 0 to slv_reg_write_sel'high generate
  slv_reg_write_sel(i) <= Bus2IP_WrCE(slv_reg_write_sel'high - i);
end generate WrCeBitSwap;

RdCeBitSwap: for i in 0 to slv_reg_read_sel'high generate
  slv_reg_read_sel(i)  <= Bus2IP_RdCE(slv_reg_read_sel'high - i);
end generate RdCeBitSwap;

-- generate write/read ack
  slv_write_ack <=   Bus2IP_WrCE(0) or   Bus2IP_WrCE(1) or   Bus2IP_WrCE(2) or   Bus2IP_WrCE(3) or   Bus2IP_WrCE(4) or   Bus2IP_WrCE(5) or   Bus2IP_WrCE(6) or   Bus2IP_WrCE(7) or   Bus2IP_WrCE(8) or   Bus2IP_WrCE(9) or   Bus2IP_WrCE(10) or   Bus2IP_WrCE(11) or   Bus2IP_WrCE(12) or   Bus2IP_WrCE(13) or   Bus2IP_WrCE(14) or   Bus2IP_WrCE(15) or   Bus2IP_WrCE(16) or   Bus2IP_WrCE(17) or   Bus2IP_WrCE(18) or   Bus2IP_WrCE(19) or   Bus2IP_WrCE(20) or   Bus2IP_WrCE(21) or   Bus2IP_WrCE(22) or   Bus2IP_WrCE(23) or   Bus2IP_WrCE(24) or   Bus2IP_WrCE(25) or   Bus2IP_WrCE(26) or   Bus2IP_WrCE(27) or   Bus2IP_WrCE(28) or   Bus2IP_WrCE(29) or   Bus2IP_WrCE(30) or   Bus2IP_WrCE(31) or   Bus2IP_WrCE(32) or   Bus2IP_WrCE(33) or   Bus2IP_WrCE(34) or   Bus2IP_WrCE(35) or   Bus2IP_WrCE(36) or   Bus2IP_WrCE(37) or   Bus2IP_WrCE(38) or   Bus2IP_WrCE(39) or   Bus2IP_WrCE(40) or   Bus2IP_WrCE(41) or   Bus2IP_WrCE(42) or   Bus2IP_WrCE(43) or   Bus2IP_WrCE(44) or   Bus2IP_WrCE(45) or   Bus2IP_WrCE(46) or   Bus2IP_WrCE(47) or   Bus2IP_WrCE(48) or   Bus2IP_WrCE(49) or   Bus2IP_WrCE(50) or   Bus2IP_WrCE(51) or   Bus2IP_WrCE(52) or   Bus2IP_WrCE(53) or   Bus2IP_WrCE(54) or   Bus2IP_WrCE(55) or   Bus2IP_WrCE(56) or   Bus2IP_WrCE(57) or   Bus2IP_WrCE(58) or   Bus2IP_WrCE(59) or   Bus2IP_WrCE(60) or   Bus2IP_WrCE(61) or   Bus2IP_WrCE(62) or   Bus2IP_WrCE(63) or   Bus2IP_WrCE(64) or   Bus2IP_WrCE(65) or   Bus2IP_WrCE(66) or   Bus2IP_WrCE(67) or   Bus2IP_WrCE(68) or   Bus2IP_WrCE(69) or   Bus2IP_WrCE(70) or   Bus2IP_WrCE(71) or   Bus2IP_WrCE(72) or   Bus2IP_WrCE(73) or   Bus2IP_WrCE(74) or   Bus2IP_WrCE(75) or   Bus2IP_WrCE(76);
  slv_read_ack  <=   Bus2IP_RdCE(0) or   Bus2IP_RdCE(1) or   Bus2IP_RdCE(2) or   Bus2IP_RdCE(3) or   Bus2IP_RdCE(4) or   Bus2IP_RdCE(5) or   Bus2IP_RdCE(6) or   Bus2IP_RdCE(7) or   Bus2IP_RdCE(8) or   Bus2IP_RdCE(9) or   Bus2IP_RdCE(10) or   Bus2IP_RdCE(11) or   Bus2IP_RdCE(12) or   Bus2IP_RdCE(13) or   Bus2IP_RdCE(14) or   Bus2IP_RdCE(15) or   Bus2IP_RdCE(16) or   Bus2IP_RdCE(17) or   Bus2IP_RdCE(18) or   Bus2IP_RdCE(19) or   Bus2IP_RdCE(20) or   Bus2IP_RdCE(21) or   Bus2IP_RdCE(22) or   Bus2IP_RdCE(23) or   Bus2IP_RdCE(24) or   Bus2IP_RdCE(25) or   Bus2IP_RdCE(26) or   Bus2IP_RdCE(27) or   Bus2IP_RdCE(28) or   Bus2IP_RdCE(29) or   Bus2IP_RdCE(30) or   Bus2IP_RdCE(31) or   Bus2IP_RdCE(32) or   Bus2IP_RdCE(33) or   Bus2IP_RdCE(34) or   Bus2IP_RdCE(35) or   Bus2IP_RdCE(36) or   Bus2IP_RdCE(37) or   Bus2IP_RdCE(38) or   Bus2IP_RdCE(39) or   Bus2IP_RdCE(40) or   Bus2IP_RdCE(41) or   Bus2IP_RdCE(42) or   Bus2IP_RdCE(43) or   Bus2IP_RdCE(44) or   Bus2IP_RdCE(45) or   Bus2IP_RdCE(46) or   Bus2IP_RdCE(47) or   Bus2IP_RdCE(48) or   Bus2IP_RdCE(49) or   Bus2IP_RdCE(50) or   Bus2IP_RdCE(51) or   Bus2IP_RdCE(52) or   Bus2IP_RdCE(53) or   Bus2IP_RdCE(54) or   Bus2IP_RdCE(55) or   Bus2IP_RdCE(56) or   Bus2IP_RdCE(57) or   Bus2IP_RdCE(58) or   Bus2IP_RdCE(59) or   Bus2IP_RdCE(60) or   Bus2IP_RdCE(61) or   Bus2IP_RdCE(62) or   Bus2IP_RdCE(63) or   Bus2IP_RdCE(64) or   Bus2IP_RdCE(65) or   Bus2IP_RdCE(66) or   Bus2IP_RdCE(67) or   Bus2IP_RdCE(68) or   Bus2IP_RdCE(69) or   Bus2IP_RdCE(70) or   Bus2IP_RdCE(71) or   Bus2IP_RdCE(72) or   Bus2IP_RdCE(73) or   Bus2IP_RdCE(74) or   Bus2IP_RdCE(75) or   Bus2IP_RdCE(76);

 -- implement slave model software accessible register(s)
 SLAVE_REG_WRITE_PROC : process( Bus2IP_Clk ) is
 begin

  if Bus2IP_Clk'event and Bus2IP_Clk = '1' then
    if Bus2IP_Resetn = '0' then
      v2_UartSelectMode_s <= "00";
      CtrlTclkdTxEn_s <= '0';
      CtrlTclkdRxDis_s <= '1';
      CtrlAmctclkc2Fmcclk3En_s <= '0';
      CtrlAmctclka2Fmcclk2En_s <= '0';
      CtrlFclkaHighz_s <= '0';
      Ctrl100mhzOutEn_s <= '0';
      CtrlGatedClkEn_s <= '1';
      CtrlTclkcTxEn_s <= '0';
      CtrlTclkcRxDis_s <= '1';
      CtrlTclkbTxEn_s <= '0';
      CtrlTclkbRxDis_s <= '1';
      CtrlTclkaTxEn_s <= '0';
      CtrlTclkaRxDis_s <= '1';
      CtrlFmcclk12AmctclkdEn_s <= '0';
      CtrlFmcclk02AmctclkbEn_s <= '0';
      v2_CtrlVadjSel_s <= "00";
      CtrlVadjEn_s <= '0';
      nFpgaProg_s <= '1';
      v8_nCtrlLedGrn_s <= x"FF";
      CtrlLedBufOd_s <= '0';
      v8_nCtrlLedRed_s <= x"FF";
      v32_CustomReg0_s <= x"00000000";
      v32_CustomReg1_s <= x"00000000";
      v32_CustomReg2_s <= x"00000000";
      v32_CustomReg3_s <= x"00000000";
      v32_CustomReg4_s <= x"00000000";
      v32_CustomReg5_s <= x"00000000";
      v32_CustomReg6_s <= x"00000000";
      v32_CustomReg7_s <= x"00000000";
      v32_CustomReg8_s <= x"00000000";
      v32_CustomReg9_s <= x"00000000";
      v32_CustomReg10_s <= x"00000000";
      v32_CustomReg11_s <= x"00000000";
      v32_CustomReg12_s <= x"00000000";
      v32_CustomReg13_s <= x"00000000";
      v32_CustomReg14_s <= x"00000000";
      v32_CustomReg15_s <= x"00000000";
      v32_CustomReg16_s <= x"00000000";
      v32_CustomReg17_s <= x"00000000";
      v32_CustomReg18_s <= x"00000000";
      v32_CustomReg19_s <= x"00000000";
      v32_CustomReg20_s <= x"00000000";
      v32_CustomReg21_s <= x"00000000";
      v32_CustomReg22_s <= x"00000000";
      v32_CustomReg23_s <= x"00000000";
      v32_CustomReg24_s <= x"00000000";
      v32_CustomReg25_s <= x"00000000";
      v32_CustomReg26_s <= x"00000000";
      v32_CustomReg27_s <= x"00000000";
      v32_CustomReg28_s <= x"00000000";
      v32_CustomReg29_s <= x"00000000";
      v32_CustomReg30_s <= x"00000000";
      v32_CustomReg31_s <= x"00000000";
      PcieMsi_s <= '0';
      v32_ReservedReg0_s <= x"00000000";
      MmcI2cReleaseReq_s <= '0';
      AccessFailed_s <= '0';
      v32_Aurora_Ctrl47_s <= x"00000000";
      v32_Aurora_Ctrl811_s <= x"00000000";
      v32_Aurora_Ctrl1720_s <= x"00000000";
      v32_PPSSYNC_FmcClkVal_s <= x"00000000";
      PPSSYNC_CoreReset_s <= '0';
      PPSSYNC_RstUponRead_s <= '0';
      PPSSYNC_RstAcc_s <= '0';
      PPSSYNC_CoreEnable_s <= '0';
      MovSumEn_s <= '0';
      MovSumRst_s <= '0';  
      v32_PPSSYNC_ProgDelay_s <= x"00000000";
      v32_lvds0_ctrl_s <= x"00000000";
      v32_lvds0_value_s <= x"00000000";
      v32_lvds0_oe_s <= x"00000000";
      v32_lvds1_ctrl_s <= x"00000000";
      v32_lvds1_value_s <= x"00000000";
      v32_lvds1_oe_s <= x"00000000";
      v32_lvds2_ctrl_s <= x"00000000";
      v32_lvds2_value_s <= x"00000000";
      v32_lvds2_oe_s <= x"00000000";
      v32_lvds3_ctrl_s <= x"00000000";
      v32_lvds3_value_s <= x"00000000";
      v32_lvds3_oe_s <= x"00000000";

    else
  
      case slv_reg_write_sel is

        when OneHotVector(0,77) =>
          if (Bus2IP_BE(0) = '1') then
            v2_UartSelectMode_s <= Bus2IP_Data(4 downto 3);
          end if;

        when OneHotVector(1,77) =>
          if (Bus2IP_BE(0) = '1') then
            CtrlTclkdTxEn_s <= Bus2IP_Data(0);
          end if;
          if (Bus2IP_BE(0) = '1') then
            CtrlTclkdRxDis_s <= Bus2IP_Data(1);
          end if;
          if (Bus2IP_BE(1) = '1') then
            CtrlAmctclkc2Fmcclk3En_s <= Bus2IP_Data(10);
          end if;
          if (Bus2IP_BE(1) = '1') then
            CtrlAmctclka2Fmcclk2En_s <= Bus2IP_Data(11);
          end if;
          if (Bus2IP_BE(1) = '1') then
            CtrlFclkaHighz_s <= Bus2IP_Data(12);
          end if;
          if (Bus2IP_BE(1) = '1') then
            Ctrl100mhzOutEn_s <= Bus2IP_Data(13);
          end if;
          if (Bus2IP_BE(1) = '1') then
            CtrlGatedClkEn_s <= Bus2IP_Data(14);
          end if;
          if (Bus2IP_BE(0) = '1') then
            CtrlTclkcTxEn_s <= Bus2IP_Data(2);
          end if;
          if (Bus2IP_BE(0) = '1') then
            CtrlTclkcRxDis_s <= Bus2IP_Data(3);
          end if;
          if (Bus2IP_BE(0) = '1') then
            CtrlTclkbTxEn_s <= Bus2IP_Data(4);
          end if;
          if (Bus2IP_BE(0) = '1') then
            CtrlTclkbRxDis_s <= Bus2IP_Data(5);
          end if;
          if (Bus2IP_BE(0) = '1') then
            CtrlTclkaTxEn_s <= Bus2IP_Data(6);
          end if;
          if (Bus2IP_BE(0) = '1') then
            CtrlTclkaRxDis_s <= Bus2IP_Data(7);
          end if;
          if (Bus2IP_BE(1) = '1') then
            CtrlFmcclk12AmctclkdEn_s <= Bus2IP_Data(8);
          end if;
          if (Bus2IP_BE(1) = '1') then
            CtrlFmcclk02AmctclkbEn_s <= Bus2IP_Data(9);
          end if;

        when OneHotVector(2,77) =>
          if (Bus2IP_BE(0) = '1') then
            v2_CtrlVadjSel_s <= Bus2IP_Data(1 downto 0);
          end if;
          if (Bus2IP_BE(0) = '1') then
            CtrlVadjEn_s <= Bus2IP_Data(2);
          end if;
          if (Bus2IP_BE(0) = '1') then
            nFpgaProg_s <= Bus2IP_Data(3);
          end if;

        when OneHotVector(3,77) =>
          if (Bus2IP_BE(1) = '1') then
            v8_nCtrlLedGrn_s <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            CtrlLedBufOd_s <= Bus2IP_Data(16);
          end if;
          if (Bus2IP_BE(0) = '1') then
            v8_nCtrlLedRed_s <= Bus2IP_Data(7 downto 0);
          end if;

        when OneHotVector(6,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg0_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg0_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg0_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg0_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(7,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg1_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg1_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg1_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg1_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(8,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg2_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg2_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg2_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg2_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(9,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg3_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg3_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg3_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg3_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(10,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg4_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg4_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg4_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg4_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(11,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg5_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg5_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg5_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg5_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(12,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg6_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg6_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg6_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg6_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(13,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg7_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg7_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg7_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg7_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(14,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg8_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg8_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg8_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg8_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(15,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg9_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg9_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg9_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg9_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(16,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg10_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg10_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg10_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg10_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(17,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg11_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg11_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg11_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg11_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(18,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg12_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg12_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg12_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg12_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(19,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg13_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg13_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg13_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg13_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(20,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg14_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg14_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg14_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg14_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(21,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg15_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg15_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg15_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg15_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(22,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg16_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg16_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg16_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg16_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(23,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg17_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg17_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg17_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg17_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(24,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg18_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg18_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg18_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg18_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(25,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg19_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg19_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg19_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg19_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(26,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg20_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg20_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg20_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg20_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(27,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg21_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg21_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg21_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg21_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(28,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg22_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg22_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg22_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg22_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(29,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg23_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg23_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg23_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg23_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(30,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg24_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg24_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg24_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg24_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(31,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg25_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg25_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg25_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg25_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(32,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg26_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg26_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg26_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg26_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(33,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg27_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg27_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg27_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg27_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(34,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg28_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg28_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg28_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg28_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(35,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg29_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg29_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg29_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg29_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(36,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg30_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg30_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg30_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg30_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(37,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg31_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg31_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg31_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg31_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(38,77) =>
          if (Bus2IP_BE(0) = '1') then
            PcieMsi_s <= Bus2IP_Data(2);
          end if;

        when OneHotVector(39,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_ReservedReg0_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_ReservedReg0_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_ReservedReg0_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_ReservedReg0_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(40,77) =>
          if (Bus2IP_BE(0) = '1') then
            MmcI2cReleaseReq_s <= Bus2IP_Data(0);
          end if;

        when OneHotVector(41,77) =>
          if (Bus2IP_BE(0) = '1') then
            AccessFailed_s <= Bus2IP_Data(0);
          end if;

        when OneHotVector(44,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora_Ctrl47_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora_Ctrl47_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora_Ctrl47_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora_Ctrl47_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(48,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora_Ctrl811_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora_Ctrl811_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora_Ctrl811_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora_Ctrl811_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(52,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora_Ctrl1720_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora_Ctrl1720_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora_Ctrl1720_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora_Ctrl1720_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(56,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_PPSSYNC_FmcClkVal_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_PPSSYNC_FmcClkVal_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_PPSSYNC_FmcClkVal_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_PPSSYNC_FmcClkVal_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(57,77) =>
          if (Bus2IP_BE(0) = '1') then
            PPSSYNC_CoreReset_s <= Bus2IP_Data(0);
          end if;
          if (Bus2IP_BE(0) = '1') then
            PPSSYNC_RstUponRead_s <= Bus2IP_Data(1);
          end if;
          if (Bus2IP_BE(0) = '1') then
            PPSSYNC_RstAcc_s <= Bus2IP_Data(2);
          end if;
          if (Bus2IP_BE(0) = '1') then
            PPSSYNC_CoreEnable_s <= Bus2IP_Data(3);
          end if;
          if (Bus2IP_BE(0) = '1') then
            MovSumEn_s <= Bus2IP_Data(4);
          end if;
          if (Bus2IP_BE(0) = '1') then
            MovSumRst_s <= Bus2IP_Data(5);
          end if;

        when OneHotVector(60,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_PPSSYNC_ProgDelay_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_PPSSYNC_ProgDelay_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_PPSSYNC_ProgDelay_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_PPSSYNC_ProgDelay_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(62,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds0_ctrl_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds0_ctrl_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds0_ctrl_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds0_ctrl_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(63,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds0_value_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds0_value_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds0_value_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds0_value_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(64,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds0_oe_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds0_oe_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds0_oe_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds0_oe_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(66,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds1_ctrl_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds1_ctrl_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds1_ctrl_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds1_ctrl_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(67,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds1_value_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds1_value_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds1_value_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds1_value_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(68,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds1_oe_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds1_oe_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds1_oe_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds1_oe_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(70,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds2_ctrl_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds2_ctrl_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds2_ctrl_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds2_ctrl_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(71,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds2_value_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds2_value_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds2_value_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds2_value_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(72,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds2_oe_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds2_oe_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds2_oe_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds2_oe_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(74,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds3_ctrl_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds3_ctrl_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds3_ctrl_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds3_ctrl_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(75,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds3_value_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds3_value_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds3_value_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds3_value_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(76,77) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds3_oe_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds3_oe_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds3_oe_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds3_oe_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;
        when others =>
          null;
      end case;
    end if;
  end if;

 end process SLAVE_REG_WRITE_PROC;

 -- implement slave model software accessible register(s) read mux
SLAVE_REG_READ_PROC : process( slv_reg_read_sel, i_DaughterIoAbsent_p, i_FmcAbsent_p, i_FmcStackAbsent_p, v2_UartSelectMode_s, CtrlTclkdTxEn_s, CtrlTclkdRxDis_s, CtrlAmctclkc2Fmcclk3En_s, CtrlAmctclka2Fmcclk2En_s, CtrlFclkaHighz_s, Ctrl100mhzOutEn_s, CtrlGatedClkEn_s, CtrlTclkcTxEn_s, CtrlTclkcRxDis_s, CtrlTclkbTxEn_s, CtrlTclkbRxDis_s, CtrlTclkaTxEn_s, CtrlTclkaRxDis_s, CtrlFmcclk12AmctclkdEn_s, CtrlFmcclk02AmctclkbEn_s, v2_CtrlVadjSel_s, CtrlVadjEn_s, nFpgaProg_s, v8_nCtrlLedGrn_s, CtrlLedBufOd_s, v8_nCtrlLedRed_s, i_TclkdInStop_p, i_TclkcInStop_p, i_FmcClk2Stop_p, i_FmcClk3Stop_p, i_TclkbInStop_p, i_TclkaInStop_p, i_DDr3CceMmcmLock_p, i_DDr3SodimmMmcmLock_p, i_Qdr2MmcmLock_p, i_DpioClkStop_p, i_FmcClk0Stop_p, i_FmcClk1Stop_p, i_Ddr3CceInitDone_p, i_Ddr3SodimmInitDone_p, i_Qdr2B0InitDone_p, i_Qdr2B1InitDone_p, iv32_CustomReg0_p, iv32_CustomReg1_p, iv32_CustomReg2_p, iv32_CustomReg3_p, iv32_CustomReg4_p, iv32_CustomReg5_p, iv32_CustomReg6_p, iv32_CustomReg7_p, iv32_CustomReg8_p, iv32_CustomReg9_p, iv32_CustomReg10_p, iv32_CustomReg11_p, iv32_CustomReg12_p, iv32_CustomReg13_p, iv32_CustomReg14_p, iv32_CustomReg15_p, iv32_CustomReg16_p, iv32_CustomReg17_p, iv32_CustomReg18_p, iv32_CustomReg19_p, iv32_CustomReg20_p, iv32_CustomReg21_p, iv32_CustomReg22_p, iv32_CustomReg23_p, iv32_CustomReg24_p, iv32_CustomReg25_p, iv32_CustomReg26_p, iv32_CustomReg27_p, iv32_CustomReg28_p, iv32_CustomReg29_p, iv32_CustomReg30_p, iv32_CustomReg31_p, i_PciePresent_p, i_PcieDcmLocked_p, PcieMsi_s, v32_ReservedReg0_s, MmcI2cReleaseReq_s, i_MmcI2cReleaseAck_p, AccessFailed_s, iv32_LastReadAddr_p, iv32_Aurora_CoreId47_p, iv32_Aurora_Ctrl47_p, iv32_Aurora_RxDataCnt47_p, iv32_Aurora_TxDataCnt47_p, iv32_Aurora_CoreId811_p, iv32_Aurora_Ctrl811_p, iv32_Aurora_RxDataCnt811_p, iv32_Aurora_TxDataCnt811_p, iv32_Aurora_CoreId1720_p, iv32_Aurora_Ctrl1720_p, iv32_Aurora_RxDataCnt1720_p, iv32_Aurora_TxDataCnt1720_p, iv32_PPSSYNC_CoreIdVers_p, v32_PPSSYNC_FmcClkVal_s, PPSSYNC_CoreReset_s, PPSSYNC_RstUponRead_s, PPSSYNC_RstAcc_s, PPSSYNC_CoreEnable_s, MovSumEn_s, MovSumRst_s, iv32_PPSSYNC_PpsCnt_p, iv32_PPSSYNC_DiffAcc_p, v32_PPSSYNC_ProgDelay_s, iv32_lvds0_coreid_p, v32_lvds0_ctrl_s, iv32_lvds0_value_p, v32_lvds0_oe_s, iv32_lvds1_coreid_p, v32_lvds1_ctrl_s, iv32_lvds1_value_p, v32_lvds1_oe_s, iv32_lvds2_coreid_p, v32_lvds2_ctrl_s, iv32_lvds2_value_p, v32_lvds2_oe_s, iv32_lvds3_coreid_p, v32_lvds3_ctrl_s, iv32_lvds3_value_p, v32_lvds3_oe_s) is
 begin
 	o_PPSSYNC_DiffAccRead_p <= '0';
   case slv_reg_read_sel is

        when OneHotVector(0,77) =>
          slv_ip2bus_data(0) <= i_DaughterIoAbsent_p;
          slv_ip2bus_data(1) <= i_FmcAbsent_p;
          slv_ip2bus_data(2) <= i_FmcStackAbsent_p;
          slv_ip2bus_data(31 downto 5) <= "000000000000000000000000000";
          slv_ip2bus_data(4 downto 3) <= v2_UartSelectMode_s;

        when OneHotVector(1,77) =>
          slv_ip2bus_data(0) <= CtrlTclkdTxEn_s;
          slv_ip2bus_data(1) <= CtrlTclkdRxDis_s;
          slv_ip2bus_data(10) <= CtrlAmctclkc2Fmcclk3En_s;
          slv_ip2bus_data(11) <= CtrlAmctclka2Fmcclk2En_s;
          slv_ip2bus_data(12) <= CtrlFclkaHighz_s;
          slv_ip2bus_data(13) <= Ctrl100mhzOutEn_s;
          slv_ip2bus_data(14) <= CtrlGatedClkEn_s;
          slv_ip2bus_data(2) <= CtrlTclkcTxEn_s;
          slv_ip2bus_data(3) <= CtrlTclkcRxDis_s;
          slv_ip2bus_data(31 downto 15) <= "00000000000000000";
          slv_ip2bus_data(4) <= CtrlTclkbTxEn_s;
          slv_ip2bus_data(5) <= CtrlTclkbRxDis_s;
          slv_ip2bus_data(6) <= CtrlTclkaTxEn_s;
          slv_ip2bus_data(7) <= CtrlTclkaRxDis_s;
          slv_ip2bus_data(8) <= CtrlFmcclk12AmctclkdEn_s;
          slv_ip2bus_data(9) <= CtrlFmcclk02AmctclkbEn_s;

        when OneHotVector(2,77) =>
          slv_ip2bus_data(1 downto 0) <= v2_CtrlVadjSel_s;
          slv_ip2bus_data(2) <= CtrlVadjEn_s;
          slv_ip2bus_data(3) <= nFpgaProg_s;
          slv_ip2bus_data(31 downto 4) <= "0000000000000000000000000000";

        when OneHotVector(3,77) =>
          slv_ip2bus_data(15 downto 8) <= v8_nCtrlLedGrn_s;
          slv_ip2bus_data(16) <= CtrlLedBufOd_s;
          slv_ip2bus_data(31 downto 17) <= "000000000000000";
          slv_ip2bus_data(7 downto 0) <= v8_nCtrlLedRed_s;

        when OneHotVector(4,77) =>
          slv_ip2bus_data(0) <= i_TclkdInStop_p;
          slv_ip2bus_data(1) <= i_TclkcInStop_p;
          slv_ip2bus_data(10) <= i_FmcClk2Stop_p;
          slv_ip2bus_data(11) <= i_FmcClk3Stop_p;
          slv_ip2bus_data(2) <= i_TclkbInStop_p;
          slv_ip2bus_data(3) <= i_TclkaInStop_p;
          slv_ip2bus_data(31 downto 12) <= x"00000";
          slv_ip2bus_data(4) <= i_DDr3CceMmcmLock_p;
          slv_ip2bus_data(5) <= i_DDr3SodimmMmcmLock_p;
          slv_ip2bus_data(6) <= i_Qdr2MmcmLock_p;
          slv_ip2bus_data(7) <= i_DpioClkStop_p;
          slv_ip2bus_data(8) <= i_FmcClk0Stop_p;
          slv_ip2bus_data(9) <= i_FmcClk1Stop_p;

        when OneHotVector(5,77) =>
          slv_ip2bus_data(0) <= i_Ddr3CceInitDone_p;
          slv_ip2bus_data(1) <= i_Ddr3SodimmInitDone_p;
          slv_ip2bus_data(2) <= i_Qdr2B0InitDone_p;
          slv_ip2bus_data(3) <= i_Qdr2B1InitDone_p;
          slv_ip2bus_data(31 downto 4) <= "0000000000000000000000000000";

        when OneHotVector(6,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg0_p;

        when OneHotVector(7,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg1_p;

        when OneHotVector(8,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg2_p;

        when OneHotVector(9,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg3_p;

        when OneHotVector(10,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg4_p;

        when OneHotVector(11,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg5_p;

        when OneHotVector(12,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg6_p;

        when OneHotVector(13,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg7_p;

        when OneHotVector(14,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg8_p;

        when OneHotVector(15,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg9_p;

        when OneHotVector(16,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg10_p;

        when OneHotVector(17,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg11_p;

        when OneHotVector(18,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg12_p;

        when OneHotVector(19,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg13_p;

        when OneHotVector(20,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg14_p;

        when OneHotVector(21,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg15_p;

        when OneHotVector(22,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg16_p;

        when OneHotVector(23,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg17_p;

        when OneHotVector(24,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg18_p;

        when OneHotVector(25,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg19_p;

        when OneHotVector(26,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg20_p;

        when OneHotVector(27,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg21_p;

        when OneHotVector(28,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg22_p;

        when OneHotVector(29,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg23_p;

        when OneHotVector(30,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg24_p;

        when OneHotVector(31,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg25_p;

        when OneHotVector(32,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg26_p;

        when OneHotVector(33,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg27_p;

        when OneHotVector(34,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg28_p;

        when OneHotVector(35,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg29_p;

        when OneHotVector(36,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg30_p;

        when OneHotVector(37,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg31_p;

        when OneHotVector(38,77) =>
          slv_ip2bus_data(0) <= i_PciePresent_p;
          slv_ip2bus_data(1) <= i_PcieDcmLocked_p;
          slv_ip2bus_data(2) <= PcieMsi_s;
          slv_ip2bus_data(31 downto 3) <= "00000000000000000000000000000";

        when OneHotVector(39,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_ReservedReg0_s;

        when OneHotVector(40,77) =>
          slv_ip2bus_data(0) <= MmcI2cReleaseReq_s;
          slv_ip2bus_data(1) <= i_MmcI2cReleaseAck_p;
          slv_ip2bus_data(31 downto 2) <= "000000000000000000000000000000";

        when OneHotVector(41,77) =>
          slv_ip2bus_data(0) <= AccessFailed_s;
          slv_ip2bus_data(31 downto 1) <= "0000000000000000000000000000000";

        when OneHotVector(42,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_LastReadAddr_p;

        when OneHotVector(43,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_CoreId47_p;

        when OneHotVector(44,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_Ctrl47_p;

        when OneHotVector(45,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_RxDataCnt47_p;

        when OneHotVector(46,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_TxDataCnt47_p;

        when OneHotVector(47,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_CoreId811_p;

        when OneHotVector(48,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_Ctrl811_p;

        when OneHotVector(49,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_RxDataCnt811_p;

        when OneHotVector(50,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_TxDataCnt811_p;

        when OneHotVector(51,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_CoreId1720_p;

        when OneHotVector(52,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_Ctrl1720_p;

        when OneHotVector(53,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_RxDataCnt1720_p;

        when OneHotVector(54,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora_TxDataCnt1720_p;

        when OneHotVector(55,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_PPSSYNC_CoreIdVers_p;

        when OneHotVector(56,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_PPSSYNC_FmcClkVal_s;

        when OneHotVector(57,77) =>
          slv_ip2bus_data(0) <= PPSSYNC_CoreReset_s;
          slv_ip2bus_data(1) <= PPSSYNC_RstUponRead_s;
          slv_ip2bus_data(2) <= PPSSYNC_RstAcc_s;
          slv_ip2bus_data(3) <= PPSSYNC_CoreEnable_s;
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(4) <= MovSumEn_s;
          slv_ip2bus_data(5) <= MovSumRst_s;
          slv_ip2bus_data(7 downto 6) <= "00";

        when OneHotVector(58,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_PPSSYNC_PpsCnt_p;

        when OneHotVector(59,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_PPSSYNC_DiffAcc_p;
          o_PPSSYNC_DiffAccRead_p <= '1';

        when OneHotVector(60,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_PPSSYNC_ProgDelay_s;

        when OneHotVector(61,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds0_coreid_p;

        when OneHotVector(62,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds0_ctrl_s;

        when OneHotVector(63,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds0_value_p;

        when OneHotVector(64,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds0_oe_s;

        when OneHotVector(65,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds1_coreid_p;

        when OneHotVector(66,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds1_ctrl_s;

        when OneHotVector(67,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds1_value_p;

        when OneHotVector(68,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds1_oe_s;

        when OneHotVector(69,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds2_coreid_p;

        when OneHotVector(70,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds2_ctrl_s;

        when OneHotVector(71,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds2_value_p;

        when OneHotVector(72,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds2_oe_s;

        when OneHotVector(73,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds3_coreid_p;

        when OneHotVector(74,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds3_ctrl_s;

        when OneHotVector(75,77) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds3_value_p;

        when OneHotVector(76,77) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds3_oe_s;
        when others =>
          slv_ip2bus_data <= (others => '0');
      end case;

 end process SLAVE_REG_READ_PROC;

------------------------------------------
-- drive IP to Bus signals
------------------------------------------
IP2Bus_Data  <= slv_ip2bus_data when slv_read_ack = '1' else (others => '0');
IP2Bus_WrAck <= slv_write_ack;
IP2Bus_RdAck <= slv_read_ack;
IP2Bus_Error <= '0';

------------------------------------------
-- Output assignments
------------------------------------------
ov2_UartSelectMode_p <= v2_UartSelectMode_s;
o_CtrlTclkdTxEn_p <= CtrlTclkdTxEn_s;
o_CtrlTclkdRxDis_p <= CtrlTclkdRxDis_s;
o_CtrlAmctclkc2Fmcclk3En_p <= CtrlAmctclkc2Fmcclk3En_s;
o_CtrlAmctclka2Fmcclk2En_p <= CtrlAmctclka2Fmcclk2En_s;
o_CtrlFclkaHighz_p <= CtrlFclkaHighz_s;
o_Ctrl100mhzOutEn_p <= Ctrl100mhzOutEn_s;
o_CtrlGatedClkEn_p <= CtrlGatedClkEn_s;
o_CtrlTclkcTxEn_p <= CtrlTclkcTxEn_s;
o_CtrlTclkcRxDis_p <= CtrlTclkcRxDis_s;
o_CtrlTclkbTxEn_p <= CtrlTclkbTxEn_s;
o_CtrlTclkbRxDis_p <= CtrlTclkbRxDis_s;
o_CtrlTclkaTxEn_p <= CtrlTclkaTxEn_s;
o_CtrlTclkaRxDis_p <= CtrlTclkaRxDis_s;
o_CtrlFmcclk12AmctclkdEn_p <= CtrlFmcclk12AmctclkdEn_s;
o_CtrlFmcclk02AmctclkbEn_p <= CtrlFmcclk02AmctclkbEn_s;
ov2_CtrlVadjSel_p <= v2_CtrlVadjSel_s;
o_CtrlVadjEn_p <= CtrlVadjEn_s;
o_nFpgaProg_p <= nFpgaProg_s;
ov8_nCtrlLedGrn_p <= v8_nCtrlLedGrn_s;
o_CtrlLedBufOd_p <= CtrlLedBufOd_s;
ov8_nCtrlLedRed_p <= v8_nCtrlLedRed_s;
ov32_CustomReg0_p <= v32_CustomReg0_s;
ov32_CustomReg1_p <= v32_CustomReg1_s;
ov32_CustomReg2_p <= v32_CustomReg2_s;
ov32_CustomReg3_p <= v32_CustomReg3_s;
ov32_CustomReg4_p <= v32_CustomReg4_s;
ov32_CustomReg5_p <= v32_CustomReg5_s;
ov32_CustomReg6_p <= v32_CustomReg6_s;
ov32_CustomReg7_p <= v32_CustomReg7_s;
ov32_CustomReg8_p <= v32_CustomReg8_s;
ov32_CustomReg9_p <= v32_CustomReg9_s;
ov32_CustomReg10_p <= v32_CustomReg10_s;
ov32_CustomReg11_p <= v32_CustomReg11_s;
ov32_CustomReg12_p <= v32_CustomReg12_s;
ov32_CustomReg13_p <= v32_CustomReg13_s;
ov32_CustomReg14_p <= v32_CustomReg14_s;
ov32_CustomReg15_p <= v32_CustomReg15_s;
ov32_CustomReg16_p <= v32_CustomReg16_s;
ov32_CustomReg17_p <= v32_CustomReg17_s;
ov32_CustomReg18_p <= v32_CustomReg18_s;
ov32_CustomReg19_p <= v32_CustomReg19_s;
ov32_CustomReg20_p <= v32_CustomReg20_s;
ov32_CustomReg21_p <= v32_CustomReg21_s;
ov32_CustomReg22_p <= v32_CustomReg22_s;
ov32_CustomReg23_p <= v32_CustomReg23_s;
ov32_CustomReg24_p <= v32_CustomReg24_s;
ov32_CustomReg25_p <= v32_CustomReg25_s;
ov32_CustomReg26_p <= v32_CustomReg26_s;
ov32_CustomReg27_p <= v32_CustomReg27_s;
ov32_CustomReg28_p <= v32_CustomReg28_s;
ov32_CustomReg29_p <= v32_CustomReg29_s;
ov32_CustomReg30_p <= v32_CustomReg30_s;
ov32_CustomReg31_p <= v32_CustomReg31_s;
o_PcieMsi_p <= PcieMsi_s;
ov32_ReservedReg0_p <= v32_ReservedReg0_s;
o_MmcI2cReleaseReq_p <= MmcI2cReleaseReq_s;
o_AccessFailed_p <= AccessFailed_s;
ov32_Aurora_Ctrl47_p <= v32_Aurora_Ctrl47_s;
ov32_Aurora_Ctrl811_p <= v32_Aurora_Ctrl811_s;
ov32_Aurora_Ctrl1720_p <= v32_Aurora_Ctrl1720_s;
ov32_PPSSYNC_FmcClkVal_p <= v32_PPSSYNC_FmcClkVal_s;
o_PPSSYNC_CoreReset_p <= PPSSYNC_CoreReset_s;
o_PPSSYNC_RstUponRead_p <= PPSSYNC_RstUponRead_s;
o_PPSSYNC_RstAcc_p <= PPSSYNC_RstAcc_s;
o_PPSSYNC_CoreEnable_p <= PPSSYNC_CoreEnable_s;
o_PPSSYNC_MovSumEn_p <= MovSumEn_s;
o_PPSSYNC_MovSumRst_p <= MovSumRst_s;
ov32_PPSSYNC_ProgDelay_p <= v32_PPSSYNC_ProgDelay_s;
ov32_lvds0_ctrl_p <= v32_lvds0_ctrl_s;
ov32_lvds0_value_p <= v32_lvds0_value_s;
ov32_lvds0_oe_p <= v32_lvds0_oe_s;
ov32_lvds1_ctrl_p <= v32_lvds1_ctrl_s;
ov32_lvds1_value_p <= v32_lvds1_value_s;
ov32_lvds1_oe_p <= v32_lvds1_oe_s;
ov32_lvds2_ctrl_p <= v32_lvds2_ctrl_s;
ov32_lvds2_value_p <= v32_lvds2_value_s;
ov32_lvds2_oe_p <= v32_lvds2_oe_s;
ov32_lvds3_ctrl_p <= v32_lvds3_ctrl_s;
ov32_lvds3_value_p <= v32_lvds3_value_s;
ov32_lvds3_oe_p <= v32_lvds3_oe_s;

end IMP;

