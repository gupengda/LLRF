--------------------------------------------------------------------------------
-- Filename:          lyt_axi_mi250.vhd
-- Version:           v1_00_a
-- Description:       User Logic implementation module
-- Generated by:      khalid.bensadek
-- Date:              2012-11-06 09:40:46
-- Generated:         using LyrtechRD REGGENUTIL based on Xilinx IPIF Wizard.
-- VHDL Standard:     VHDL'93
------------------------------------------------------------------------------
-- Copyright (c) 2001-2012 LYRtech RD Inc.  All rights reserved.
------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use ieee.std_logic_misc.all;

library unisim;
use unisim.vcomponents.all;

library lyt_axi_mi250_v1_00_a;
use lyt_axi_mi250_v1_00_a.axi_mi250;
use lyt_axi_mi250_v1_00_a.mi250_wrapper_p.all;

entity lyt_axi_mi250 is
generic
(
  -- ADD USER GENERICS BELOW THIS LINE ---------------
  	ADC_CLKIN_FREQ_MHZ              : real    := 250.0;
    ADC_CLKFBOUT_MULT_F             : real    := 8.0;
    ADC_DIVCLK_DIVIDE               : integer := 2;
    ADC_CLKOUT0_DIVIDE_F            : real    := 4.0;
  	C_REFCLK_FREQ_MHZ               : integer := 100;
  -- ADD USER GENERICS ABOVE THIS LINE ---------------

  -- DO NOT EDIT BELOW THIS LINE ---------------------
  -- Bus protocol parameters, do not add to or delete
      C_S_AXI_DATA_WIDTH             : integer              := 32;
      C_S_AXI_ADDR_WIDTH             : integer              := 32;
      C_S_AXI_MIN_SIZE               : std_logic_vector     := X"000001FF";
      C_USE_WSTRB                    : integer              := 0;
      C_DPHASE_TIMEOUT               : integer              := 8;
      C_BASEADDR                     : std_logic_vector     := X"FFFFFFFF";
      C_HIGHADDR                     : std_logic_vector     := X"00000000";
      C_FAMILY                       : string               := "virtex6"
  -- DO NOT EDIT ABOVE THIS LINE ---------------------
);
port
(
  -- User ports
  i_RefClk200MHz_p             : in std_logic;

  -- SPI PLL
  o_Mi250PllScl_p              : out std_logic;
  o_Mi250PllMosi_p             : out std_logic;
  i_Mi250PllMiso_p             : in  std_logic;
  o_nMi250PllCs_p              : out std_logic;

  -- SPI shared ADC
  o_Mi250AdcScl_p              : out std_logic;
  o_Mi250AdcMosi_p             : out std_logic;
  i_Mi250AdcMisoAb_p           : in  std_logic;
  i_Mi250AdcMisoCd_p           : in  std_logic;
  i_Mi250AdcMisoEf_p           : in  std_logic;
  i_Mi250AdcMisoGh_p           : in  std_logic;
  o_nMi250AdcCsAb_p            : out std_logic;
  o_nMi250AdcCsCd_p            : out std_logic;
  o_nMi250AdcCsEf_p            : out std_logic;
  o_nMi250AdcCsGh_p            : out std_logic;
  o_Mi250AdcRst_p              : out std_logic;

  -- PLL control
  o_Mi250PllRefEn_p            : out std_logic;
  i_Mi250PllStatus_p           : in std_logic;
  o_Mi250PllFunction_p         : out std_logic;
  o_Mi250VcoPwrEn_p            : out std_logic;

  -- Monitor interrupt
  i_nMi250MonInt_p             : in  std_logic;

  -- Trigger
  i_Mi250TrigToFpga_p          : in  std_logic;

  -- Clocks for test
  i_pMi250ClkToFpga_p          : in  std_logic;
  i_nMi250ClkToFpga_p          : in  std_logic;
  i_pMi250ExternClk_p          : in  std_logic;
  i_nMi250ExternClk_p          : in  std_logic;

  -- ADC interface clocks
  idp_Mi250AdcClkAB_p          : in std_logic;
  idn_Mi250AdcClkAB_p          : in std_logic;
  idp_Mi250AdcClkCD_p          : in std_logic;
  idn_Mi250AdcClkCD_p          : in std_logic;
  idp_Mi250AdcClkEF_p          : in std_logic;
  idn_Mi250AdcClkEF_p          : in std_logic;
  idp_Mi250AdcClkGH_p          : in std_logic;
  idn_Mi250AdcClkGH_p          : in std_logic;

  -- ADC interface data
  iv7dp_Mi250AdcAData_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250AdcAData_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250AdcBData_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250AdcBData_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250AdcCData_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250AdcCData_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250AdcDData_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250AdcDData_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250AdcEData_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250AdcEData_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250AdcFData_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250AdcFData_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250AdcGData_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250AdcGData_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250AdcHData_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250AdcHData_p        : in std_logic_vector(6 downto 0);

  -- ADC data clock output
  o_Mi250AdcDataClkOut_p       : out std_logic;

  -- ADC data outputs
  ov14_Mi250AdcADataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250AdcBDataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250AdcCDataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250AdcDDataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250AdcEDataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250AdcFDataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250AdcGDataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250AdcHDataOut_p      : out std_logic_vector(13 downto 0);

  -- ADC data valid outputs
  o_Mi250AdcADataValid_p       : out std_logic;
  o_Mi250AdcBDataValid_p       : out std_logic;
  o_Mi250AdcCDataValid_p       : out std_logic;
  o_Mi250AdcDDataValid_p       : out std_logic;
  o_Mi250AdcEDataValid_p       : out std_logic;
  o_Mi250AdcFDataValid_p       : out std_logic;
  o_Mi250AdcGDataValid_p       : out std_logic;
  o_Mi250AdcHDataValid_p       : out std_logic;
  --  Trigger output
  o_Mi250AdcTrigout_p  		   : out std_logic;

  -- DO NOT EDIT BELOW THIS LINE ---------------------
  -- Bus protocol ports, do not add to or delete
     S_AXI_ACLK                     : in  std_logic;
     S_AXI_ARESETN                  : in  std_logic;
     S_AXI_AWADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
     S_AXI_AWVALID                  : in  std_logic;
     S_AXI_WDATA                    : in  std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
     S_AXI_WSTRB                    : in  std_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);
     S_AXI_WVALID                   : in  std_logic;
     S_AXI_BREADY                   : in  std_logic;
     S_AXI_ARADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
     S_AXI_ARVALID                  : in  std_logic;
     S_AXI_RREADY                   : in  std_logic;
     S_AXI_ARREADY                  : out std_logic;
     S_AXI_RDATA                    : out std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
     S_AXI_RRESP                    : out std_logic_vector(1 downto 0);
     S_AXI_RVALID                   : out std_logic;
     S_AXI_WREADY                   : out std_logic;
     S_AXI_BRESP                    : out std_logic_vector(1 downto 0);
     S_AXI_BVALID                   : out std_logic;
     S_AXI_AWREADY                  : out std_logic
  -- DO NOT EDIT ABOVE THIS LINE --
);

 attribute MAX_FANOUT                     : string;
 attribute SIGIS                          : string;
 attribute MAX_FANOUT of S_AXI_ACLK       : signal is "10000";
 attribute MAX_FANOUT of S_AXI_ARESETN    : signal is "10000";
 attribute SIGIS of S_AXI_ACLK            : signal is "Clk";
 attribute SIGIS of S_AXI_ARESETN         : signal is "Rst";

end entity lyt_axi_mi250;

------------------------------------------------------------------------------
-- Architecture section
------------------------------------------------------------------------------

architecture arch of lyt_axi_mi250 is

 ----------------------------------------
 -- Signals declaration
 ----------------------------------------
 -- SPI control
  signal v32_Spi2PlbData_s              : std_logic_vector(31 downto 0);
  signal v32_Plb2SpiData_s              : std_logic_vector(31 downto 0);
  signal v9_PlbRegWriteSel_s            : std_logic_vector(8 downto 0);
  signal v9_PlbRegReadSel_s             : std_logic_vector(8 downto 0);

  signal CoreResetPulse_s              : std_logic;
  signal AdcSpiReset_s                 : std_logic;
  signal SoftwareTrig_s                : std_logic;
  signal v2_TriggerMode_s              : std_logic_vector(1 downto 0);
  signal ChArmed_s                     : std_logic;
  signal v2_TestMode_s                 : std_logic_vector(1 downto 0);
  signal PllStatus_s                     : std_logic;
  signal PllFunction_s                     : std_logic;
  signal PllRefEn_s                     : std_logic;
  signal VcoPwrEn_s                     : std_logic;
  signal SpiUpdaterBusy_s                     : std_logic;
  signal SpiBusy_s                     : std_logic;
  signal SpiReq2_s                     : std_logic;
  signal SpiGnt2_s                     : std_logic;
  signal SpiAck2_s                     : std_logic;
  signal AdcAbMmcmRst_s                : std_logic;
  signal AdcAbMmcmLocked_s             : std_logic;
  signal AdcCdMmcmRst_s                : std_logic;
  signal AdcCdMmcmLocked_s             : std_logic;
  signal AdcEfMmcmRst_s                : std_logic;
  signal AdcEfMmcmLocked_s             : std_logic;
  signal AdcGhMmcmRst_s                : std_logic;
  signal AdcGhMmcmLocked_s             : std_logic;

  signal v16_ExternClkFreq_s           : std_logic_vector(15 downto 0);
  signal v16_ClkToFpgaFreq_s           : std_logic_vector(15 downto 0);
  signal v16_AdcAbClkFreq_s            : std_logic_vector(15 downto 0);
  signal v16_AdcCdClkFreq_s            : std_logic_vector(15 downto 0);
  signal v16_AdcEfClkFreq_s            : std_logic_vector(15 downto 0);
  signal v16_AdcGhClkFreq_s            : std_logic_vector(15 downto 0);

  signal v5_AdcABIdelayValue_s        : std_logic_vector(4 downto 0);
  signal v5_AdcCDIdelayValue_s        : std_logic_vector(4 downto 0);
  signal v5_AdcEFIdelayValue_s        : std_logic_vector(4 downto 0);
  signal v5_AdcGHIdelayValue_s        : std_logic_vector(4 downto 0);
  signal v5_AdcABClkIdelayValue_s     : std_logic_vector(4 downto 0);
  signal v5_AdcCDClkIdelayValue_s     : std_logic_vector(4 downto 0);
  signal v5_AdcEFClkIdelayValue_s     : std_logic_vector(4 downto 0);
  signal v5_AdcGHClkIdelayValue_s     : std_logic_vector(4 downto 0);

  signal v2_AdcAbPatternError_s        : std_logic_vector(1 downto 0);
  signal v2_AdcCdPatternError_s        : std_logic_vector(1 downto 0);
  signal v2_AdcEfPatternError_s        : std_logic_vector(1 downto 0);
  signal v2_AdcGhPatternError_s        : std_logic_vector(1 downto 0);

  -- User signals
  signal v8_SignalStretch_s			      : std_logic_vector(7 downto 0);
  signal CoreReset_s				          : std_logic;

  -- ADC clocks
  signal AdcAbClkBufr_s                : std_logic;
  signal AdcCdClkBufr_s                : std_logic;
  signal AdcEfClkBufr_s                : std_logic;
  signal AdcGhClkBufr_s                : std_logic;
  signal AdcAbClkOut_s                 : std_logic;
  signal AdcCdClkOut_s                 : std_logic;
  signal AdcEfClkOut_s                 : std_logic;
  signal AdcGhClkOut_s                 : std_logic;

  -- Clock testing signals
  signal ClkToFpga_s                    : std_logic;
  signal ExternClk_s                    : std_logic;
  signal ClkToFpgaBufr_s                : std_logic;
  signal ExternClkBufr_s                : std_logic;
  
  ----------------------------------------
  -- Attribute declaration
  ----------------------------------------
  attribute MAX_FANOUT of CoreReset_s   : signal is "10000";
  
begin

 ------------------------------------------
 -- instantiate your component here!
 ------------------------------------------
 mi250Top_u0 : mi250_top
  port map(
    -- Global ports
    i_SystemClk_p               => S_AXI_ACLK,
    i_RefClk200MHz_p            => i_RefClk200MHz_p,
    i_Rst_p                     => CoreReset_s,

    -- SPI PLL
    o_Mi250PllScl_p             => o_Mi250PllScl_p,
    o_Mi250PllMosi_p            => o_Mi250PllMosi_p,
    i_Mi250PllMiso_p            => i_Mi250PllMiso_p,
    o_nMi250PllCs_p             => o_nMi250PllCs_p,

    -- SPI shared ADC
    o_Mi250AdcScl_p             => o_Mi250AdcScl_p,
    o_Mi250AdcMosi_p            => o_Mi250AdcMosi_p,
    i_Mi250AdcMisoAb_p          => i_Mi250AdcMisoAb_p,
    i_Mi250AdcMisoCd_p          => i_Mi250AdcMisoCd_p,
    i_Mi250AdcMisoEf_p          => i_Mi250AdcMisoEf_p,
    i_Mi250AdcMisoGh_p          => i_Mi250AdcMisoGh_p,
    o_nMi250AdcCsAb_p           => o_nMi250AdcCsAb_p,
    o_nMi250AdcCsCd_p           => o_nMi250AdcCsCd_p,
    o_nMi250AdcCsEf_p           => o_nMi250AdcCsEf_p,
    o_nMi250AdcCsGh_p           => o_nMi250AdcCsGh_p,
    o_Mi250AdcRst_p             => o_Mi250AdcRst_p,

    -- PLL control
    i_Mi250PllStatus_p          => i_Mi250PllStatus_p,
    o_Mi250PllFunction_p        => o_Mi250PllFunction_p,

    -- Monitor interrupt
    i_nMi250MonInt_p            => i_nMi250MonInt_p,

    -- Trigger
    i_Mi250TrigToFpga_p         => i_Mi250TrigToFpga_p,

    -- ADC interface clocks
    idp_Mi250AdcClkAB_p         => idp_Mi250AdcClkAB_p,
    idn_Mi250AdcClkAB_p         => idn_Mi250AdcClkAB_p,
    idp_Mi250AdcClkCD_p         => idp_Mi250AdcClkCD_p,
    idn_Mi250AdcClkCD_p         => idn_Mi250AdcClkCD_p,
    idp_Mi250AdcClkEF_p         => idp_Mi250AdcClkEF_p,
    idn_Mi250AdcClkEF_p         => idn_Mi250AdcClkEF_p,
    idp_Mi250AdcClkGH_p         => idp_Mi250AdcClkGH_p,
    idn_Mi250AdcClkGH_p         => idn_Mi250AdcClkGH_p,

    -- ADC interface data
    iv7dp_Mi250AdcAData_p       => iv7dp_Mi250AdcAData_p,
    iv7dn_Mi250AdcAData_p       => iv7dn_Mi250AdcAData_p,
    iv7dp_Mi250AdcBData_p       => iv7dp_Mi250AdcBData_p,
    iv7dn_Mi250AdcBData_p       => iv7dn_Mi250AdcBData_p,
    iv7dp_Mi250AdcCData_p       => iv7dp_Mi250AdcCData_p,
    iv7dn_Mi250AdcCData_p       => iv7dn_Mi250AdcCData_p,
    iv7dp_Mi250AdcDData_p       => iv7dp_Mi250AdcDData_p,
    iv7dn_Mi250AdcDData_p       => iv7dn_Mi250AdcDData_p,
    iv7dp_Mi250AdcEData_p       => iv7dp_Mi250AdcEData_p,
    iv7dn_Mi250AdcEData_p       => iv7dn_Mi250AdcEData_p,
    iv7dp_Mi250AdcFData_p       => iv7dp_Mi250AdcFData_p,
    iv7dn_Mi250AdcFData_p       => iv7dn_Mi250AdcFData_p,
    iv7dp_Mi250AdcGData_p       => iv7dp_Mi250AdcGData_p,
    iv7dn_Mi250AdcGData_p       => iv7dn_Mi250AdcGData_p,
    iv7dp_Mi250AdcHData_p       => iv7dp_Mi250AdcHData_p,
    iv7dn_Mi250AdcHData_p       => iv7dn_Mi250AdcHData_p,

    iv5_AdcABIdelayValue_p      => v5_AdcABIdelayValue_s,
    iv5_AdcCDIdelayValue_p      => v5_AdcCDIdelayValue_s,
    iv5_AdcEFIdelayValue_p      => v5_AdcEFIdelayValue_s,
    iv5_AdcGHIdelayValue_p      => v5_AdcGHIdelayValue_s,
    iv5_AdcABClkIdelayValue_p   => v5_AdcABClkIdelayValue_s,
    iv5_AdcCDClkIdelayValue_p   => v5_AdcCDClkIdelayValue_s,
    iv5_AdcEFClkIdelayValue_p   => v5_AdcEFClkIdelayValue_s,
    iv5_AdcGHClkIdelayValue_p   => v5_AdcGHClkIdelayValue_s,

    ov2_AdcAbPatternError_p     => v2_AdcAbPatternError_s,
    ov2_AdcCdPatternError_p     => v2_AdcCdPatternError_s,
    ov2_AdcEfPatternError_p     => v2_AdcEfPatternError_s,
    ov2_AdcGhPatternError_p     => v2_AdcGhPatternError_s,

    -- ADC interface control signals
    i_ChArmed_p                 => ChArmed_s,
    iv2_TriggerMode_p           => v2_TriggerMode_s,
    iv2_TestMode_p              => v2_TestMode_s,
    i_SoftwareTrig_p            => SoftwareTrig_s,

    -- ADC data outputs
    ov14_Mi250AdcADataOut_p     => ov14_Mi250AdcADataOut_p,
    ov14_Mi250AdcBDataOut_p     => ov14_Mi250AdcBDataOut_p,
    ov14_Mi250AdcCDataOut_p     => ov14_Mi250AdcCDataOut_p,
    ov14_Mi250AdcDDataOut_p     => ov14_Mi250AdcDDataOut_p,
    ov14_Mi250AdcEDataOut_p     => ov14_Mi250AdcEDataOut_p,
    ov14_Mi250AdcFDataOut_p     => ov14_Mi250AdcFDataOut_p,
    ov14_Mi250AdcGDataOut_p     => ov14_Mi250AdcGDataOut_p,
    ov14_Mi250AdcHDataOut_p     => ov14_Mi250AdcHDataOut_p,

    -- ADC data valid outputs
    o_Mi250AdcADataValid_p      => o_Mi250AdcADataValid_p,
    o_Mi250AdcBDataValid_p      => o_Mi250AdcBDataValid_p,
    o_Mi250AdcCDataValid_p      => o_Mi250AdcCDataValid_p,
    o_Mi250AdcDDataValid_p      => o_Mi250AdcDDataValid_p,
    o_Mi250AdcEDataValid_p      => o_Mi250AdcEDataValid_p,
    o_Mi250AdcFDataValid_p      => o_Mi250AdcFDataValid_p,
    o_Mi250AdcGDataValid_p      => o_Mi250AdcGDataValid_p,
    o_Mi250AdcHDataValid_p      => o_Mi250AdcHDataValid_p,

    o_Mi250AdcTrigout_p			=> o_Mi250AdcTrigout_p,

    -- ADC Clock outputs (from BUFR)
    o_AdcAbClkBufr_p            => AdcAbClkBufr_s,
    o_AdcCdClkBufr_p            => AdcCdClkBufr_s,
    o_AdcEfClkBufr_p            => AdcEfClkBufr_s,
    o_AdcGhClkBufr_p            => AdcGhClkBufr_s,

    -- ADC Global clocks (from BUFG)
    i_AdcAbClkBufg_p            => AdcAbClkOut_s,
    i_AdcCdClkBufg_p            => AdcCdClkOut_s,
    i_AdcEfClkBufg_p            => AdcEfClkOut_s,
    i_AdcGhClkBufg_p            => AdcGhClkOut_s,

    -- TO user logic
    o_SpiBusy_p                 => SpiBusy_s,

    -- External module 2 interface
    iv9_writeaddr2_p            => v9_PlbRegWriteSel_s,
    iv9_readaddr2_p             => v9_PlbRegReadSel_s,
    i_req2_p                    => SpiReq2_s,
    iv32_din2_p                 => v32_Plb2SpiData_s,
    o_gnt2_p                    => SpiGnt2_s,
    ov32_dout2_p                => v32_Spi2PlbData_s,
    o_ack2_p                    => SpiAck2_s,

    --From/To custom logic
    i_AdcSpiReset_p             => AdcSpiReset_s,

    o_PllStatus_p               => PllStatus_s,
    i_PllFunction_p             => PllFunction_s
  );
  ------------------------------------------------------
  -- Frequency counter for testing Clock-to-FPGA
  ------------------------------------------------------

  ClkToFpga_IBUFDS : IBUFDS
  port map
  (
    O    => ClkToFpga_s,
    I    => i_pMi250ClkToFpga_p,
    IB   => i_nMi250ClkToFpga_p
  );

  ClkToFpga_BUFR_inst : BUFR
  generic map (
    BUFR_DIVIDE => "BYPASS",
    SIM_DEVICE => "VIRTEX6"
  )
  port map (
    O    => ClkToFpgaBufr_s,
    CE   => '1',
    CLR  => '0',
    I    => ClkToFpga_s
  );
  ------------------------------------------------------
  -- Frequency counter for testing External Clock
  ------------------------------------------------------

  ExternClk_IBUFDS : IBUFDS
  port map
  (
    O    => ExternClk_s,
    I    => i_pMi250ExternClk_p,
    IB   => i_nMi250ExternClk_p
  );

  ExternClk_BUFR_inst : BUFR
  generic map (
    BUFR_DIVIDE => "BYPASS",
    SIM_DEVICE => "VIRTEX6"
  )
  port map (
    O    => ExternClkBufr_s,
    CE   => '1',
    CLR  => '0',
    I    => ExternClk_s
  );

  ------------------------------------------------------
  -- Frequency counter for testing External Clock
  ------------------------------------------------------

  ClkModule_l : entity work.clk_module
  generic map (
    ADC_CLKIN_FREQ       => ADC_CLKIN_FREQ_MHZ,
    ADC_CLKFBOUT_MULT_F  => ADC_CLKFBOUT_MULT_F,
    ADC_DIVCLK_DIVIDE    => ADC_DIVCLK_DIVIDE,
    ADC_CLKOUT0_DIVIDE_F => ADC_CLKOUT0_DIVIDE_F,
    C_REFCLK_FREQ_MHZ    => C_REFCLK_FREQ_MHZ
  )
  port map (
    i_Rst_p              => CoreReset_s,
    i_RefClk_p           => S_AXI_ACLK,
    -- MMCM reset inputs
    i_AdcAbMmcmRst_p     => AdcAbMmcmRst_s,
    i_AdcCdMmcmRst_p     => AdcCdMmcmRst_s,
    i_AdcEfMmcmRst_p     => AdcEfMmcmRst_s,
    i_AdcGhMmcmRst_p     => AdcGhMmcmRst_s,
    -- Clock inputs (from BUFR)
    i_ClkToFpgaBufr_p    => ClkToFpgaBufr_s,
    i_ExternClkBufr_p    => ExternClkBufr_s,
    i_AdcAbClkBufr_p     => AdcAbClkBufr_s,
    i_AdcCdClkBufr_p     => AdcCdClkBufr_s,
    i_AdcEfClkBufr_p     => AdcEfClkBufr_s,
    i_AdcGhClkBufr_p     => AdcGhClkBufr_s,
    -- Global clock outputs (from BUFG)
    o_AdcAbClkOut_p      => AdcAbClkOut_s,
    o_AdcCdClkOut_p      => AdcCdClkOut_s,
    o_AdcEfClkOut_p      => AdcEfClkOut_s,
    o_AdcGhClkOut_p      => AdcGhClkOut_s,
    -- MMCM locked outputs
    o_AdcAbMmcmLocked_p  => AdcAbMmcmLocked_s,
    o_AdcCdMmcmLocked_p  => AdcCdMmcmLocked_s,
    o_AdcEfMmcmLocked_p  => AdcEfMmcmLocked_s,
    o_AdcGhMmcmLocked_p  => AdcGhMmcmLocked_s,
    -- Frequency counter outputs
    ov16_ClkToFpgaFreq_p => v16_ClkToFpgaFreq_s,
    ov16_ExternClkFreq_p => v16_ExternClkFreq_s,
    ov16_AdcAbClkFreq_p  => v16_AdcAbClkFreq_s,
    ov16_AdcCdClkFreq_p  => v16_AdcCdClkFreq_s,
    ov16_AdcEfClkFreq_p  => v16_AdcEfClkFreq_s,
    ov16_AdcGhClkFreq_p  => v16_AdcGhClkFreq_s
  );

  o_Mi250AdcDataClkOut_p <= AdcAbClkOut_s;

 --------------------------------------------
 -- User memory mapped logic
 --------------------------------------------
 USER_LOGIC_I : entity lyt_axi_mi250_v1_00_a.axi_mi250
   generic map
   (
     -- MAP USER GENERICS BELOW THIS LINE ---------------
     --USER generics mapped here
     -- MAP USER GENERICS ABOVE THIS LINE ---------------
     C_S_AXI_DATA_WIDTH        => C_S_AXI_DATA_WIDTH,
     C_S_AXI_ADDR_WIDTH        => C_S_AXI_ADDR_WIDTH,
     C_S_AXI_MIN_SIZE          => C_S_AXI_MIN_SIZE  ,
     C_USE_WSTRB               => C_USE_WSTRB       ,
     C_DPHASE_TIMEOUT          => C_DPHASE_TIMEOUT  ,
     C_BASEADDR                => C_BASEADDR        ,
     C_HIGHADDR                => C_HIGHADDR        ,
     C_FAMILY                  => C_FAMILY
   )
   port map
   (
     -- user_logic entity ports mapping  ---------------
    i_CoreReset_p                     => CoreReset_s,

     o_CoreResetPulse_p                     => CoreResetPulse_s,
    -- BELOW NEEDED FOR SPI INTERFACE
    iv32_Spi2PlbData_p             => v32_Spi2PlbData_s,
    ov32_Plb2SpiData_p             => v32_Plb2SpiData_s,
    ov9_PlbRegWriteSel_p           => v9_PlbRegWriteSel_s,
    ov9_PlbRegReadSel_p            => v9_PlbRegReadSel_s,
    -- ABOVE NEEDED FOR SPI INTERFACE
     -- ADC control
     o_AdcSpiReset_p                     => AdcSpiReset_s,
    i_TriggerToFpga_p              => i_Mi250TrigToFpga_p,
     o_SoftwareTrig_p                     => SoftwareTrig_s,
     ov2_TriggerMode_p                     => v2_TriggerMode_s,
     -- ADC interface control signals
     o_ChArmed_p                     => ChArmed_s,
     ov2_TestMode_p                     => v2_TestMode_s,
     -- PLL control
     i_PllStatus_p                     => PllStatus_s,
     o_PllFunction_p                     => PllFunction_s,
    o_PllRefEn_p                   => o_Mi250PllRefEn_p,
    o_VcoPwrEn_p                   => o_Mi250VcoPwrEn_p,
     -- SPI control
     i_SpiUpdaterBusy_p                     => SpiUpdaterBusy_s,
     i_SpiBusy_p                     => SpiBusy_s,
     o_SpiReq2_p                     => SpiReq2_s,
     i_SpiGnt2_p                     => SpiGnt2_s,
     i_SpiAck2_p                     => SpiAck2_s,
     -- ADC channels A and B
     o_AdcAbMmcmRst_p              => AdcAbMmcmRst_s,
     ov5_AdcAbIdelayValue_p        => v5_AdcABIdelayValue_s,
     ov5_AdcAbClkIdelayValue_p     => v5_AdcABClkIdelayValue_s,
     iv2_AdcAbPatternError_p       => v2_AdcAbPatternError_s,
     i_AdcAbMmcmLocked_p           => AdcAbMmcmLocked_s,
     -- ADC channels C and D
     o_AdcCdMmcmRst_p              => AdcCdMmcmRst_s,
     ov5_AdcCdIdelayValue_p        => v5_AdcCDIdelayValue_s,
     ov5_AdcCdClkIdelayValue_p     => v5_AdcCDClkIdelayValue_s,
     iv2_AdcCdPatternError_p       => v2_AdcCdPatternError_s,
     i_AdcCdMmcmLocked_p           => AdcCdMmcmLocked_s,
     -- ADC channels E and F
     o_AdcEfMmcmRst_p              => AdcEfMmcmRst_s,
     ov5_AdcEfIdelayValue_p        => v5_AdcEFIdelayValue_s,
     ov5_AdcEfClkIdelayValue_p     => v5_AdcEFClkIdelayValue_s,
     iv2_AdcEfPatternError_p       => v2_AdcEfPatternError_s,
     i_AdcEfMmcmLocked_p           => AdcEfMmcmLocked_s,
     -- ADC channels G and H
     o_AdcGhMmcmRst_p              => AdcGhMmcmRst_s,
     ov5_AdcGhIdelayValue_p        => v5_AdcGHIdelayValue_s,
     ov5_AdcGhClkIdelayValue_p     => v5_AdcGHClkIdelayValue_s,
     iv2_AdcGhPatternError_p       => v2_AdcGhPatternError_s,
     i_AdcGhMmcmLocked_p           => AdcGhMmcmLocked_s,
     -- Voltage monitor
    i_MonInterrupt_p               => i_nMi250MonInt_p,
     -- Clock frequencies
     iv16_ExternClkFreq_p          => v16_ExternClkFreq_s,
     iv16_ClkToFpgaFreq_p          => v16_ClkToFpgaFreq_s,
     iv16_AdcAbClkFreq_p           => v16_AdcAbClkFreq_s,
     iv16_AdcCdClkFreq_p           => v16_AdcCdClkFreq_s,
     iv16_AdcEfClkFreq_p           => v16_AdcEfClkFreq_s,
     iv16_AdcGhClkFreq_p           => v16_AdcGhClkFreq_s,
     -- Bus Protocol Ports mapping --
     S_AXI_ACLK                => S_AXI_ACLK    ,
     S_AXI_ARESETN             => S_AXI_ARESETN ,
     S_AXI_AWADDR              => S_AXI_AWADDR  ,
     S_AXI_AWVALID             => S_AXI_AWVALID ,
     S_AXI_WDATA               => S_AXI_WDATA   ,
     S_AXI_WSTRB               => S_AXI_WSTRB   ,
     S_AXI_WVALID              => S_AXI_WVALID  ,
     S_AXI_BREADY              => S_AXI_BREADY  ,
     S_AXI_ARADDR              => S_AXI_ARADDR  ,
     S_AXI_ARVALID             => S_AXI_ARVALID ,
     S_AXI_RREADY              => S_AXI_RREADY  ,
     S_AXI_ARREADY             => S_AXI_ARREADY ,
     S_AXI_RDATA               => S_AXI_RDATA   ,
     S_AXI_RRESP               => S_AXI_RRESP   ,
     S_AXI_RVALID              => S_AXI_RVALID  ,
     S_AXI_WREADY              => S_AXI_WREADY  ,
     S_AXI_BRESP               => S_AXI_BRESP   ,
     S_AXI_BVALID              => S_AXI_BVALID  ,
     S_AXI_AWREADY             => S_AXI_AWREADY
    );

  --------------------------------------------
  -- SW reset pulse stretcher.
  --------------------------------------------
  Process(S_AXI_ACLK)
  begin
    if rising_edge(S_AXI_ACLK) then
      v8_SignalStretch_s <= v8_SignalStretch_s(6 downto 0) & CoreResetPulse_s;
      CoreReset_s <= or_reduce(v8_SignalStretch_s);
    end if;
  end process;


end arch;
