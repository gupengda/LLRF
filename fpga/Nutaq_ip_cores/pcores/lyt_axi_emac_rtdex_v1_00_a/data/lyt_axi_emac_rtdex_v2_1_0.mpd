#------------------------------------------------------------------------------
# Filename:        lyt_axi_emac_rtdex_v2_1_0.mpd
# Description:     Microprocessor Peripheral Description
# Generated by:    khalid.bensadek
# Date:            2012-08-20 09:20:55
# Copyright (c) 2001-2012 LYRtech RD Inc.  All rights reserved.
#
# LYRtech RD Inc.
#------------------------------------------------------------------------------


BEGIN lyt_axi_emac_rtdex

#------------------------------------------------------------------------------
# Peripheral Options
#-----------------------------------------------------------------------------
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = MICROBLAZE:USER
OPTION STYLE = MIX
OPTION DESC = AXI Real Time Data Exchange 
OPTION ARCH_SUPPORT_MAP = (OTHERS=DEVELOPMENT)

#------------------------------------------------------------------------------
# Bus Interfaces
#-----------------------------------------------------------------------------
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = AXI_STR_EMAC_TXC, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = AXI_STR_EMAC_TXD, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = AXI_STR_EMAC_RXS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = AXI_STR_EMAC_RXD, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = AXI_STR_EDMA_TXC, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = AXI_STR_EDMA_TXD, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = AXI_STR_EDMA_RXS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = AXI_STR_EDMA_RXD, BUS_STD = AXIS, BUS_TYPE = INITIATOR

#------------------------------------------------------------------------------
# Generics for VHDL or Parameters for Verilog
#------------------------------------------------------------------------------
PARAMETER C_RTDEX_RX_NUMER_OF_CHANNELS = 1, DT = INTEGER, RANGE = (1:8)
PARAMETER C_RTDEX_TX_NUMER_OF_CHANNELS = 1, DT = INTEGER, RANGE = (1:8)
PARAMETER C_SUPPORT_JUMBO_FRM = 1, DT = INTEGER, RANGE = (0,1)
#PARAMETER C_RTDEX_PROTOCOL_ID = 0x01, DT = std_logic_vector(7 downto 0), ASSIGNMENT = CONSTANT
PARAMETER C_TX_CH_FIFO_DEPTH = 4096, DT = INTEGER, RANGE = (1024, 2048, 4096, 8192, 16384, 32768)
PARAMETER C_RX_CH_FIFO_DEPTH = 4096, DT = INTEGER, RANGE = (1024, 2048, 4096, 8192, 16384, 32768)
PARAMETER C_RX_STATS_COUNTERS = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_TX_STATS_COUNTERS = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_ENABLE_FLOW_CTRL = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MIN_SIZE = 0x000001ff, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_USE_WSTRB = 0, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI
PARAMETER C_AXI_STR_EMAC_TXC_TDATA_WIDTH = 32, DT = INTEGER, BUS = AXI_STR_EMAC_TXC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EMAC_TXD_TDATA_WIDTH = 32, DT = INTEGER, BUS = AXI_STR_EMAC_TXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EMAC_RXS_TDATA_WIDTH = 32, DT = INTEGER, BUS = AXI_STR_EMAC_RXS, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EMAC_RXD_TDATA_WIDTH = 32, DT = INTEGER, BUS = AXI_STR_EMAC_RXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EDMA_TXC_TDATA_WIDTH = 32, DT = INTEGER, BUS = AXI_STR_EDMA_TXC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EDMA_TXD_TDATA_WIDTH = 32, DT = INTEGER, BUS = AXI_STR_EDMA_TXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EDMA_RXS_TDATA_WIDTH = 32, DT = INTEGER, BUS = AXI_STR_EDMA_RXS, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EDMA_RXD_TDATA_WIDTH = 32, DT = INTEGER, BUS = AXI_STR_EDMA_RXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EMAC_TXC_PROTOCOL = XIL_AXI_STREAM_ETH_CTRL, DT = STRING, BUS = AXI_STR_EMAC_TXC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EMAC_TXD_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = AXI_STR_EMAC_TXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EMAC_RXS_PROTOCOL = XIL_AXI_STREAM_ETH_CTRL, DT = STRING, BUS = AXI_STR_EMAC_RXS, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EMAC_RXD_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = AXI_STR_EMAC_RXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EDMA_TXC_PROTOCOL = XIL_AXI_STREAM_ETH_CTRL, DT = STRING, BUS = AXI_STR_EDMA_TXC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EDMA_TXD_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = AXI_STR_EDMA_TXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EDMA_RXS_PROTOCOL = XIL_AXI_STREAM_ETH_CTRL, DT = STRING, BUS = AXI_STR_EDMA_RXS, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_EDMA_RXD_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = AXI_STR_EDMA_RXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = S_AXI_ACLK, CLK_UNIT = HZ, ASSIGNMENT = REQUIRE
PARAMETER C_S_AXI_ID_WIDTH = 4, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_AXI_STR_EMAC_TXC_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = AXI_STR_EMAC_TXC, TYPE = NON_HDL
PARAMETER C_AXI_STR_EDMA_TXC_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = AXI_STR_EDMA_TXC, TYPE = NON_HDL

#------------------------------------------------------------------------------
# Ports
#------------------------------------------------------------------------------
# AXI Lite interface
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_EMAC_TXC:AXI_STR_EDMA_TXC:AXI_STR_EMAC_TXD:AXI_STR_EDMA_TXD:AXI_STR_EMAC_RXS:AXI_STR_EDMA_RXS:AXI_STR_EMAC_RXD:AXI_STR_EDMA_RXD, SIGIS = RST
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
# AXI stream interface
PORT AXI_STR_EMAC_TXD_ACLK = ACLK, DIR = I, BUS = AXI_STR_EMAC_TXD, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_EMAC_TXD_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_EMAC_TXC:AXI_STR_EDMA_TXC:AXI_STR_EMAC_TXD:AXI_STR_EDMA_TXD:AXI_STR_EMAC_RXS:AXI_STR_EDMA_RXS:AXI_STR_EMAC_RXD:AXI_STR_EDMA_RXD, SIGIS = RST
PORT AXI_STR_EMAC_TXD_TVALID = TVALID, DIR = I, BUS = AXI_STR_EMAC_TXD, INITIALVAL = GND
PORT AXI_STR_EMAC_TXD_TREADY = TREADY, DIR = O, BUS = AXI_STR_EMAC_TXD
PORT AXI_STR_EMAC_TXD_TLAST = TLAST, DIR = I, BUS = AXI_STR_EMAC_TXD, INITIALVAL = GND
PORT AXI_STR_EMAC_TXD_TKEEP = TKEEP, DIR = I, BUS = AXI_STR_EMAC_TXD, INITIALVAL = VCC, VEC = [3:0], ENDIAN = LITTLE
PORT AXI_STR_EMAC_TXD_TDATA = TDATA, DIR = I, BUS = AXI_STR_EMAC_TXD, INITIALVAL = GND, VEC = [31:0], ENDIAN = LITTLE
PORT AXI_STR_EMAC_TXC_ACLK = ACLK, DIR = I, BUS = AXI_STR_EMAC_TXC, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_EMAC_TXC_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_EMAC_TXC:AXI_STR_EDMA_TXC:AXI_STR_EMAC_TXD:AXI_STR_EDMA_TXD:AXI_STR_EMAC_RXS:AXI_STR_EDMA_RXS:AXI_STR_EMAC_RXD:AXI_STR_EDMA_RXD, SIGIS = RST
PORT AXI_STR_EMAC_TXC_TVALID = TVALID, DIR = I, BUS = AXI_STR_EMAC_TXC, INITIALVAL = GND
PORT AXI_STR_EMAC_TXC_TREADY = TREADY, DIR = O, BUS = AXI_STR_EMAC_TXC
PORT AXI_STR_EMAC_TXC_TLAST = TLAST, DIR = I, BUS = AXI_STR_EMAC_TXC, INITIALVAL = GND
PORT AXI_STR_EMAC_TXC_TKEEP = TKEEP, DIR = I, BUS = AXI_STR_EMAC_TXC, INITIALVAL = VCC, VEC = [3:0], ENDIAN = LITTLE
PORT AXI_STR_EMAC_TXC_TDATA = TDATA, DIR = I, BUS = AXI_STR_EMAC_TXC, INITIALVAL = GND, VEC = [31:0], ENDIAN = LITTLE
PORT AXI_STR_EMAC_RXD_ACLK = ACLK, DIR = I, BUS = AXI_STR_EMAC_RXD, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_EMAC_RXD_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_EMAC_TXC:AXI_STR_EDMA_TXC:AXI_STR_EMAC_TXD:AXI_STR_EDMA_TXD:AXI_STR_EMAC_RXS:AXI_STR_EDMA_RXS:AXI_STR_EMAC_RXD:AXI_STR_EDMA_RXD, SIGIS = RST
PORT AXI_STR_EMAC_RXD_TVALID = TVALID, DIR = O, BUS = AXI_STR_EMAC_RXD
PORT AXI_STR_EMAC_RXD_TREADY = TREADY, DIR = I, BUS = AXI_STR_EMAC_RXD, INITIALVAL = GND
PORT AXI_STR_EMAC_RXD_TLAST = TLAST, DIR = O, BUS = AXI_STR_EMAC_RXD
PORT AXI_STR_EMAC_RXD_TKEEP = TKEEP, DIR = O, BUS = AXI_STR_EMAC_RXD, VEC = [3:0], ENDIAN = LITTLE
PORT AXI_STR_EMAC_RXD_TDATA = TDATA, DIR = O, BUS = AXI_STR_EMAC_RXD, VEC = [31:0], ENDIAN = LITTLE
PORT AXI_STR_EMAC_RXS_ACLK = ACLK, DIR = I, BUS = AXI_STR_EMAC_RXS, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_EMAC_RXS_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_EMAC_TXC:AXI_STR_EDMA_TXC:AXI_STR_EMAC_TXD:AXI_STR_EDMA_TXD:AXI_STR_EMAC_RXS:AXI_STR_EDMA_RXS:AXI_STR_EMAC_RXD:AXI_STR_EDMA_RXD, SIGIS = RST
PORT AXI_STR_EMAC_RXS_TVALID = TVALID, DIR = O, BUS = AXI_STR_EMAC_RXS
PORT AXI_STR_EMAC_RXS_TREADY = TREADY, DIR = I, BUS = AXI_STR_EMAC_RXS, INITIALVAL = GND
PORT AXI_STR_EMAC_RXS_TLAST = TLAST, DIR = O, BUS = AXI_STR_EMAC_RXS
PORT AXI_STR_EMAC_RXS_TKEEP = TKEEP, DIR = O, BUS = AXI_STR_EMAC_RXS, VEC = [3:0], ENDIAN = LITTLE
PORT AXI_STR_EMAC_RXS_TDATA = TDATA, DIR = O, BUS = AXI_STR_EMAC_RXS, VEC = [31:0], ENDIAN = LITTLE

PORT AXI_STR_EDMA_TXD_ACLK = ACLK, DIR = I, BUS = AXI_STR_EDMA_TXD, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_EDMA_TXD_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_EMAC_TXC:AXI_STR_EDMA_TXC:AXI_STR_EMAC_TXD:AXI_STR_EDMA_TXD:AXI_STR_EMAC_RXS:AXI_STR_EDMA_RXS:AXI_STR_EMAC_RXD:AXI_STR_EDMA_RXD, SIGIS = RST
PORT AXI_STR_EDMA_TXD_TVALID = TVALID, DIR = I, BUS = AXI_STR_EDMA_TXD, INITIALVAL = GND
PORT AXI_STR_EDMA_TXD_TREADY = TREADY, DIR = O, BUS = AXI_STR_EDMA_TXD
PORT AXI_STR_EDMA_TXD_TLAST = TLAST, DIR = I, BUS = AXI_STR_EDMA_TXD, INITIALVAL = GND
PORT AXI_STR_EDMA_TXD_TKEEP = TKEEP, DIR = I, BUS = AXI_STR_EDMA_TXD, INITIALVAL = VCC, VEC = [3:0], ENDIAN = LITTLE
PORT AXI_STR_EDMA_TXD_TDATA = TDATA, DIR = I, BUS = AXI_STR_EDMA_TXD, INITIALVAL = GND, VEC = [31:0], ENDIAN = LITTLE
PORT AXI_STR_EDMA_TXC_ACLK = ACLK, DIR = I, BUS = AXI_STR_EDMA_TXC, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_EDMA_TXC_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_EMAC_TXC:AXI_STR_EDMA_TXC:AXI_STR_EMAC_TXD:AXI_STR_EDMA_TXD:AXI_STR_EMAC_RXS:AXI_STR_EDMA_RXS:AXI_STR_EMAC_RXD:AXI_STR_EDMA_RXD, SIGIS = RST
PORT AXI_STR_EDMA_TXC_TVALID = TVALID, DIR = I, BUS = AXI_STR_EDMA_TXC, INITIALVAL = GND
PORT AXI_STR_EDMA_TXC_TREADY = TREADY, DIR = O, BUS = AXI_STR_EDMA_TXC
PORT AXI_STR_EDMA_TXC_TLAST = TLAST, DIR = I, BUS = AXI_STR_EDMA_TXC, INITIALVAL = GND
PORT AXI_STR_EDMA_TXC_TKEEP = TKEEP, DIR = I, BUS = AXI_STR_EDMA_TXC, INITIALVAL = VCC, VEC = [3:0], ENDIAN = LITTLE
PORT AXI_STR_EDMA_TXC_TDATA = TDATA, DIR = I, BUS = AXI_STR_EDMA_TXC, INITIALVAL = GND, VEC = [31:0], ENDIAN = LITTLE
PORT AXI_STR_EDMA_RXD_ACLK = ACLK, DIR = I, BUS = AXI_STR_EDMA_RXD, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_EDMA_RXD_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_EMAC_TXC:AXI_STR_EDMA_TXC:AXI_STR_EMAC_TXD:AXI_STR_EDMA_TXD:AXI_STR_EMAC_RXS:AXI_STR_EDMA_RXS:AXI_STR_EMAC_RXD:AXI_STR_EDMA_RXD, SIGIS = RST
PORT AXI_STR_EDMA_RXD_TVALID = TVALID, DIR = O, BUS = AXI_STR_EDMA_RXD
PORT AXI_STR_EDMA_RXD_TREADY = TREADY, DIR = I, BUS = AXI_STR_EDMA_RXD, INITIALVAL = GND
PORT AXI_STR_EDMA_RXD_TLAST = TLAST, DIR = O, BUS = AXI_STR_EDMA_RXD
PORT AXI_STR_EDMA_RXD_TKEEP = TKEEP, DIR = O, BUS = AXI_STR_EDMA_RXD, VEC = [3:0], ENDIAN = LITTLE
PORT AXI_STR_EDMA_RXD_TDATA = TDATA, DIR = O, BUS = AXI_STR_EDMA_RXD, VEC = [31:0], ENDIAN = LITTLE
PORT AXI_STR_EDMA_RXS_ACLK = ACLK, DIR = I, BUS = AXI_STR_EDMA_RXS, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_EDMA_RXS_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_EMAC_TXC:AXI_STR_EDMA_TXC:AXI_STR_EMAC_TXD:AXI_STR_EDMA_TXD:AXI_STR_EMAC_RXS:AXI_STR_EDMA_RXS:AXI_STR_EMAC_RXD:AXI_STR_EDMA_RXD, SIGIS = RST
PORT AXI_STR_EDMA_RXS_TVALID = TVALID, DIR = O, BUS = AXI_STR_EDMA_RXS
PORT AXI_STR_EDMA_RXS_TREADY = TREADY, DIR = I, BUS = AXI_STR_EDMA_RXS, INITIALVAL = GND
PORT AXI_STR_EDMA_RXS_TLAST = TLAST, DIR = O, BUS = AXI_STR_EDMA_RXS
PORT AXI_STR_EDMA_RXS_TKEEP = TKEEP, DIR = O, BUS = AXI_STR_EDMA_RXS, VEC = [3:0], ENDIAN = LITTLE
PORT AXI_STR_EDMA_RXS_TDATA = TDATA, DIR = O, BUS = AXI_STR_EDMA_RXS, VEC = [31:0], ENDIAN = LITTLE
### user interface

   # RX interface
IO_INTERFACE IO_IF = CHANNEL0_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL1_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL2_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL3_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL4_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL5_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL6_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL7_IF, IO_TYPE = GPIO

PORT i_RxUserClk_p           = "", DIR = I, SIGIS = CLK

PORT o_RxReadyCh0_p           = "", DIR = O, IO_IF = CHANNEL0_IF
PORT i_RxReCh0_p              = "", DIR = I, IO_IF = CHANNEL0_IF
PORT ov32_RxDataCh0_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL0_IF
PORT o_RxDataValidCh0_p       = "", DIR = O, IO_IF = CHANNEL0_IF

PORT o_RxReadyCh1_p           = "", DIR = O, IO_IF = CHANNEL1_IF
PORT i_RxReCh1_p              = "", DIR = I, IO_IF = CHANNEL1_IF
PORT ov32_RxDataCh1_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL1_IF
PORT o_RxDataValidCh1_p       = "", DIR = O, IO_IF = CHANNEL1_IF

PORT o_RxReadyCh2_p           = "", DIR = O, IO_IF = CHANNEL2_IF
PORT i_RxReCh2_p              = "", DIR = I, IO_IF = CHANNEL2_IF
PORT ov32_RxDataCh2_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL2_IF
PORT o_RxDataValidCh2_p       = "", DIR = O , IO_IF = CHANNEL2_IF

PORT o_RxReadyCh3_p           = "", DIR = O, IO_IF = CHANNEL3_IF
PORT i_RxReCh3_p              = "", DIR = I, IO_IF = CHANNEL3_IF
PORT ov32_RxDataCh3_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL3_IF
PORT o_RxDataValidCh3_p       = "", DIR = O, IO_IF = CHANNEL3_IF

PORT o_RxReadyCh4_p           = "", DIR = O, IO_IF = CHANNEL4_IF
PORT i_RxReCh4_p              = "", DIR = I, IO_IF = CHANNEL4_IF
PORT ov32_RxDataCh4_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL4_IF
PORT o_RxDataValidCh4_p       = "", DIR = O, IO_IF = CHANNEL4_IF

PORT o_RxReadyCh5_p           = "", DIR = O, IO_IF = CHANNEL5_IF
PORT i_RxReCh5_p              = "", DIR = I, IO_IF = CHANNEL5_IF
PORT ov32_RxDataCh5_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL5_IF
PORT o_RxDataValidCh5_p       = "", DIR = O, IO_IF = CHANNEL5_IF

PORT o_RxReadyCh6_p           = "", DIR = O, IO_IF = CHANNEL6_IF
PORT i_RxReCh6_p              = "", DIR = I, IO_IF = CHANNEL6_IF
PORT ov32_RxDataCh6_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL6_IF
PORT o_RxDataValidCh6_p       = "", DIR = O, IO_IF = CHANNEL6_IF

PORT o_RxReadyCh7_p           = "", DIR = O, IO_IF = CHANNEL7_IF
PORT i_RxReCh7_p              = "", DIR = I, IO_IF = CHANNEL7_IF
PORT ov32_RxDataCh7_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL7_IF
PORT o_RxDataValidCh7_p       = "", DIR = O, IO_IF = CHANNEL7_IF

   # TX interface
PORT i_TxUserClk_p           = "", DIR = I, SIGIS = CLK

PORT o_TxReadyCh0_p          = "", DIR = O, IO_IF = CHANNEL0_IF
PORT i_TxWeCh0_p             = "", DIR = I, IO_IF = CHANNEL0_IF
PORT iv32_TxDataCh0_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL0_IF

PORT o_TxReadyCh1_p          = "", DIR = O, IO_IF = CHANNEL1_IF
PORT i_TxWeCh1_p             = "", DIR = I, IO_IF = CHANNEL1_IF
PORT iv32_TxDataCh1_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL1_IF

PORT o_TxReadyCh2_p          = "", DIR = O, IO_IF = CHANNEL2_IF
PORT i_TxWeCh2_p             = "", DIR = I, IO_IF = CHANNEL2_IF
PORT iv32_TxDataCh2_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL2_IF

PORT o_TxReadyCh3_p          = "", DIR = O, IO_IF = CHANNEL3_IF
PORT i_TxWeCh3_p             = "", DIR = I, IO_IF = CHANNEL3_IF
PORT iv32_TxDataCh3_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL3_IF

PORT o_TxReadyCh4_p          = "", DIR = O, IO_IF = CHANNEL4_IF
PORT i_TxWeCh4_p             = "", DIR = I, IO_IF = CHANNEL4_IF
PORT iv32_TxDataCh4_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL4_IF

PORT o_TxReadyCh5_p          = "", DIR = O, IO_IF = CHANNEL5_IF
PORT i_TxWeCh5_p             = "", DIR = I, IO_IF = CHANNEL5_IF
PORT iv32_TxDataCh5_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL5_IF

PORT o_TxReadyCh6_p          = "", DIR = O, IO_IF = CHANNEL6_IF
PORT i_TxWeCh6_p             = "", DIR = I, IO_IF = CHANNEL6_IF
PORT iv32_TxDataCh6_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL6_IF

PORT o_TxReadyCh7_p          = "", DIR = O, IO_IF = CHANNEL7_IF
PORT i_TxWeCh7_p             = "", DIR = I, IO_IF = CHANNEL7_IF
PORT iv32_TxDataCh7_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL7_IF
END
