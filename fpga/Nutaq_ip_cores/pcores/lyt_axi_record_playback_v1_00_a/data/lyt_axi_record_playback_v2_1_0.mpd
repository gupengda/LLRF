#------------------------------------------------------------------------------
# Filename:        lyt_axi_record_playback_v2_1_0.mpd
# Description:     Microprocessor Peripheral Description
# Generated by:    khalid.bensadek
# Date:            2012-07-07 15:17:32
# Copyright (c) 2001-2012 LYRtech RD Inc.  All rights reserved.
#
# LYRtech RD Inc.
#------------------------------------------------------------------------------


BEGIN lyt_axi_record_playback

#------------------------------------------------------------------------------
# Peripheral Options
#-----------------------------------------------------------------------------
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = generate_corelevel_ucf
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION RUN_NGCBUILD = TRUE
OPTION STYLE = MIX
OPTION HDL = VHDL
OPTION IP_GROUP = MICROBLAZE:USER
OPTION DESC = AXI Record and Playback
OPTION ARCH_SUPPORT_MAP = (OTHERS=DEVELOPMENT)

#------------------------------------------------------------------------------
# Bus Interfaces
#-----------------------------------------------------------------------------
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

#------------------------------------------------------------------------------
# Generics for VHDL or Parameters for Verilog
#------------------------------------------------------------------------------
PARAMETER RecordPortWidth_g = 8, DT = INTEGER, RANGE = (8, 16, 32, 64)
PARAMETER NumberOfRecordPorts_g = 1, DT = INTEGER, RANGE = (1, 2, 4, 8, 16)
PARAMETER PlayBackPortWidth_g = 8, DT = INTEGER, RANGE = (8, 16, 32, 64)
PARAMETER NumberOfPlayBackPorts_g = 1, DT = INTEGER, RANGE = (1, 2, 4, 8, 16)
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MIN_SIZE = 0x000001ff, DT = std_logic_vector, BUS = S_AXI
PARAMETER C_USE_WSTRB = 1, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI

#------------------------------------------------------------------------------
# Ports
#------------------------------------------------------------------------------
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

# user interfaces
IO_INTERFACE IO_IF = USER_RECORD_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = USER_PLAYBACK_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = RTDEX_RX_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = RTDEX_TX_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = MEMORY_IF, IO_TYPE = GPIO

# User ports
PORT i_RecDataClk_p = "", DIR = I, SIGIS = CLK, IO_IF = USER_RECORD_IF
PORT i_RecTrigger_p = "", DIR = I, IO_IF = USER_RECORD_IF
PORT iv_RecDataPort0_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort1_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort2_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort3_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort4_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort5_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort6_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort7_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort8_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort9_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort10_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort11_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort12_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort13_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort14_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT iv_RecDataPort15_p = "", DIR = I, VEC = [(RecordPortWidth_g-1):0], IO_IF = USER_RECORD_IF
PORT i_RecWriteEn_p = "", DIR = I, IO_IF = USER_RECORD_IF
PORT o_RecFifoFull_p = "", DIR = O, IO_IF = USER_RECORD_IF
PORT o_RecFifoEmpty_p = "", DIR = O, IO_IF = USER_RECORD_IF
PORT i_PlayDataClk_p = "", DIR = I, SIGIS = CLK, IO_IF = USER_PLAYBACK_IF
PORT i_PlayTriggerIn_p = "", DIR = I, IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort0_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort1_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort2_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort3_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort4_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort5_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort6_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort7_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort8_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort9_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort10_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort11_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort12_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort13_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort14_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT ov_PlayDataPort15_p = "", DIR = O, VEC = [(PlayBackPortWidth_g-1):0], IO_IF = USER_PLAYBACK_IF
PORT o_PlayValid_p  = "", DIR = O, IO_IF = USER_PLAYBACK_IF
PORT i_PlayReadEn_p = "", DIR = I, IO_IF = USER_PLAYBACK_IF
PORT o_PlayEmpty_p  = "", DIR = O, IO_IF = USER_PLAYBACK_IF
PORT i_RTDExRxClock_p = "", DIR = I, IO_IF = RTDEX_RX_IF
PORT i_RTDExTxClock_p = "", DIR = I, IO_IF = RTDEX_TX_IF
PORT i_RxDataValid_p = "", DIR = I, IO_IF = RTDEX_RX_IF
PORT o_RxRe_p = "", DIR = O, IO_IF = RTDEX_RX_IF
PORT i_RxReady_p = "", DIR = I, IO_IF = RTDEX_RX_IF
PORT iv32_RxDataCh0_p = "", DIR = I, VEC = [31:0], IO_IF = RTDEX_RX_IF
PORT o_TxWe_p = "", DIR = O, IO_IF = RTDEX_TX_IF
PORT i_TxReady_p = "", DIR = I, IO_IF = RTDEX_TX_IF
PORT ov32_TxDataCh0_p = "", DIR = O, VEC = [31:0], IO_IF = RTDEX_TX_IF
PORT o_MemClk_p = "", DIR = O, SIGIS = CLK
PORT sys_clk = "", DIR = I , SIGIS = CLK, IO_IF = MEMORY_IF
PORT clk_ref = "", DIR = I , IO_IF = MEMORY_IF, SIGIS = CLK
PORT ddr3_dq = "", DIR = IO, VEC = [63:0], THREE_STATE = FALSE, IO_IF = MEMORY_IF
PORT ddr3_addr = "", DIR = O, VEC = [15:0] , IO_IF = MEMORY_IF
PORT ddr3_ba = "", DIR = O, VEC = [2:0] , IO_IF = MEMORY_IF
PORT ddr3_ras_n = "", DIR = O , IO_IF = MEMORY_IF
PORT ddr3_cas_n = "", DIR = O , IO_IF = MEMORY_IF
PORT ddr3_we_n = "", DIR = O , IO_IF = MEMORY_IF
PORT ddr3_reset_n = "", DIR = O , IO_IF = MEMORY_IF
PORT ddr3_cs_n = "", DIR = O, VEC = [0:0] , IO_IF = MEMORY_IF
PORT ddr3_odt = "", DIR = O, VEC = [0:0] , IO_IF = MEMORY_IF
PORT ddr3_cke = "", DIR = O, VEC = [0:0] , IO_IF = MEMORY_IF
PORT ddr3_dm = "", DIR = O, VEC = [7:0] , IO_IF = MEMORY_IF
PORT ddr3_dqs_p = "", DIR = IO, VEC = [7:0], THREE_STATE = FALSE , IO_IF = MEMORY_IF
PORT ddr3_dqs_n = "", DIR = IO, VEC = [7:0], THREE_STATE = FALSE , IO_IF = MEMORY_IF
PORT ddr3_ck_p = "", DIR = O, VEC = [1:0] , IO_IF = MEMORY_IF
PORT ddr3_ck_n = "", DIR = O, VEC = [1:0] , IO_IF = MEMORY_IF
PORT iodelay_ctrl_rdy = "", DIR = I , IO_IF = MEMORY_IF

END
