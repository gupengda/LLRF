--------------------------------------------------------------------------------
-- Filename:          user_logic_reg.vhd
-- Version:           v1_00_a
-- Description:       User Logic implementation module
-- Generated by:      David.Quinn
-- Date:              2013-01-29 11:52:55
-- Generated:         using LyrtechRD REGGENUTIL based on Xilinx IPIF Wizard.
-- VHDL Standard:     VHDL'93
------------------------------------------------------------------------------
-- Copyright (c) 2001-2012 LYRtech RD Inc.  All rights reserved.
------------------------------------------------------------------------------
--
-----------------------------------------------------------------------------
-- Register Memory Map & Description
-----------------------------------------------------------------------------
-- BASEADDR + 0x0   CORE_ID_VERS   
--   31:0 coreId R

-- BASEADDR + 0x4   CORE_CTRL_STAT   
--   0:0 CoreResetPulse P O=o_CoreResetPulse_p
--   1:1 mbIrq R W O=o_mbIrq_p
--   2:2 cdmaPresent R I=i_cdmaPresent_p
--   31:3 rsvd R

-- BASEADDR + 0x8   RX_TX_RST   
--   15:8 RxWordCntReset R W O=ov8_RxWordCntReset_p
--   23:16 TxFifoReset R W O=ov8_TxFifoReset_p
--   31:24 rsvd R
--   7:0 RxFifoReset R W O=ov8_RxFifoReset_p

-- BASEADDR + 0xc   RX_CONFIG_INFO   
--   31:0 RxConfigInfo R I=iv32_RxConfigInfo_p

-- BASEADDR + 0x10   RX_FIFO_STATUS   
--   15:8 RxFifoOverflow R I=iv8_RxFifoOverflow_p
--   31:16 rsvd R
--   7:0 RxFifoUnderflow R I=iv8_RxFifoUnderflow_p

-- BASEADDR + 0x14   RX_TX_FIFO_ENABLE   
--   15:8 RxFifoRdEn R W O=ov8_RxFifoRdEn_p
--   23:16 TxFifoWrEn R W O=ov8_TxFifoWrEn_p
--   31:24 rsvd R
--   7:0 RxFifoWrEn R W O=ov8_RxFifoWrEn_p

-- BASEADDR + 0x18   RX_WORDCNT_CH0   
--   31:0 RcvdWordCntCh0 R I=iv32_RcvdWordCntCh0_p

-- BASEADDR + 0x1c   RX_WORDCNT_CH1   
--   31:0 RcvdWordCntCh1 R I=iv32_RcvdWordCntCh1_p

-- BASEADDR + 0x20   RX_WORDCNT_CH2   
--   31:0 RcvdWordCntCh2 R I=iv32_RcvdWordCntCh2_p

-- BASEADDR + 0x24   RX_WORDCNT_CH3   
--   31:0 RcvdWordCntCh3 R I=iv32_RcvdWordCntCh3_p

-- BASEADDR + 0x28   RX_WORDCNT_CH4   
--   31:0 RcvdWordCntCh4 R I=iv32_RcvdWordCntCh4_p

-- BASEADDR + 0x2c   RX_WORDCNT_CH5   
--   31:0 RcvdWordCntCh5 R I=iv32_RcvdWordCntCh5_p

-- BASEADDR + 0x30   RX_WORDCNT_CH6   
--   31:0 RcvdWordCntCh6 R I=iv32_RcvdWordCntCh6_p

-- BASEADDR + 0x34   RX_WORDCNT_CH7   
--   31:0 RcvdWordCntCh7 R I=iv32_RcvdWordCntCh7_p

-- BASEADDR + 0x38   RESERVED   unused address space.

-- BASEADDR + 0x3c   RESERVED   unused address space.

-- BASEADDR + 0x40   TX_CONFIG_INFO   
--   31:0 TxConfigInfo R I=iv32_TxConfigInfo_p

-- BASEADDR + 0x44   TX_FIFO_STATUS   
--   15:8 TxFifoOverflow R I=iv8_TxFifoOverflow_p
--   31:16 rsvd R
--   7:0 TxFifoUnderflow R I=iv8_TxFifoUnderflow_p

-- BASEADDR + 0x48   TX_TRANSFERCTRL   
--   15:8 TxStreamingTransfer R W O=ov8_TxStreamingTransfer_p
--   23:16 TxTransferDone R I=iv8_TxTransferDone_p
--   31:24 rsvd R
--   7:0 TxStartNewTransfer R W O=ov8_TxStartNewTransfer_p

-- BASEADDR + 0x4c   TX_IRQCTRL   
--   15:8 rsvd R
--   31:16 rsvd R
--   7:0 TxIrqLastTransferEn R W O=ov8_TxIrqLastTransferEn_p

-- BASEADDR + 0x50   TX_DATAMOVERCTRL   
--   15:8 TxDataMoverHaltCmplt R I=iv8_TxDataMoverHaltCmplt_p
--   23:16 TxDataMoverErr R I=iv8_TxDataMoverErr_p
--   31:24 TxDataMoverRst R W O=ov8_TxDataMoverRst_p
--   7:0 TxDataMoverHaltReq R W O=ov8_TxDataMoverHaltReq_p

-- BASEADDR + 0x54   TX_TRANSFERCNT_CH0   
--   23:0 TxTransferCntCh0 R W O=ov24_TxTransferCntCh0_p
--   31:24 rsvd R

-- BASEADDR + 0x58   TX_CURRENTTRANSFERCNT_CH0   
--   23:0 TxCurrentTransferCntCh0 R I=iv24_TxCurrentTransferCntCh0_p
--   31:24 rsvd R

-- BASEADDR + 0x5c   TX_DATAMOVERCTRL_CH0   
--   31:0 TxDataMoverCtrlCh0 R W O=ov32_TxDataMoverCtrlCh0_p

-- BASEADDR + 0x60   TX_DATAMOVERADDR_CH0   
--   31:0 TxDataMoverAddrCh0 R W O=ov32_TxDataMoverAddrCh0_p

-- BASEADDR + 0x64   TX_DATAMOVERTAG_CH0   
--   31:4 rsvd R
--   3:0 TxDataMoverTagCh0 R W O=ov4_TxDataMoverTagCh0_p

-- BASEADDR + 0x68   TX_DATAMOVERSTATUS_CH0   
--   31:8 rsvd R
--   7:0 TxDataMoverStatusCh0 R I=iv8_TxDataMoverStatusCh0_p

-- BASEADDR + 0x6c   RESERVED   unused address space.

-- BASEADDR + 0x70   RESERVED   unused address space.

-- BASEADDR + 0x74   TX_TRANSFERCNT_CH1   
--   23:0 TxTransferCntCH1 R W O=ov24_TxTransferCntCH1_p
--   31:24 rsvd R

-- BASEADDR + 0x78   TX_CURRENTTRANSFERCNT_CH1   
--   23:0 TxCurrentTransferCntCH1 R I=iv24_TxCurrentTransferCntCH1_p
--   31:24 rsvd R

-- BASEADDR + 0x7c   TX_DATAMOVERCTRL_CH1   
--   31:0 TxDataMoverCtrlCH1 R W O=ov32_TxDataMoverCtrlCH1_p

-- BASEADDR + 0x80   TX_DATAMOVERADDR_CH1   
--   31:0 TxDataMoverAddrCH1 R W O=ov32_TxDataMoverAddrCH1_p

-- BASEADDR + 0x84   TX_DATAMOVERTAG_CH1   
--   31:4 rsvd R
--   3:0 TxDataMoverTagCH1 R W O=ov4_TxDataMoverTagCH1_p

-- BASEADDR + 0x88   TX_DATAMOVERSTATUS_CH1   
--   31:8 rsvd R
--   7:0 TxDataMoverStatusCH1 R I=iv8_TxDataMoverStatusCH1_p

-- BASEADDR + 0x8c   RESERVED   unused address space.

-- BASEADDR + 0x90   RESERVED   unused address space.

-- BASEADDR + 0x94   TX_TRANSFERCNT_CH2   
--   23:0 TxTransferCntCH2 R W O=ov24_TxTransferCntCH2_p
--   31:24 rsvd R

-- BASEADDR + 0x98   TX_CURRENTTRANSFERCNT_CH2   
--   23:0 TxCurrentTransferCntCH2 R I=iv24_TxCurrentTransferCntCH2_p
--   31:24 rsvd R

-- BASEADDR + 0x9c   TX_DATAMOVERCTRL_CH2   
--   31:0 TxDataMoverCtrlCH2 R W O=ov32_TxDataMoverCtrlCH2_p

-- BASEADDR + 0xa0   TX_DATAMOVERADDR_CH2   
--   31:0 TxDataMoverAddrCH2 R W O=ov32_TxDataMoverAddrCH2_p

-- BASEADDR + 0xa4   TX_DATAMOVERTAG_CH2   
--   31:4 rsvd R
--   3:0 TxDataMoverTagCH2 R W O=ov4_TxDataMoverTagCH2_p

-- BASEADDR + 0xa8   TX_DATAMOVERSTATUS_CH2   
--   31:8 rsvd R
--   7:0 TxDataMoverStatusCH2 R I=iv8_TxDataMoverStatusCH2_p

-- BASEADDR + 0xac   RESERVED   unused address space.

-- BASEADDR + 0xb0   RESERVED   unused address space.

-- BASEADDR + 0xb4   TX_TRANSFERCNT_CH3   
--   23:0 TxTransferCntCH3 R W O=ov24_TxTransferCntCH3_p
--   31:24 rsvd R

-- BASEADDR + 0xb8   TX_CURRENTTRANSFERCNT_CH3   
--   23:0 TxCurrentTransferCntCH3 R I=iv24_TxCurrentTransferCntCH3_p
--   31:24 rsvd R

-- BASEADDR + 0xbc   TX_DATAMOVERCTRL_CH3   
--   31:0 TxDataMoverCtrlCH3 R W O=ov32_TxDataMoverCtrlCH3_p

-- BASEADDR + 0xc0   TX_DATAMOVERADDR_CH3   
--   31:0 TxDataMoverAddrCH3 R W O=ov32_TxDataMoverAddrCH3_p

-- BASEADDR + 0xc4   TX_DATAMOVERTAG_CH3   
--   31:4 rsvd R
--   3:0 TxDataMoverTagCH3 R W O=ov4_TxDataMoverTagCH3_p

-- BASEADDR + 0xc8   TX_DATAMOVERSTATUS_CH3   
--   31:8 rsvd R
--   7:0 TxDataMoverStatusCH3 R I=iv8_TxDataMoverStatusCH3_p

-- BASEADDR + 0xcc   RESERVED   unused address space.

-- BASEADDR + 0xd0   RESERVED   unused address space.

-- BASEADDR + 0xd4   TX_TRANSFERCNT_CH4   
--   23:0 TxTransferCntCH4 R W O=ov24_TxTransferCntCH4_p
--   31:24 rsvd R

-- BASEADDR + 0xd8   TX_CURRENTTRANSFERCNT_CH4   
--   23:0 TxCurrentTransferCntCH4 R I=iv24_TxCurrentTransferCntCH4_p
--   31:24 rsvd R

-- BASEADDR + 0xdc   TX_DATAMOVERCTRL_CH4   
--   31:0 TxDataMoverCtrlCH4 R W O=ov32_TxDataMoverCtrlCH4_p

-- BASEADDR + 0xe0   TX_DATAMOVERADDR_CH4   
--   31:0 TxDataMoverAddrCH4 R W O=ov32_TxDataMoverAddrCH4_p

-- BASEADDR + 0xe4   TX_DATAMOVERTAG_CH4   
--   31:4 rsvd R
--   3:0 TxDataMoverTagCH4 R W O=ov4_TxDataMoverTagCH4_p

-- BASEADDR + 0xe8   TX_DATAMOVERSTATUS_CH4   
--   31:8 rsvd R
--   7:0 TxDataMoverStatusCH4 R I=iv8_TxDataMoverStatusCH4_p

-- BASEADDR + 0xec   RESERVED   unused address space.

-- BASEADDR + 0xf0   RESERVED   unused address space.

-- BASEADDR + 0xf4   TX_TRANSFERCNT_CH5   
--   23:0 TxTransferCntCH5 R W O=ov24_TxTransferCntCH5_p
--   31:24 rsvd R

-- BASEADDR + 0xf8   TX_CURRENTTRANSFERCNT_CH5   
--   23:0 TxCurrentTransferCntCH5 R I=iv24_TxCurrentTransferCntCH5_p
--   31:24 rsvd R

-- BASEADDR + 0xfc   TX_DATAMOVERCTRL_CH5   
--   31:0 TxDataMoverCtrlCH5 R W O=ov32_TxDataMoverCtrlCH5_p

-- BASEADDR + 0x100   TX_DATAMOVERADDR_CH5   
--   31:0 TxDataMoverAddrCH5 R W O=ov32_TxDataMoverAddrCH5_p

-- BASEADDR + 0x104   TX_DATAMOVERTAG_CH5   
--   31:4 rsvd R
--   3:0 TxDataMoverTagCH5 R W O=ov4_TxDataMoverTagCH5_p

-- BASEADDR + 0x108   TX_DATAMOVERSTATUS_CH5   
--   31:8 rsvd R
--   7:0 TxDataMoverStatusCH5 R I=iv8_TxDataMoverStatusCH5_p

-- BASEADDR + 0x10c   RESERVED   unused address space.

-- BASEADDR + 0x110   RESERVED   unused address space.

-- BASEADDR + 0x114   TX_TRANSFERCNT_CH6   
--   23:0 TxTransferCntCH6 R W O=ov24_TxTransferCntCH6_p
--   31:24 rsvd R

-- BASEADDR + 0x118   TX_CURRENTTRANSFERCNT_CH6   
--   23:0 TxCurrentTransferCntCH6 R I=iv24_TxCurrentTransferCntCH6_p
--   31:24 rsvd R

-- BASEADDR + 0x11c   TX_DATAMOVERCTRL_CH6   
--   31:0 TxDataMoverCtrlCH6 R W O=ov32_TxDataMoverCtrlCH6_p

-- BASEADDR + 0x120   TX_DATAMOVERADDR_CH6   
--   31:0 TxDataMoverAddrCH6 R W O=ov32_TxDataMoverAddrCH6_p

-- BASEADDR + 0x124   TX_DATAMOVERTAG_CH6   
--   31:4 rsvd R
--   3:0 TxDataMoverTagCH6 R W O=ov4_TxDataMoverTagCH6_p

-- BASEADDR + 0x128   TX_DATAMOVERSTATUS_CH6   
--   31:8 rsvd R
--   7:0 TxDataMoverStatusCH6 R I=iv8_TxDataMoverStatusCH6_p

-- BASEADDR + 0x12c   RESERVED   unused address space.

-- BASEADDR + 0x130   RESERVED   unused address space.

-- BASEADDR + 0x134   TX_TRANSFERCNT_CH7   
--   23:0 TxTransferCntCH7 R W O=ov24_TxTransferCntCH7_p
--   31:24 rsvd R

-- BASEADDR + 0x138   TX_CURRENTTRANSFERCNT_CH7   
--   23:0 TxCurrentTransferCntCH7 R I=iv24_TxCurrentTransferCntCH7_p
--   31:24 rsvd R

-- BASEADDR + 0x13c   TX_DATAMOVERCTRL_CH7   
--   31:0 TxDataMoverCtrlCH7 R W O=ov32_TxDataMoverCtrlCH7_p

-- BASEADDR + 0x140   TX_DATAMOVERADDR_CH7   
--   31:0 TxDataMoverAddrCH7 R W O=ov32_TxDataMoverAddrCH7_p

-- BASEADDR + 0x144   TX_DATAMOVERTAG_CH7   
--   31:4 rsvd R
--   3:0 TxDataMoverTagCH7 R W O=ov4_TxDataMoverTagCH7_p

-- BASEADDR + 0x148   TX_DATAMOVERSTATUS_CH7   
--   31:8 rsvd R
--   7:0 TxDataMoverStatusCH7 R I=iv8_TxDataMoverStatusCH7_p

-- BASEADDR + 0x14c   RESERVED   unused address space.

-- BASEADDR + 0x150   RESERVED   unused address space.

--------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library proc_common_v3_00_a;
use proc_common_v3_00_a.proc_common_pkg.all;

-- DO NOT EDIT ABOVE THIS LINE --------------------

--USER libraries added here

------------------------------------------------------------------------------
-- Entity section
------------------------------------------------------------------------------
-- Definition of Generics:
--   C_NUM_REG                    -- Number of software accessible registers
--   C_SLV_DWIDTH                 -- Slave interface data bus width
--
-- Definition of Ports:
--   Bus2IP_Clk                   -- Bus to IP clock
--   Bus2IP_Resetn                -- Bus to IP reset
--   Bus2IP_Data                  -- Bus to IP data bus
--   Bus2IP_BE                    -- Bus to IP byte enables
--   Bus2IP_RdCE                  -- Bus to IP read chip enable
--   Bus2IP_WrCE                  -- Bus to IP write chip enable
--   IP2Bus_Data                  -- IP to Bus data bus
--   IP2Bus_RdAck                 -- IP to Bus read transfer acknowledgement
--   IP2Bus_WrAck                 -- IP to Bus write transfer acknowledgement
--   IP2Bus_Error                 -- IP to Bus error response
------------------------------------------------------------------------------

entity user_logic_reg is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------
    --USER generics added here
    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_NUM_REG                      : integer              := 85;
    C_SLV_DWIDTH                   : integer              := 32
    -- DO NOT EDIT ABOVE THIS LINE ---------------------
  );
  port
  (
    -- ADD USER PORTS BELOW THIS LINE ------------------
    --USER ports added here
    -- ADD USER PORTS ABOVE THIS LINE ------------------
    -- User ports
    i_logicRst_p : in std_logic;

    o_CoreResetPulse_p : out std_logic;
    o_mbIrq_p : out std_logic;
    i_cdmaPresent_p : in std_logic;
    ov8_RxWordCntReset_p : out std_logic_vector(7 downto 0);
    ov8_TxFifoReset_p : out std_logic_vector(7 downto 0);
    ov8_RxFifoReset_p : out std_logic_vector(7 downto 0);
    iv32_RxConfigInfo_p : in std_logic_vector(31 downto 0);
    iv8_RxFifoOverflow_p : in std_logic_vector(7 downto 0);
    iv8_RxFifoUnderflow_p : in std_logic_vector(7 downto 0);
    ov8_RxFifoRdEn_p : out std_logic_vector(7 downto 0);
    ov8_TxFifoWrEn_p : out std_logic_vector(7 downto 0);
    ov8_RxFifoWrEn_p : out std_logic_vector(7 downto 0);
    iv32_RcvdWordCntCh0_p : in std_logic_vector(31 downto 0);
    iv32_RcvdWordCntCh1_p : in std_logic_vector(31 downto 0);
    iv32_RcvdWordCntCh2_p : in std_logic_vector(31 downto 0);
    iv32_RcvdWordCntCh3_p : in std_logic_vector(31 downto 0);
    iv32_RcvdWordCntCh4_p : in std_logic_vector(31 downto 0);
    iv32_RcvdWordCntCh5_p : in std_logic_vector(31 downto 0);
    iv32_RcvdWordCntCh6_p : in std_logic_vector(31 downto 0);
    iv32_RcvdWordCntCh7_p : in std_logic_vector(31 downto 0);
    iv32_TxConfigInfo_p : in std_logic_vector(31 downto 0);
    iv8_TxFifoOverflow_p : in std_logic_vector(7 downto 0);
    iv8_TxFifoUnderflow_p : in std_logic_vector(7 downto 0);
    ov8_TxStreamingTransfer_p : out std_logic_vector(7 downto 0);
    iv8_TxTransferDone_p : in std_logic_vector(7 downto 0);
    ov8_TxStartNewTransfer_p : out std_logic_vector(7 downto 0);
    ov8_TxIrqLastTransferEn_p : out std_logic_vector(7 downto 0);
    iv8_TxDataMoverHaltCmplt_p : in std_logic_vector(7 downto 0);
    iv8_TxDataMoverErr_p : in std_logic_vector(7 downto 0);
    ov8_TxDataMoverRst_p : out std_logic_vector(7 downto 0);
    ov8_TxDataMoverHaltReq_p : out std_logic_vector(7 downto 0);
    ov24_TxTransferCntCh0_p : out std_logic_vector(23 downto 0);
    iv24_TxCurrentTransferCntCh0_p : in std_logic_vector(23 downto 0);
    ov32_TxDataMoverCtrlCh0_p : out std_logic_vector(31 downto 0);
    ov32_TxDataMoverAddrCh0_p : out std_logic_vector(31 downto 0);
    ov4_TxDataMoverTagCh0_p : out std_logic_vector(3 downto 0);
    iv8_TxDataMoverStatusCh0_p : in std_logic_vector(7 downto 0);
    ov24_TxTransferCntCH1_p : out std_logic_vector(23 downto 0);
    iv24_TxCurrentTransferCntCH1_p : in std_logic_vector(23 downto 0);
    ov32_TxDataMoverCtrlCH1_p : out std_logic_vector(31 downto 0);
    ov32_TxDataMoverAddrCH1_p : out std_logic_vector(31 downto 0);
    ov4_TxDataMoverTagCH1_p : out std_logic_vector(3 downto 0);
    iv8_TxDataMoverStatusCH1_p : in std_logic_vector(7 downto 0);
    ov24_TxTransferCntCH2_p : out std_logic_vector(23 downto 0);
    iv24_TxCurrentTransferCntCH2_p : in std_logic_vector(23 downto 0);
    ov32_TxDataMoverCtrlCH2_p : out std_logic_vector(31 downto 0);
    ov32_TxDataMoverAddrCH2_p : out std_logic_vector(31 downto 0);
    ov4_TxDataMoverTagCH2_p : out std_logic_vector(3 downto 0);
    iv8_TxDataMoverStatusCH2_p : in std_logic_vector(7 downto 0);
    ov24_TxTransferCntCH3_p : out std_logic_vector(23 downto 0);
    iv24_TxCurrentTransferCntCH3_p : in std_logic_vector(23 downto 0);
    ov32_TxDataMoverCtrlCH3_p : out std_logic_vector(31 downto 0);
    ov32_TxDataMoverAddrCH3_p : out std_logic_vector(31 downto 0);
    ov4_TxDataMoverTagCH3_p : out std_logic_vector(3 downto 0);
    iv8_TxDataMoverStatusCH3_p : in std_logic_vector(7 downto 0);
    ov24_TxTransferCntCH4_p : out std_logic_vector(23 downto 0);
    iv24_TxCurrentTransferCntCH4_p : in std_logic_vector(23 downto 0);
    ov32_TxDataMoverCtrlCH4_p : out std_logic_vector(31 downto 0);
    ov32_TxDataMoverAddrCH4_p : out std_logic_vector(31 downto 0);
    ov4_TxDataMoverTagCH4_p : out std_logic_vector(3 downto 0);
    iv8_TxDataMoverStatusCH4_p : in std_logic_vector(7 downto 0);
    ov24_TxTransferCntCH5_p : out std_logic_vector(23 downto 0);
    iv24_TxCurrentTransferCntCH5_p : in std_logic_vector(23 downto 0);
    ov32_TxDataMoverCtrlCH5_p : out std_logic_vector(31 downto 0);
    ov32_TxDataMoverAddrCH5_p : out std_logic_vector(31 downto 0);
    ov4_TxDataMoverTagCH5_p : out std_logic_vector(3 downto 0);
    iv8_TxDataMoverStatusCH5_p : in std_logic_vector(7 downto 0);
    ov24_TxTransferCntCH6_p : out std_logic_vector(23 downto 0);
    iv24_TxCurrentTransferCntCH6_p : in std_logic_vector(23 downto 0);
    ov32_TxDataMoverCtrlCH6_p : out std_logic_vector(31 downto 0);
    ov32_TxDataMoverAddrCH6_p : out std_logic_vector(31 downto 0);
    ov4_TxDataMoverTagCH6_p : out std_logic_vector(3 downto 0);
    iv8_TxDataMoverStatusCH6_p : in std_logic_vector(7 downto 0);
    ov24_TxTransferCntCH7_p : out std_logic_vector(23 downto 0);
    iv24_TxCurrentTransferCntCH7_p : in std_logic_vector(23 downto 0);
    ov32_TxDataMoverCtrlCH7_p : out std_logic_vector(31 downto 0);
    ov32_TxDataMoverAddrCH7_p : out std_logic_vector(31 downto 0);
    ov4_TxDataMoverTagCH7_p : out std_logic_vector(3 downto 0);
    iv8_TxDataMoverStatusCH7_p : in std_logic_vector(7 downto 0);
    -- Bus protocol ports, do not add to or delete
    Bus2IP_Clk                     : in  std_logic;
    Bus2IP_Resetn                  : in  std_logic;
    Bus2IP_Data                    : in  std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    Bus2IP_BE                      : in  std_logic_vector(C_SLV_DWIDTH/8-1 downto 0);
    Bus2IP_RdCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    Bus2IP_WrCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    IP2Bus_Data                    : out std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    IP2Bus_RdAck                   : out std_logic;
    IP2Bus_WrAck                   : out std_logic;
    IP2Bus_Error                   : out std_logic
  );

 attribute MAX_FANOUT : string;
 attribute SIGIS : string;
 attribute SIGIS of Bus2IP_Clk    : signal is "CLK";
 attribute SIGIS of Bus2IP_Resetn : signal is "RST";

end entity user_logic_reg;

------------------------------------------------------------------------------
-- Architecture section
------------------------------------------------------------------------------

architecture IMP of user_logic_reg is

-------------------------------------------------------------------------------
-- Constant declarations
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
--     ************** Function declaratin *******************                   
-- Return a std_logic_vector with only one bit set to one.
-- The argument BitPosition represent the bit position to set to one, starting with 0.
-- The argument Width represent the width of the returned std_logic_vector.
-------------------------------------------------------------------------------
  function OneHotVector( BitPosition : integer;                              
                Width : integer)                                             
                return std_logic_vector                                      
  is                                                                         
    variable Result                   : std_logic_vector(Width - 1 downto 0);

  begin                        
    Result := (others => '0'); 
    Result(BitPosition) := '1';
    return Result;             
  end OneHotVector;            
-------------------------------------------------------------------------------
-- Signal and Type Declarations
-------------------------------------------------------------------------------

  signal CoreResetPulse_s                     : std_logic;
  signal mbIrq_s                     : std_logic;
  signal v8_RxWordCntReset_s                     : std_logic_vector(7 downto 0);
  signal v8_TxFifoReset_s                     : std_logic_vector(7 downto 0);
  signal v8_RxFifoReset_s                     : std_logic_vector(7 downto 0);
  signal v8_RxFifoRdEn_s                     : std_logic_vector(7 downto 0);
  signal v8_TxFifoWrEn_s                     : std_logic_vector(7 downto 0);
  signal v8_RxFifoWrEn_s                     : std_logic_vector(7 downto 0);
  signal v8_TxStreamingTransfer_s                     : std_logic_vector(7 downto 0);
  signal v8_TxStartNewTransfer_s                     : std_logic_vector(7 downto 0);
  signal v8_TxIrqLastTransferEn_s                     : std_logic_vector(7 downto 0);
  signal v8_TxDataMoverRst_s                     : std_logic_vector(7 downto 0);
  signal v8_TxDataMoverHaltReq_s                     : std_logic_vector(7 downto 0);
  signal v24_TxTransferCntCh0_s                     : std_logic_vector(23 downto 0);
  signal v32_TxDataMoverCtrlCh0_s                     : std_logic_vector(31 downto 0);
  signal v32_TxDataMoverAddrCh0_s                     : std_logic_vector(31 downto 0);
  signal v4_TxDataMoverTagCh0_s                     : std_logic_vector(3 downto 0);
  signal v24_TxTransferCntCH1_s                     : std_logic_vector(23 downto 0);
  signal v32_TxDataMoverCtrlCH1_s                     : std_logic_vector(31 downto 0);
  signal v32_TxDataMoverAddrCH1_s                     : std_logic_vector(31 downto 0);
  signal v4_TxDataMoverTagCH1_s                     : std_logic_vector(3 downto 0);
  signal v24_TxTransferCntCH2_s                     : std_logic_vector(23 downto 0);
  signal v32_TxDataMoverCtrlCH2_s                     : std_logic_vector(31 downto 0);
  signal v32_TxDataMoverAddrCH2_s                     : std_logic_vector(31 downto 0);
  signal v4_TxDataMoverTagCH2_s                     : std_logic_vector(3 downto 0);
  signal v24_TxTransferCntCH3_s                     : std_logic_vector(23 downto 0);
  signal v32_TxDataMoverCtrlCH3_s                     : std_logic_vector(31 downto 0);
  signal v32_TxDataMoverAddrCH3_s                     : std_logic_vector(31 downto 0);
  signal v4_TxDataMoverTagCH3_s                     : std_logic_vector(3 downto 0);
  signal v24_TxTransferCntCH4_s                     : std_logic_vector(23 downto 0);
  signal v32_TxDataMoverCtrlCH4_s                     : std_logic_vector(31 downto 0);
  signal v32_TxDataMoverAddrCH4_s                     : std_logic_vector(31 downto 0);
  signal v4_TxDataMoverTagCH4_s                     : std_logic_vector(3 downto 0);
  signal v24_TxTransferCntCH5_s                     : std_logic_vector(23 downto 0);
  signal v32_TxDataMoverCtrlCH5_s                     : std_logic_vector(31 downto 0);
  signal v32_TxDataMoverAddrCH5_s                     : std_logic_vector(31 downto 0);
  signal v4_TxDataMoverTagCH5_s                     : std_logic_vector(3 downto 0);
  signal v24_TxTransferCntCH6_s                     : std_logic_vector(23 downto 0);
  signal v32_TxDataMoverCtrlCH6_s                     : std_logic_vector(31 downto 0);
  signal v32_TxDataMoverAddrCH6_s                     : std_logic_vector(31 downto 0);
  signal v4_TxDataMoverTagCH6_s                     : std_logic_vector(3 downto 0);
  signal v24_TxTransferCntCH7_s                     : std_logic_vector(23 downto 0);
  signal v32_TxDataMoverCtrlCH7_s                     : std_logic_vector(31 downto 0);
  signal v32_TxDataMoverAddrCH7_s                     : std_logic_vector(31 downto 0);
  signal v4_TxDataMoverTagCH7_s                     : std_logic_vector(3 downto 0);
  signal slv_reg_write_sel              : std_logic_vector(84 downto 0);
  signal slv_reg_read_sel               : std_logic_vector(84 downto 0);
  signal slv_ip2bus_data                : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal slv_read_ack                   : std_logic;
  signal slv_write_ack                  : std_logic;

------------------------------------------------------------------------------
begin
------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Begin architecture
-------------------------------------------------------------------------------

-- swap bits
WrCeBitSwap: for i in 0 to slv_reg_write_sel'high generate
  slv_reg_write_sel(i) <= Bus2IP_WrCE(slv_reg_write_sel'high - i);
end generate WrCeBitSwap;

RdCeBitSwap: for i in 0 to slv_reg_read_sel'high generate
  slv_reg_read_sel(i)  <= Bus2IP_RdCE(slv_reg_read_sel'high - i);
end generate RdCeBitSwap;

-- generate write/read ack
  slv_write_ack <=   Bus2IP_WrCE(0) or   Bus2IP_WrCE(1) or   Bus2IP_WrCE(2) or   Bus2IP_WrCE(3) or   Bus2IP_WrCE(4) or   Bus2IP_WrCE(5) or   Bus2IP_WrCE(6) or   Bus2IP_WrCE(7) or   Bus2IP_WrCE(8) or   Bus2IP_WrCE(9) or   Bus2IP_WrCE(10) or   Bus2IP_WrCE(11) or   Bus2IP_WrCE(12) or   Bus2IP_WrCE(13) or   Bus2IP_WrCE(14) or   Bus2IP_WrCE(15) or   Bus2IP_WrCE(16) or   Bus2IP_WrCE(17) or   Bus2IP_WrCE(18) or   Bus2IP_WrCE(19) or   Bus2IP_WrCE(20) or   Bus2IP_WrCE(21) or   Bus2IP_WrCE(22) or   Bus2IP_WrCE(23) or   Bus2IP_WrCE(24) or   Bus2IP_WrCE(25) or   Bus2IP_WrCE(26) or   Bus2IP_WrCE(27) or   Bus2IP_WrCE(28) or   Bus2IP_WrCE(29) or   Bus2IP_WrCE(30) or   Bus2IP_WrCE(31) or   Bus2IP_WrCE(32) or   Bus2IP_WrCE(33) or   Bus2IP_WrCE(34) or   Bus2IP_WrCE(35) or   Bus2IP_WrCE(36) or   Bus2IP_WrCE(37) or   Bus2IP_WrCE(38) or   Bus2IP_WrCE(39) or   Bus2IP_WrCE(40) or   Bus2IP_WrCE(41) or   Bus2IP_WrCE(42) or   Bus2IP_WrCE(43) or   Bus2IP_WrCE(44) or   Bus2IP_WrCE(45) or   Bus2IP_WrCE(46) or   Bus2IP_WrCE(47) or   Bus2IP_WrCE(48) or   Bus2IP_WrCE(49) or   Bus2IP_WrCE(50) or   Bus2IP_WrCE(51) or   Bus2IP_WrCE(52) or   Bus2IP_WrCE(53) or   Bus2IP_WrCE(54) or   Bus2IP_WrCE(55) or   Bus2IP_WrCE(56) or   Bus2IP_WrCE(57) or   Bus2IP_WrCE(58) or   Bus2IP_WrCE(59) or   Bus2IP_WrCE(60) or   Bus2IP_WrCE(61) or   Bus2IP_WrCE(62) or   Bus2IP_WrCE(63) or   Bus2IP_WrCE(64) or   Bus2IP_WrCE(65) or   Bus2IP_WrCE(66) or   Bus2IP_WrCE(67) or   Bus2IP_WrCE(68) or   Bus2IP_WrCE(69) or   Bus2IP_WrCE(70) or   Bus2IP_WrCE(71) or   Bus2IP_WrCE(72) or   Bus2IP_WrCE(73) or   Bus2IP_WrCE(74) or   Bus2IP_WrCE(75) or   Bus2IP_WrCE(76) or   Bus2IP_WrCE(77) or   Bus2IP_WrCE(78) or   Bus2IP_WrCE(79) or   Bus2IP_WrCE(80) or   Bus2IP_WrCE(81) or   Bus2IP_WrCE(82) or   Bus2IP_WrCE(83) or   Bus2IP_WrCE(84);
  slv_read_ack  <=   Bus2IP_RdCE(0) or   Bus2IP_RdCE(1) or   Bus2IP_RdCE(2) or   Bus2IP_RdCE(3) or   Bus2IP_RdCE(4) or   Bus2IP_RdCE(5) or   Bus2IP_RdCE(6) or   Bus2IP_RdCE(7) or   Bus2IP_RdCE(8) or   Bus2IP_RdCE(9) or   Bus2IP_RdCE(10) or   Bus2IP_RdCE(11) or   Bus2IP_RdCE(12) or   Bus2IP_RdCE(13) or   Bus2IP_RdCE(14) or   Bus2IP_RdCE(15) or   Bus2IP_RdCE(16) or   Bus2IP_RdCE(17) or   Bus2IP_RdCE(18) or   Bus2IP_RdCE(19) or   Bus2IP_RdCE(20) or   Bus2IP_RdCE(21) or   Bus2IP_RdCE(22) or   Bus2IP_RdCE(23) or   Bus2IP_RdCE(24) or   Bus2IP_RdCE(25) or   Bus2IP_RdCE(26) or   Bus2IP_RdCE(27) or   Bus2IP_RdCE(28) or   Bus2IP_RdCE(29) or   Bus2IP_RdCE(30) or   Bus2IP_RdCE(31) or   Bus2IP_RdCE(32) or   Bus2IP_RdCE(33) or   Bus2IP_RdCE(34) or   Bus2IP_RdCE(35) or   Bus2IP_RdCE(36) or   Bus2IP_RdCE(37) or   Bus2IP_RdCE(38) or   Bus2IP_RdCE(39) or   Bus2IP_RdCE(40) or   Bus2IP_RdCE(41) or   Bus2IP_RdCE(42) or   Bus2IP_RdCE(43) or   Bus2IP_RdCE(44) or   Bus2IP_RdCE(45) or   Bus2IP_RdCE(46) or   Bus2IP_RdCE(47) or   Bus2IP_RdCE(48) or   Bus2IP_RdCE(49) or   Bus2IP_RdCE(50) or   Bus2IP_RdCE(51) or   Bus2IP_RdCE(52) or   Bus2IP_RdCE(53) or   Bus2IP_RdCE(54) or   Bus2IP_RdCE(55) or   Bus2IP_RdCE(56) or   Bus2IP_RdCE(57) or   Bus2IP_RdCE(58) or   Bus2IP_RdCE(59) or   Bus2IP_RdCE(60) or   Bus2IP_RdCE(61) or   Bus2IP_RdCE(62) or   Bus2IP_RdCE(63) or   Bus2IP_RdCE(64) or   Bus2IP_RdCE(65) or   Bus2IP_RdCE(66) or   Bus2IP_RdCE(67) or   Bus2IP_RdCE(68) or   Bus2IP_RdCE(69) or   Bus2IP_RdCE(70) or   Bus2IP_RdCE(71) or   Bus2IP_RdCE(72) or   Bus2IP_RdCE(73) or   Bus2IP_RdCE(74) or   Bus2IP_RdCE(75) or   Bus2IP_RdCE(76) or   Bus2IP_RdCE(77) or   Bus2IP_RdCE(78) or   Bus2IP_RdCE(79) or   Bus2IP_RdCE(80) or   Bus2IP_RdCE(81) or   Bus2IP_RdCE(82) or   Bus2IP_RdCE(83) or   Bus2IP_RdCE(84);

 -- implement slave model software accessible register(s)
 SLAVE_REG_WRITE_PROC : process( Bus2IP_Clk ) is
 begin

  if Bus2IP_Clk'event and Bus2IP_Clk = '1' then
    if Bus2IP_Resetn = '0' then
      CoreResetPulse_s <= '0';
      mbIrq_s <= '0';
      v8_RxWordCntReset_s <= x"00";
      v8_TxFifoReset_s <= X"00";
      v8_RxFifoReset_s <= X"00";
      v8_RxFifoRdEn_s <= X"00";
      v8_TxFifoWrEn_s <= X"00";
      v8_RxFifoWrEn_s <= X"00";
      v8_TxStreamingTransfer_s <= X"00";
      v8_TxStartNewTransfer_s <= X"00";
      v8_TxIrqLastTransferEn_s <= X"00";
      v8_TxDataMoverRst_s <= x"00";
      v8_TxDataMoverHaltReq_s <= X"00";
      v24_TxTransferCntCh0_s <= X"000000";
      v32_TxDataMoverCtrlCh0_s <= X"00000000";
      v32_TxDataMoverAddrCh0_s <= X"00000000";
      v4_TxDataMoverTagCh0_s <= X"0";
      v24_TxTransferCntCH1_s <= X"000000";
      v32_TxDataMoverCtrlCH1_s <= X"00000000";
      v32_TxDataMoverAddrCH1_s <= X"00000000";
      v4_TxDataMoverTagCH1_s <= X"0";
      v24_TxTransferCntCH2_s <= X"000000";
      v32_TxDataMoverCtrlCH2_s <= X"00000000";
      v32_TxDataMoverAddrCH2_s <= X"00000000";
      v4_TxDataMoverTagCH2_s <= X"0";
      v24_TxTransferCntCH3_s <= X"000000";
      v32_TxDataMoverCtrlCH3_s <= X"00000000";
      v32_TxDataMoverAddrCH3_s <= X"00000000";
      v4_TxDataMoverTagCH3_s <= X"0";
      v24_TxTransferCntCH4_s <= X"000000";
      v32_TxDataMoverCtrlCH4_s <= X"00000000";
      v32_TxDataMoverAddrCH4_s <= X"00000000";
      v4_TxDataMoverTagCH4_s <= X"0";
      v24_TxTransferCntCH5_s <= X"000000";
      v32_TxDataMoverCtrlCH5_s <= X"00000000";
      v32_TxDataMoverAddrCH5_s <= X"00000000";
      v4_TxDataMoverTagCH5_s <= X"0";
      v24_TxTransferCntCH6_s <= X"000000";
      v32_TxDataMoverCtrlCH6_s <= X"00000000";
      v32_TxDataMoverAddrCH6_s <= X"00000000";
      v4_TxDataMoverTagCH6_s <= X"0";
      v24_TxTransferCntCH7_s <= X"000000";
      v32_TxDataMoverCtrlCH7_s <= X"00000000";
      v32_TxDataMoverAddrCH7_s <= X"00000000";
      v4_TxDataMoverTagCH7_s <= X"0";

    else

  -- Synchronous reset
  if ( i_logicRst_p = '1' ) then
    CoreResetPulse_s <= '0';
    mbIrq_s <= '0';
    v8_RxWordCntReset_s <= x"00";
    v8_TxFifoReset_s <= X"00";
    v8_RxFifoReset_s <= X"00";
    v8_RxFifoRdEn_s <= X"00";
    v8_TxFifoWrEn_s <= X"00";
    v8_RxFifoWrEn_s <= X"00";
    v8_TxStreamingTransfer_s <= X"00";
    v8_TxStartNewTransfer_s <= X"00";
    v8_TxIrqLastTransferEn_s <= X"00";
    v8_TxDataMoverRst_s <= x"00";
    v8_TxDataMoverHaltReq_s <= X"00";
    v24_TxTransferCntCh0_s <= X"000000";
    v32_TxDataMoverCtrlCh0_s <= X"00000000";
    v32_TxDataMoverAddrCh0_s <= X"00000000";
    v4_TxDataMoverTagCh0_s <= X"0";
    v24_TxTransferCntCH1_s <= X"000000";
    v32_TxDataMoverCtrlCH1_s <= X"00000000";
    v32_TxDataMoverAddrCH1_s <= X"00000000";
    v4_TxDataMoverTagCH1_s <= X"0";
    v24_TxTransferCntCH2_s <= X"000000";
    v32_TxDataMoverCtrlCH2_s <= X"00000000";
    v32_TxDataMoverAddrCH2_s <= X"00000000";
    v4_TxDataMoverTagCH2_s <= X"0";
    v24_TxTransferCntCH3_s <= X"000000";
    v32_TxDataMoverCtrlCH3_s <= X"00000000";
    v32_TxDataMoverAddrCH3_s <= X"00000000";
    v4_TxDataMoverTagCH3_s <= X"0";
    v24_TxTransferCntCH4_s <= X"000000";
    v32_TxDataMoverCtrlCH4_s <= X"00000000";
    v32_TxDataMoverAddrCH4_s <= X"00000000";
    v4_TxDataMoverTagCH4_s <= X"0";
    v24_TxTransferCntCH5_s <= X"000000";
    v32_TxDataMoverCtrlCH5_s <= X"00000000";
    v32_TxDataMoverAddrCH5_s <= X"00000000";
    v4_TxDataMoverTagCH5_s <= X"0";
    v24_TxTransferCntCH6_s <= X"000000";
    v32_TxDataMoverCtrlCH6_s <= X"00000000";
    v32_TxDataMoverAddrCH6_s <= X"00000000";
    v4_TxDataMoverTagCH6_s <= X"0";
    v24_TxTransferCntCH7_s <= X"000000";
    v32_TxDataMoverCtrlCH7_s <= X"00000000";
    v32_TxDataMoverAddrCH7_s <= X"00000000";
    v4_TxDataMoverTagCH7_s <= X"0";
  end if;

  CoreResetPulse_s <= '0';
      case slv_reg_write_sel is

        when OneHotVector(1,85) =>
          if (Bus2IP_BE(0) = '1') then
            CoreResetPulse_s <= Bus2IP_Data(0);
          end if;
          if (Bus2IP_BE(0) = '1') then
            mbIrq_s <= Bus2IP_Data(1);
          end if;

        when OneHotVector(2,85) =>
          if (Bus2IP_BE(1) = '1') then
            v8_RxWordCntReset_s <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v8_TxFifoReset_s <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(0) = '1') then
            v8_RxFifoReset_s <= Bus2IP_Data(7 downto 0);
          end if;

        when OneHotVector(5,85) =>
          if (Bus2IP_BE(1) = '1') then
            v8_RxFifoRdEn_s <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v8_TxFifoWrEn_s <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(0) = '1') then
            v8_RxFifoWrEn_s <= Bus2IP_Data(7 downto 0);
          end if;

        when OneHotVector(18,85) =>
          if (Bus2IP_BE(1) = '1') then
            v8_TxStreamingTransfer_s <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(0) = '1') then
            v8_TxStartNewTransfer_s <= Bus2IP_Data(7 downto 0);
          end if;

        when OneHotVector(19,85) =>
          if (Bus2IP_BE(0) = '1') then
            v8_TxIrqLastTransferEn_s <= Bus2IP_Data(7 downto 0);
          end if;

        when OneHotVector(20,85) =>
          if (Bus2IP_BE(3) = '1') then
            v8_TxDataMoverRst_s <= Bus2IP_Data(31 downto 24);
          end if;
          if (Bus2IP_BE(0) = '1') then
            v8_TxDataMoverHaltReq_s <= Bus2IP_Data(7 downto 0);
          end if;

        when OneHotVector(21,85) =>
          if (Bus2IP_BE(0) = '1') then
            v24_TxTransferCntCh0_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v24_TxTransferCntCh0_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v24_TxTransferCntCh0_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;

        when OneHotVector(23,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverCtrlCh0_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverCtrlCh0_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverCtrlCh0_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverCtrlCh0_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(24,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverAddrCh0_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverAddrCh0_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverAddrCh0_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverAddrCh0_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(25,85) =>
          if (Bus2IP_BE(0) = '1') then
            v4_TxDataMoverTagCh0_s <= Bus2IP_Data(3 downto 0);
          end if;

        when OneHotVector(29,85) =>
          if (Bus2IP_BE(0) = '1') then
            v24_TxTransferCntCH1_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v24_TxTransferCntCH1_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v24_TxTransferCntCH1_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;

        when OneHotVector(31,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverCtrlCH1_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverCtrlCH1_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverCtrlCH1_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverCtrlCH1_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(32,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverAddrCH1_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverAddrCH1_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverAddrCH1_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverAddrCH1_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(33,85) =>
          if (Bus2IP_BE(0) = '1') then
            v4_TxDataMoverTagCH1_s <= Bus2IP_Data(3 downto 0);
          end if;

        when OneHotVector(37,85) =>
          if (Bus2IP_BE(0) = '1') then
            v24_TxTransferCntCH2_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v24_TxTransferCntCH2_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v24_TxTransferCntCH2_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;

        when OneHotVector(39,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverCtrlCH2_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverCtrlCH2_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverCtrlCH2_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverCtrlCH2_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(40,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverAddrCH2_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverAddrCH2_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverAddrCH2_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverAddrCH2_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(41,85) =>
          if (Bus2IP_BE(0) = '1') then
            v4_TxDataMoverTagCH2_s <= Bus2IP_Data(3 downto 0);
          end if;

        when OneHotVector(45,85) =>
          if (Bus2IP_BE(0) = '1') then
            v24_TxTransferCntCH3_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v24_TxTransferCntCH3_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v24_TxTransferCntCH3_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;

        when OneHotVector(47,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverCtrlCH3_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverCtrlCH3_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverCtrlCH3_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverCtrlCH3_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(48,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverAddrCH3_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverAddrCH3_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverAddrCH3_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverAddrCH3_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(49,85) =>
          if (Bus2IP_BE(0) = '1') then
            v4_TxDataMoverTagCH3_s <= Bus2IP_Data(3 downto 0);
          end if;

        when OneHotVector(53,85) =>
          if (Bus2IP_BE(0) = '1') then
            v24_TxTransferCntCH4_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v24_TxTransferCntCH4_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v24_TxTransferCntCH4_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;

        when OneHotVector(55,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverCtrlCH4_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverCtrlCH4_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverCtrlCH4_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverCtrlCH4_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(56,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverAddrCH4_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverAddrCH4_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverAddrCH4_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverAddrCH4_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(57,85) =>
          if (Bus2IP_BE(0) = '1') then
            v4_TxDataMoverTagCH4_s <= Bus2IP_Data(3 downto 0);
          end if;

        when OneHotVector(61,85) =>
          if (Bus2IP_BE(0) = '1') then
            v24_TxTransferCntCH5_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v24_TxTransferCntCH5_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v24_TxTransferCntCH5_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;

        when OneHotVector(63,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverCtrlCH5_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverCtrlCH5_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverCtrlCH5_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverCtrlCH5_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(64,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverAddrCH5_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverAddrCH5_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverAddrCH5_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverAddrCH5_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(65,85) =>
          if (Bus2IP_BE(0) = '1') then
            v4_TxDataMoverTagCH5_s <= Bus2IP_Data(3 downto 0);
          end if;

        when OneHotVector(69,85) =>
          if (Bus2IP_BE(0) = '1') then
            v24_TxTransferCntCH6_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v24_TxTransferCntCH6_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v24_TxTransferCntCH6_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;

        when OneHotVector(71,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverCtrlCH6_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverCtrlCH6_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverCtrlCH6_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverCtrlCH6_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(72,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverAddrCH6_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverAddrCH6_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverAddrCH6_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverAddrCH6_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(73,85) =>
          if (Bus2IP_BE(0) = '1') then
            v4_TxDataMoverTagCH6_s <= Bus2IP_Data(3 downto 0);
          end if;

        when OneHotVector(77,85) =>
          if (Bus2IP_BE(0) = '1') then
            v24_TxTransferCntCH7_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v24_TxTransferCntCH7_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v24_TxTransferCntCH7_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;

        when OneHotVector(79,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverCtrlCH7_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverCtrlCH7_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverCtrlCH7_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverCtrlCH7_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(80,85) =>
          if (Bus2IP_BE(0) = '1') then
            v32_TxDataMoverAddrCH7_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_TxDataMoverAddrCH7_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_TxDataMoverAddrCH7_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_TxDataMoverAddrCH7_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(81,85) =>
          if (Bus2IP_BE(0) = '1') then
            v4_TxDataMoverTagCH7_s <= Bus2IP_Data(3 downto 0);
          end if;
        when others =>
          null;
      end case;
    end if;
  end if;

 end process SLAVE_REG_WRITE_PROC;

 -- implement slave model software accessible register(s) read mux
SLAVE_REG_READ_PROC : process( slv_reg_read_sel, mbIrq_s, i_cdmaPresent_p, v8_RxWordCntReset_s, v8_TxFifoReset_s, v8_RxFifoReset_s, iv32_RxConfigInfo_p, iv8_RxFifoOverflow_p, iv8_RxFifoUnderflow_p, v8_RxFifoRdEn_s, v8_TxFifoWrEn_s, v8_RxFifoWrEn_s, iv32_RcvdWordCntCh0_p, iv32_RcvdWordCntCh1_p, iv32_RcvdWordCntCh2_p, iv32_RcvdWordCntCh3_p, iv32_RcvdWordCntCh4_p, iv32_RcvdWordCntCh5_p, iv32_RcvdWordCntCh6_p, iv32_RcvdWordCntCh7_p, iv32_TxConfigInfo_p, iv8_TxFifoOverflow_p, iv8_TxFifoUnderflow_p, v8_TxStreamingTransfer_s, iv8_TxTransferDone_p, v8_TxStartNewTransfer_s, v8_TxIrqLastTransferEn_s, iv8_TxDataMoverHaltCmplt_p, iv8_TxDataMoverErr_p, v8_TxDataMoverRst_s, v8_TxDataMoverHaltReq_s, v24_TxTransferCntCh0_s, iv24_TxCurrentTransferCntCh0_p, v32_TxDataMoverCtrlCh0_s, v32_TxDataMoverAddrCh0_s, v4_TxDataMoverTagCh0_s, iv8_TxDataMoverStatusCh0_p, v24_TxTransferCntCH1_s, iv24_TxCurrentTransferCntCH1_p, v32_TxDataMoverCtrlCH1_s, v32_TxDataMoverAddrCH1_s, v4_TxDataMoverTagCH1_s, iv8_TxDataMoverStatusCH1_p, v24_TxTransferCntCH2_s, iv24_TxCurrentTransferCntCH2_p, v32_TxDataMoverCtrlCH2_s, v32_TxDataMoverAddrCH2_s, v4_TxDataMoverTagCH2_s, iv8_TxDataMoverStatusCH2_p, v24_TxTransferCntCH3_s, iv24_TxCurrentTransferCntCH3_p, v32_TxDataMoverCtrlCH3_s, v32_TxDataMoverAddrCH3_s, v4_TxDataMoverTagCH3_s, iv8_TxDataMoverStatusCH3_p, v24_TxTransferCntCH4_s, iv24_TxCurrentTransferCntCH4_p, v32_TxDataMoverCtrlCH4_s, v32_TxDataMoverAddrCH4_s, v4_TxDataMoverTagCH4_s, iv8_TxDataMoverStatusCH4_p, v24_TxTransferCntCH5_s, iv24_TxCurrentTransferCntCH5_p, v32_TxDataMoverCtrlCH5_s, v32_TxDataMoverAddrCH5_s, v4_TxDataMoverTagCH5_s, iv8_TxDataMoverStatusCH5_p, v24_TxTransferCntCH6_s, iv24_TxCurrentTransferCntCH6_p, v32_TxDataMoverCtrlCH6_s, v32_TxDataMoverAddrCH6_s, v4_TxDataMoverTagCH6_s, iv8_TxDataMoverStatusCH6_p, v24_TxTransferCntCH7_s, iv24_TxCurrentTransferCntCH7_p, v32_TxDataMoverCtrlCH7_s, v32_TxDataMoverAddrCH7_s, v4_TxDataMoverTagCH7_s, iv8_TxDataMoverStatusCH7_p) is
 begin
   case slv_reg_read_sel is

        when OneHotVector(0,85) =>
          slv_ip2bus_data(31 downto 0) <= X"C1E80000";

        when OneHotVector(1,85) =>
          slv_ip2bus_data(1) <= mbIrq_s;
          slv_ip2bus_data(2) <= i_cdmaPresent_p;
          slv_ip2bus_data(31 downto 3) <= "00000000000000000000000000000";

        when OneHotVector(2,85) =>
          slv_ip2bus_data(15 downto 8) <= v8_RxWordCntReset_s;
          slv_ip2bus_data(23 downto 16) <= v8_TxFifoReset_s;
          slv_ip2bus_data(31 downto 24) <= x"00";
          slv_ip2bus_data(7 downto 0) <= v8_RxFifoReset_s;

        when OneHotVector(3,85) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RxConfigInfo_p;

        when OneHotVector(4,85) =>
          slv_ip2bus_data(15 downto 8) <= iv8_RxFifoOverflow_p;
          slv_ip2bus_data(31 downto 16) <= x"0000";
          slv_ip2bus_data(7 downto 0) <= iv8_RxFifoUnderflow_p;

        when OneHotVector(5,85) =>
          slv_ip2bus_data(15 downto 8) <= v8_RxFifoRdEn_s;
          slv_ip2bus_data(23 downto 16) <= v8_TxFifoWrEn_s;
          slv_ip2bus_data(31 downto 24) <= x"00";
          slv_ip2bus_data(7 downto 0) <= v8_RxFifoWrEn_s;

        when OneHotVector(6,85) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdWordCntCh0_p;

        when OneHotVector(7,85) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdWordCntCh1_p;

        when OneHotVector(8,85) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdWordCntCh2_p;

        when OneHotVector(9,85) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdWordCntCh3_p;

        when OneHotVector(10,85) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdWordCntCh4_p;

        when OneHotVector(11,85) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdWordCntCh5_p;

        when OneHotVector(12,85) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdWordCntCh6_p;

        when OneHotVector(13,85) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RcvdWordCntCh7_p;

        when OneHotVector(16,85) =>
          slv_ip2bus_data(31 downto 0) <= iv32_TxConfigInfo_p;

        when OneHotVector(17,85) =>
          slv_ip2bus_data(15 downto 8) <= iv8_TxFifoOverflow_p;
          slv_ip2bus_data(31 downto 16) <= x"0000";
          slv_ip2bus_data(7 downto 0) <= iv8_TxFifoUnderflow_p;

        when OneHotVector(18,85) =>
          slv_ip2bus_data(15 downto 8) <= v8_TxStreamingTransfer_s;
          slv_ip2bus_data(23 downto 16) <= iv8_TxTransferDone_p;
          slv_ip2bus_data(31 downto 24) <= x"00";
          slv_ip2bus_data(7 downto 0) <= v8_TxStartNewTransfer_s;

        when OneHotVector(19,85) =>
          slv_ip2bus_data(15 downto 8) <= x"00";
          slv_ip2bus_data(31 downto 16) <= x"0000";
          slv_ip2bus_data(7 downto 0) <= v8_TxIrqLastTransferEn_s;

        when OneHotVector(20,85) =>
          slv_ip2bus_data(15 downto 8) <= iv8_TxDataMoverHaltCmplt_p;
          slv_ip2bus_data(23 downto 16) <= iv8_TxDataMoverErr_p;
          slv_ip2bus_data(31 downto 24) <= v8_TxDataMoverRst_s;
          slv_ip2bus_data(7 downto 0) <= v8_TxDataMoverHaltReq_s;

        when OneHotVector(21,85) =>
          slv_ip2bus_data(23 downto 0) <= v24_TxTransferCntCh0_s;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(22,85) =>
          slv_ip2bus_data(23 downto 0) <= iv24_TxCurrentTransferCntCh0_p;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(23,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverCtrlCh0_s;

        when OneHotVector(24,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverAddrCh0_s;

        when OneHotVector(25,85) =>
          slv_ip2bus_data(31 downto 4) <= x"0000000";
          slv_ip2bus_data(3 downto 0) <= v4_TxDataMoverTagCh0_s;

        when OneHotVector(26,85) =>
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(7 downto 0) <= iv8_TxDataMoverStatusCh0_p;

        when OneHotVector(29,85) =>
          slv_ip2bus_data(23 downto 0) <= v24_TxTransferCntCH1_s;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(30,85) =>
          slv_ip2bus_data(23 downto 0) <= iv24_TxCurrentTransferCntCH1_p;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(31,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverCtrlCH1_s;

        when OneHotVector(32,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverAddrCH1_s;

        when OneHotVector(33,85) =>
          slv_ip2bus_data(31 downto 4) <= x"0000000";
          slv_ip2bus_data(3 downto 0) <= v4_TxDataMoverTagCH1_s;

        when OneHotVector(34,85) =>
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(7 downto 0) <= iv8_TxDataMoverStatusCH1_p;

        when OneHotVector(37,85) =>
          slv_ip2bus_data(23 downto 0) <= v24_TxTransferCntCH2_s;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(38,85) =>
          slv_ip2bus_data(23 downto 0) <= iv24_TxCurrentTransferCntCH2_p;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(39,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverCtrlCH2_s;

        when OneHotVector(40,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverAddrCH2_s;

        when OneHotVector(41,85) =>
          slv_ip2bus_data(31 downto 4) <= x"0000000";
          slv_ip2bus_data(3 downto 0) <= v4_TxDataMoverTagCH2_s;

        when OneHotVector(42,85) =>
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(7 downto 0) <= iv8_TxDataMoverStatusCH2_p;

        when OneHotVector(45,85) =>
          slv_ip2bus_data(23 downto 0) <= v24_TxTransferCntCH3_s;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(46,85) =>
          slv_ip2bus_data(23 downto 0) <= iv24_TxCurrentTransferCntCH3_p;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(47,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverCtrlCH3_s;

        when OneHotVector(48,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverAddrCH3_s;

        when OneHotVector(49,85) =>
          slv_ip2bus_data(31 downto 4) <= x"0000000";
          slv_ip2bus_data(3 downto 0) <= v4_TxDataMoverTagCH3_s;

        when OneHotVector(50,85) =>
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(7 downto 0) <= iv8_TxDataMoverStatusCH3_p;

        when OneHotVector(53,85) =>
          slv_ip2bus_data(23 downto 0) <= v24_TxTransferCntCH4_s;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(54,85) =>
          slv_ip2bus_data(23 downto 0) <= iv24_TxCurrentTransferCntCH4_p;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(55,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverCtrlCH4_s;

        when OneHotVector(56,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverAddrCH4_s;

        when OneHotVector(57,85) =>
          slv_ip2bus_data(31 downto 4) <= x"0000000";
          slv_ip2bus_data(3 downto 0) <= v4_TxDataMoverTagCH4_s;

        when OneHotVector(58,85) =>
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(7 downto 0) <= iv8_TxDataMoverStatusCH4_p;

        when OneHotVector(61,85) =>
          slv_ip2bus_data(23 downto 0) <= v24_TxTransferCntCH5_s;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(62,85) =>
          slv_ip2bus_data(23 downto 0) <= iv24_TxCurrentTransferCntCH5_p;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(63,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverCtrlCH5_s;

        when OneHotVector(64,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverAddrCH5_s;

        when OneHotVector(65,85) =>
          slv_ip2bus_data(31 downto 4) <= x"0000000";
          slv_ip2bus_data(3 downto 0) <= v4_TxDataMoverTagCH5_s;

        when OneHotVector(66,85) =>
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(7 downto 0) <= iv8_TxDataMoverStatusCH5_p;

        when OneHotVector(69,85) =>
          slv_ip2bus_data(23 downto 0) <= v24_TxTransferCntCH6_s;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(70,85) =>
          slv_ip2bus_data(23 downto 0) <= iv24_TxCurrentTransferCntCH6_p;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(71,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverCtrlCH6_s;

        when OneHotVector(72,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverAddrCH6_s;

        when OneHotVector(73,85) =>
          slv_ip2bus_data(31 downto 4) <= x"0000000";
          slv_ip2bus_data(3 downto 0) <= v4_TxDataMoverTagCH6_s;

        when OneHotVector(74,85) =>
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(7 downto 0) <= iv8_TxDataMoverStatusCH6_p;

        when OneHotVector(77,85) =>
          slv_ip2bus_data(23 downto 0) <= v24_TxTransferCntCH7_s;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(78,85) =>
          slv_ip2bus_data(23 downto 0) <= iv24_TxCurrentTransferCntCH7_p;
          slv_ip2bus_data(31 downto 24) <= x"00";

        when OneHotVector(79,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverCtrlCH7_s;

        when OneHotVector(80,85) =>
          slv_ip2bus_data(31 downto 0) <= v32_TxDataMoverAddrCH7_s;

        when OneHotVector(81,85) =>
          slv_ip2bus_data(31 downto 4) <= x"0000000";
          slv_ip2bus_data(3 downto 0) <= v4_TxDataMoverTagCH7_s;

        when OneHotVector(82,85) =>
          slv_ip2bus_data(31 downto 8) <= x"000000";
          slv_ip2bus_data(7 downto 0) <= iv8_TxDataMoverStatusCH7_p;
        when others =>
          slv_ip2bus_data <= (others => '0');
      end case;

 end process SLAVE_REG_READ_PROC;

------------------------------------------
-- drive IP to Bus signals
------------------------------------------
IP2Bus_Data  <= slv_ip2bus_data when slv_read_ack = '1' else (others => '0');
IP2Bus_WrAck <= slv_write_ack;
IP2Bus_RdAck <= slv_read_ack;
IP2Bus_Error <= '0';

------------------------------------------
-- Output assignments
------------------------------------------
o_CoreResetPulse_p <= CoreResetPulse_s;
o_mbIrq_p <= mbIrq_s;
ov8_RxWordCntReset_p <= v8_RxWordCntReset_s;
ov8_TxFifoReset_p <= v8_TxFifoReset_s;
ov8_RxFifoReset_p <= v8_RxFifoReset_s;
ov8_RxFifoRdEn_p <= v8_RxFifoRdEn_s;
ov8_TxFifoWrEn_p <= v8_TxFifoWrEn_s;
ov8_RxFifoWrEn_p <= v8_RxFifoWrEn_s;
ov8_TxStreamingTransfer_p <= v8_TxStreamingTransfer_s;
ov8_TxStartNewTransfer_p <= v8_TxStartNewTransfer_s;
ov8_TxIrqLastTransferEn_p <= v8_TxIrqLastTransferEn_s;
ov8_TxDataMoverRst_p <= v8_TxDataMoverRst_s;
ov8_TxDataMoverHaltReq_p <= v8_TxDataMoverHaltReq_s;
ov24_TxTransferCntCh0_p <= v24_TxTransferCntCh0_s;
ov32_TxDataMoverCtrlCh0_p <= v32_TxDataMoverCtrlCh0_s;
ov32_TxDataMoverAddrCh0_p <= v32_TxDataMoverAddrCh0_s;
ov4_TxDataMoverTagCh0_p <= v4_TxDataMoverTagCh0_s;
ov24_TxTransferCntCH1_p <= v24_TxTransferCntCH1_s;
ov32_TxDataMoverCtrlCH1_p <= v32_TxDataMoverCtrlCH1_s;
ov32_TxDataMoverAddrCH1_p <= v32_TxDataMoverAddrCH1_s;
ov4_TxDataMoverTagCH1_p <= v4_TxDataMoverTagCH1_s;
ov24_TxTransferCntCH2_p <= v24_TxTransferCntCH2_s;
ov32_TxDataMoverCtrlCH2_p <= v32_TxDataMoverCtrlCH2_s;
ov32_TxDataMoverAddrCH2_p <= v32_TxDataMoverAddrCH2_s;
ov4_TxDataMoverTagCH2_p <= v4_TxDataMoverTagCH2_s;
ov24_TxTransferCntCH3_p <= v24_TxTransferCntCH3_s;
ov32_TxDataMoverCtrlCH3_p <= v32_TxDataMoverCtrlCH3_s;
ov32_TxDataMoverAddrCH3_p <= v32_TxDataMoverAddrCH3_s;
ov4_TxDataMoverTagCH3_p <= v4_TxDataMoverTagCH3_s;
ov24_TxTransferCntCH4_p <= v24_TxTransferCntCH4_s;
ov32_TxDataMoverCtrlCH4_p <= v32_TxDataMoverCtrlCH4_s;
ov32_TxDataMoverAddrCH4_p <= v32_TxDataMoverAddrCH4_s;
ov4_TxDataMoverTagCH4_p <= v4_TxDataMoverTagCH4_s;
ov24_TxTransferCntCH5_p <= v24_TxTransferCntCH5_s;
ov32_TxDataMoverCtrlCH5_p <= v32_TxDataMoverCtrlCH5_s;
ov32_TxDataMoverAddrCH5_p <= v32_TxDataMoverAddrCH5_s;
ov4_TxDataMoverTagCH5_p <= v4_TxDataMoverTagCH5_s;
ov24_TxTransferCntCH6_p <= v24_TxTransferCntCH6_s;
ov32_TxDataMoverCtrlCH6_p <= v32_TxDataMoverCtrlCH6_s;
ov32_TxDataMoverAddrCH6_p <= v32_TxDataMoverAddrCH6_s;
ov4_TxDataMoverTagCH6_p <= v4_TxDataMoverTagCH6_s;
ov24_TxTransferCntCH7_p <= v24_TxTransferCntCH7_s;
ov32_TxDataMoverCtrlCH7_p <= v32_TxDataMoverCtrlCH7_s;
ov32_TxDataMoverAddrCH7_p <= v32_TxDataMoverAddrCH7_s;
ov4_TxDataMoverTagCH7_p <= v4_TxDataMoverTagCH7_s;

end IMP;

