#------------------------------------------------------------------------------
# Filename:        lyt_axi_pcie_rtdex.mpd
# Description:     Microprocessor Peripheral Description
# Generated by:    David Quinn
# Date:            2012-10-30 09:20:55
# Copyright (c)    2001-2012 LYRtech RD Inc.  All rights reserved.
#
# LYRtech RD Inc.
#------------------------------------------------------------------------------

BEGIN lyt_axi_pcie_rtdex

#------------------------------------------------------------------------------
# Peripheral Options
#------------------------------------------------------------------------------
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = MICROBLAZE:USER
OPTION STYLE = MIX
OPTION DESC = AXI Real Time Data Exchange trough PCIe
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)

#------------------------------------------------------------------------------
# Bus Interfaces
#------------------------------------------------------------------------------
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = S_AXI_REG, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = M_AXI_S2MM_CH0, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 )
BUS_INTERFACE BUS = M_AXI_S2MM_CH1, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 )
BUS_INTERFACE BUS = M_AXI_S2MM_CH2, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 )
BUS_INTERFACE BUS = M_AXI_S2MM_CH3, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 )
BUS_INTERFACE BUS = M_AXI_S2MM_CH4, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 )
BUS_INTERFACE BUS = M_AXI_S2MM_CH5, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 )
BUS_INTERFACE BUS = M_AXI_S2MM_CH6, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 )
BUS_INTERFACE BUS = M_AXI_S2MM_CH7, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 )


#------------------------------------------------------------------------------
# Generics for VHDL or Parameters for Verilog
#------------------------------------------------------------------------------
PARAMETER C_RTDEX_RX_NUMBER_OF_CHANNELS = 1, DT = INTEGER, RANGE = (0:8)
PARAMETER C_RX_CH_FIFO_DEPTH = 4096, DT = INTEGER, RANGE = (1024, 2048, 4096, 8192, 16384, 32768)
PARAMETER C_RTDEX_TX_NUMBER_OF_CHANNELS = 1, DT = INTEGER, RANGE = (0:8)
PARAMETER C_TX_CH_FIFO_DEPTH = 4096, DT = INTEGER, RANGE = (1024, 2048, 4096, 8192, 16384, 32768)
PARAMETER C_CDMA_PRESENT = 1, DT = INTEGER, RANGE = (0,1)
PARAMETER C_S_AXI_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ID_WIDTH = 4, DT = INTEGER, BUS = S_AXI
PARAMETER C_RDATA_FIFO_DEPTH = 0, DT = INTEGER
PARAMETER C_INCLUDE_TIMEOUT_CNT = 0, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_TIMEOUT_CNTR_VAL = 8, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_ALIGN_BE_RDADDR = 0, DT = INTEGER
PARAMETER C_S_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = S_AXI
PARAMETER C_S_AXI_SUPPORTS_READ = 1, DT = INTEGER, BUS = S_AXI
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_S_AXI_RX_FIFO_BASEADDR = 0xffffffff, DT = std_logic_vector, CACHEABLE = TRUE, PAIR = C_S_AXI_RX_FIFO_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_S_AXI_RX_FIFO_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_S_AXI_RX_FIFO_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_S_AXI_PROTOCOL = AXI4, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI

# Generics for register interface
PARAMETER C_S_AXI_REG_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_REG, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_REG_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_REG, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_REG_MIN_SIZE = 0x000001ff, DT = std_logic_vector, BUS = S_AXI_REG
PARAMETER C_REG_USE_WSTRB = 1, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_REG_DPHASE_TIMEOUT = 8, DT = INTEGER
PARAMETER C_REG_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, PAIR = C_REG_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_REG
PARAMETER C_REG_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_REG_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_REG
PARAMETER C_REG_NUM_REG = 1, DT = INTEGER
PARAMETER C_REG_NUM_MEM = 1, DT = INTEGER
PARAMETER C_REG_SLV_AWIDTH = 32, DT = INTEGER
PARAMETER C_REG_SLV_DWIDTH = 32, DT = INTEGER
PARAMETER C_REG_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI_REG

# Generics for Channel 0 AXI interface
# PARAMETER C_M_AXI_S2MM_CH0_AWID = 1, DT = INTEGER,  BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH0_ID_WIDTH = 4, DT = INTEGER,  BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH0_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH0_DATA_WIDTH = 64, DT = INTEGER, BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH0_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH0_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH0_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH0_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH0_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH0_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_S2MM_CH0_WRITE_ISSUING  = 2, DT = INTEGER, BUS = M_AXI_S2MM_CH0, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 ), TYPE = NON_HDL


# Generics for Channel 1 AXI interface
# PARAMETER C_M_AXI_S2MM_CH1_AWID = 1, DT = INTEGER,  BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH1_ID_WIDTH = 4, DT = INTEGER,  BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH1_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH1_DATA_WIDTH = 64, DT = INTEGER, BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH1_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH1_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH1_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH1_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH1_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH1_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_S2MM_CH1_WRITE_ISSUING  = 2, DT = INTEGER, BUS = M_AXI_S2MM_CH1, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 ), TYPE = NON_HDL

# Generics for Channel 2 AXI interface
# PARAMETER C_M_AXI_S2MM_CH2_AWID = 1, DT = INTEGER,  BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH2_ID_WIDTH = 4, DT = INTEGER,  BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH2_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH2_DATA_WIDTH = 64, DT = INTEGER, BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH2_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH2_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH2_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH2_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH2_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH2_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_S2MM_CH2_WRITE_ISSUING  = 2, DT = INTEGER, BUS = M_AXI_S2MM_CH2, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 ), TYPE = NON_HDL

# Generics for Channel 3 AXI interface
# PARAMETER C_M_AXI_S2MM_CH3_AWID = 1, DT = INTEGER,  BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH3_ID_WIDTH = 4, DT = INTEGER,  BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH3_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH3_DATA_WIDTH = 64, DT = INTEGER, BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH3_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH3_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH3_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH3_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH3_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH3_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_S2MM_CH3_WRITE_ISSUING  = 2, DT = INTEGER, BUS = M_AXI_S2MM_CH3, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 ), TYPE = NON_HDL

# Generics for Channel 4 AXI interface
# PARAMETER C_M_AXI_S2MM_CH4_AWID = 1, DT = INTEGER,  BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH4_ID_WIDTH = 4, DT = INTEGER,  BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH4_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH4_DATA_WIDTH = 64, DT = INTEGER, BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH4_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH4_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH4_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH4_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH4_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH4_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_S2MM_CH4_WRITE_ISSUING  = 2, DT = INTEGER, BUS = M_AXI_S2MM_CH4, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 ), TYPE = NON_HDL

# Generics for Channel 5 AXI interface
# PARAMETER C_M_AXI_S2MM_CH5_AWID = 1, DT = INTEGER,  BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH5_ID_WIDTH = 4, DT = INTEGER,  BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH5_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH5_DATA_WIDTH = 64, DT = INTEGER, BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH5_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH5_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH5_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH5_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH5_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH5_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_S2MM_CH5_WRITE_ISSUING  = 2, DT = INTEGER, BUS = M_AXI_S2MM_CH5, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 ), TYPE = NON_HDL

# Generics for Channel 6 AXI interface
# PARAMETER C_M_AXI_S2MM_CH6_AWID = 1, DT = INTEGER,  BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH6_ID_WIDTH = 4, DT = INTEGER,  BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH6_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH6_DATA_WIDTH = 64, DT = INTEGER, BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH6_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH6_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH6_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH6_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH6_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH6_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_S2MM_CH6_WRITE_ISSUING  = 2, DT = INTEGER, BUS = M_AXI_S2MM_CH6, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 ), TYPE = NON_HDL

# Generics for Channel 7 AXI interface
# PARAMETER C_M_AXI_S2MM_CH7_AWID = 1, DT = INTEGER,  BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH7_ID_WIDTH = 4, DT = INTEGER,  BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH7_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH7_DATA_WIDTH = 64, DT = INTEGER, BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH7_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH7_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH7_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH7_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH7_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_CH7_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_S2MM_CH7_WRITE_ISSUING  = 2, DT = INTEGER, BUS = M_AXI_S2MM_CH7, ASSIGNMENT = CONSTANT, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 ), TYPE = NON_HDL

# Ports for FIFO interface
#
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_AWID = AWID, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWLEN = AWLEN, DIR = I, VEC = [7:0], BUS = S_AXI
PORT S_AXI_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI
PORT S_AXI_AWLOCK = AWLOCK, DIR = I, BUS = S_AXI
PORT S_AXI_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI
PORT S_AXI_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_WLAST = WLAST, DIR = I, BUS = S_AXI
PORT S_AXI_BID = BID, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARID = ARID, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARLEN = ARLEN, DIR = I, VEC = [7:0], BUS = S_AXI
PORT S_AXI_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI
PORT S_AXI_ARLOCK = ARLOCK, DIR = I, BUS = S_AXI
PORT S_AXI_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI
PORT S_AXI_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_RID = RID, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RLAST = RLAST, DIR = O, BUS = S_AXI

# Ports for register interface
#
PORT S_AXI_REG_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI_REG
PORT S_AXI_REG_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI_REG
PORT S_AXI_REG_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_REG_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_REG
PORT S_AXI_REG_AWVALID = AWVALID, DIR = I, BUS = S_AXI_REG
PORT S_AXI_REG_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_REG_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_REG
PORT S_AXI_REG_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_REG_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI_REG
PORT S_AXI_REG_WVALID = WVALID, DIR = I, BUS = S_AXI_REG
PORT S_AXI_REG_BREADY = BREADY, DIR = I, BUS = S_AXI_REG
PORT S_AXI_REG_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_REG_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_REG
PORT S_AXI_REG_ARVALID = ARVALID, DIR = I, BUS = S_AXI_REG
PORT S_AXI_REG_RREADY = RREADY, DIR = I, BUS = S_AXI_REG
PORT S_AXI_REG_ARREADY = ARREADY, DIR = O, BUS = S_AXI_REG
PORT S_AXI_REG_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_REG_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_REG
PORT S_AXI_REG_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_REG
PORT S_AXI_REG_RVALID = RVALID, DIR = O, BUS = S_AXI_REG
PORT S_AXI_REG_WREADY = WREADY, DIR = O, BUS = S_AXI_REG
PORT S_AXI_REG_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_REG
PORT S_AXI_REG_BVALID = BVALID, DIR = O, BUS = S_AXI_REG
PORT S_AXI_REG_AWREADY = AWREADY, DIR = O, BUS = S_AXI_REG

# Ports for Channel 0 AXI interface
#
PORT m_axi_S2MM_CH0_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM_CH0
PORT m_axi_S2MM_CH0_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI_S2MM_CH0
PORT m_axi_S2MM_CH0_awid = AWID, DIR = O, VEC = [3:0]
PORT m_axi_S2MM_CH0_awaddr = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_S2MM_CH0, ENDIAN = LITTLE
PORT m_axi_S2MM_CH0_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH0, ENDIAN = LITTLE
PORT m_axi_S2MM_CH0_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH0, ENDIAN = LITTLE
PORT m_axi_S2MM_CH0_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM_CH0, ENDIAN = LITTLE
PORT m_axi_S2MM_CH0_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH0, ENDIAN = LITTLE
PORT m_axi_S2MM_CH0_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM_CH0, ENDIAN = LITTLE
PORT m_axi_S2MM_CH0_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM_CH0
PORT m_axi_S2MM_CH0_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM_CH0
PORT m_axi_S2MM_CH0_wdata = WDATA, DIR = O, VEC = [63:0], BUS = M_AXI_S2MM_CH0, ENDIAN = LITTLE
PORT m_axi_S2MM_CH0_wstrb = WSTRB, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH0, ENDIAN = LITTLE
PORT m_axi_S2MM_CH0_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM_CH0
PORT m_axi_S2MM_CH0_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM_CH0
PORT m_axi_S2MM_CH0_wready = WREADY, DIR = I, BUS = M_AXI_S2MM_CH0
PORT m_axi_S2MM_CH0_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM_CH0
PORT m_axi_S2MM_CH0_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM_CH0
PORT m_axi_S2MM_CH0_bready = BREADY, DIR = O, BUS = M_AXI_S2MM_CH0

# Ports for Channel 1 AXI interface
#
PORT m_axi_S2MM_CH1_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM_CH1
PORT m_axi_S2MM_CH1_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI_S2MM_CH1
PORT m_axi_S2MM_CH1_awid = AWID, DIR = O, VEC = [3:0]
PORT m_axi_S2MM_CH1_awaddr = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_S2MM_CH1, ENDIAN = LITTLE
PORT m_axi_S2MM_CH1_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH1, ENDIAN = LITTLE
PORT m_axi_S2MM_CH1_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH1, ENDIAN = LITTLE
PORT m_axi_S2MM_CH1_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM_CH1, ENDIAN = LITTLE
PORT m_axi_S2MM_CH1_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH1, ENDIAN = LITTLE
PORT m_axi_S2MM_CH1_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM_CH1, ENDIAN = LITTLE
PORT m_axi_S2MM_CH1_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM_CH1
PORT m_axi_S2MM_CH1_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM_CH1
PORT m_axi_S2MM_CH1_wdata = WDATA, DIR = O, VEC = [63:0], BUS = M_AXI_S2MM_CH1, ENDIAN = LITTLE
PORT m_axi_S2MM_CH1_wstrb = WSTRB, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH1, ENDIAN = LITTLE
PORT m_axi_S2MM_CH1_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM_CH1
PORT m_axi_S2MM_CH1_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM_CH1
PORT m_axi_S2MM_CH1_wready = WREADY, DIR = I, BUS = M_AXI_S2MM_CH1
PORT m_axi_S2MM_CH1_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM_CH1
PORT m_axi_S2MM_CH1_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM_CH1
PORT m_axi_S2MM_CH1_bready = BREADY, DIR = O, BUS = M_AXI_S2MM_CH1

# Ports for Channel 2 AXI interface
#
PORT m_axi_S2MM_CH2_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM_CH2
PORT m_axi_S2MM_CH2_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI_S2MM_CH2
PORT m_axi_S2MM_CH2_awid = AWID, DIR = O, VEC = [3:0]
PORT m_axi_S2MM_CH2_awaddr = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_S2MM_CH2, ENDIAN = LITTLE
PORT m_axi_S2MM_CH2_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH2, ENDIAN = LITTLE
PORT m_axi_S2MM_CH2_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH2, ENDIAN = LITTLE
PORT m_axi_S2MM_CH2_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM_CH2, ENDIAN = LITTLE
PORT m_axi_S2MM_CH2_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH2, ENDIAN = LITTLE
PORT m_axi_S2MM_CH2_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM_CH2, ENDIAN = LITTLE
PORT m_axi_S2MM_CH2_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM_CH2
PORT m_axi_S2MM_CH2_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM_CH2
PORT m_axi_S2MM_CH2_wdata = WDATA, DIR = O, VEC = [63:0], BUS = M_AXI_S2MM_CH2, ENDIAN = LITTLE
PORT m_axi_S2MM_CH2_wstrb = WSTRB, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH2, ENDIAN = LITTLE
PORT m_axi_S2MM_CH2_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM_CH2
PORT m_axi_S2MM_CH2_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM_CH2
PORT m_axi_S2MM_CH2_wready = WREADY, DIR = I, BUS = M_AXI_S2MM_CH2
PORT m_axi_S2MM_CH2_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM_CH2
PORT m_axi_S2MM_CH2_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM_CH2
PORT m_axi_S2MM_CH2_bready = BREADY, DIR = O, BUS = M_AXI_S2MM_CH2

# Ports for Channel 3 AXI interface
#
PORT m_axi_S2MM_CH3_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM_CH3
PORT m_axi_S2MM_CH3_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI_S2MM_CH3
PORT m_axi_S2MM_CH3_awid = AWID, DIR = O, VEC = [3:0]
PORT m_axi_S2MM_CH3_awaddr = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_S2MM_CH3, ENDIAN = LITTLE
PORT m_axi_S2MM_CH3_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH3, ENDIAN = LITTLE
PORT m_axi_S2MM_CH3_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH3, ENDIAN = LITTLE
PORT m_axi_S2MM_CH3_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM_CH3, ENDIAN = LITTLE
PORT m_axi_S2MM_CH3_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH3, ENDIAN = LITTLE
PORT m_axi_S2MM_CH3_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM_CH3, ENDIAN = LITTLE
PORT m_axi_S2MM_CH3_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM_CH3
PORT m_axi_S2MM_CH3_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM_CH3
PORT m_axi_S2MM_CH3_wdata = WDATA, DIR = O, VEC = [63:0], BUS = M_AXI_S2MM_CH3, ENDIAN = LITTLE
PORT m_axi_S2MM_CH3_wstrb = WSTRB, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH3, ENDIAN = LITTLE
PORT m_axi_S2MM_CH3_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM_CH3
PORT m_axi_S2MM_CH3_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM_CH3
PORT m_axi_S2MM_CH3_wready = WREADY, DIR = I, BUS = M_AXI_S2MM_CH3
PORT m_axi_S2MM_CH3_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM_CH3
PORT m_axi_S2MM_CH3_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM_CH3
PORT m_axi_S2MM_CH3_bready = BREADY, DIR = O, BUS = M_AXI_S2MM_CH3

# Ports for Channel 4 AXI interface
#
PORT m_axi_S2MM_CH4_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM_CH4
PORT m_axi_S2MM_CH4_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI_S2MM_CH4
PORT m_axi_S2MM_CH4_awid = AWID, DIR = O, VEC = [3:0]
PORT m_axi_S2MM_CH4_awaddr = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_S2MM_CH4, ENDIAN = LITTLE
PORT m_axi_S2MM_CH4_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH4, ENDIAN = LITTLE
PORT m_axi_S2MM_CH4_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH4, ENDIAN = LITTLE
PORT m_axi_S2MM_CH4_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM_CH4, ENDIAN = LITTLE
PORT m_axi_S2MM_CH4_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH4, ENDIAN = LITTLE
PORT m_axi_S2MM_CH4_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM_CH4, ENDIAN = LITTLE
PORT m_axi_S2MM_CH4_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM_CH4
PORT m_axi_S2MM_CH4_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM_CH4
PORT m_axi_S2MM_CH4_wdata = WDATA, DIR = O, VEC = [63:0], BUS = M_AXI_S2MM_CH4, ENDIAN = LITTLE
PORT m_axi_S2MM_CH4_wstrb = WSTRB, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH4, ENDIAN = LITTLE
PORT m_axi_S2MM_CH4_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM_CH4
PORT m_axi_S2MM_CH4_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM_CH4
PORT m_axi_S2MM_CH4_wready = WREADY, DIR = I, BUS = M_AXI_S2MM_CH4
PORT m_axi_S2MM_CH4_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM_CH4
PORT m_axi_S2MM_CH4_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM_CH4
PORT m_axi_S2MM_CH4_bready = BREADY, DIR = O, BUS = M_AXI_S2MM_CH4

# Ports for Channel 5 AXI interface
#
PORT m_axi_S2MM_CH5_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM_CH5
PORT m_axi_S2MM_CH5_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI_S2MM_CH5
PORT m_axi_S2MM_CH5_awid = AWID, DIR = O, VEC = [3:0]
PORT m_axi_S2MM_CH5_awaddr = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_S2MM_CH5, ENDIAN = LITTLE
PORT m_axi_S2MM_CH5_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH5, ENDIAN = LITTLE
PORT m_axi_S2MM_CH5_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH5, ENDIAN = LITTLE
PORT m_axi_S2MM_CH5_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM_CH5, ENDIAN = LITTLE
PORT m_axi_S2MM_CH5_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH5, ENDIAN = LITTLE
PORT m_axi_S2MM_CH5_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM_CH5, ENDIAN = LITTLE
PORT m_axi_S2MM_CH5_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM_CH5
PORT m_axi_S2MM_CH5_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM_CH5
PORT m_axi_S2MM_CH5_wdata = WDATA, DIR = O, VEC = [63:0], BUS = M_AXI_S2MM_CH5, ENDIAN = LITTLE
PORT m_axi_S2MM_CH5_wstrb = WSTRB, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH5, ENDIAN = LITTLE
PORT m_axi_S2MM_CH5_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM_CH5
PORT m_axi_S2MM_CH5_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM_CH5
PORT m_axi_S2MM_CH5_wready = WREADY, DIR = I, BUS = M_AXI_S2MM_CH5
PORT m_axi_S2MM_CH5_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM_CH5
PORT m_axi_S2MM_CH5_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM_CH5
PORT m_axi_S2MM_CH5_bready = BREADY, DIR = O, BUS = M_AXI_S2MM_CH5

# Ports for Channel 6 AXI interface
#
PORT m_axi_S2MM_CH6_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM_CH6
PORT m_axi_S2MM_CH6_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI_S2MM_CH6
PORT m_axi_S2MM_CH6_awid = AWID, DIR = O, VEC = [3:0]
PORT m_axi_S2MM_CH6_awaddr = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_S2MM_CH6, ENDIAN = LITTLE
PORT m_axi_S2MM_CH6_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH6, ENDIAN = LITTLE
PORT m_axi_S2MM_CH6_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH6, ENDIAN = LITTLE
PORT m_axi_S2MM_CH6_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM_CH6, ENDIAN = LITTLE
PORT m_axi_S2MM_CH6_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH6, ENDIAN = LITTLE
PORT m_axi_S2MM_CH6_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM_CH6, ENDIAN = LITTLE
PORT m_axi_S2MM_CH6_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM_CH6
PORT m_axi_S2MM_CH6_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM_CH6
PORT m_axi_S2MM_CH6_wdata = WDATA, DIR = O, VEC = [63:0], BUS = M_AXI_S2MM_CH6, ENDIAN = LITTLE
PORT m_axi_S2MM_CH6_wstrb = WSTRB, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH6, ENDIAN = LITTLE
PORT m_axi_S2MM_CH6_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM_CH6
PORT m_axi_S2MM_CH6_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM_CH6
PORT m_axi_S2MM_CH6_wready = WREADY, DIR = I, BUS = M_AXI_S2MM_CH6
PORT m_axi_S2MM_CH6_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM_CH6
PORT m_axi_S2MM_CH6_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM_CH6
PORT m_axi_S2MM_CH6_bready = BREADY, DIR = O, BUS = M_AXI_S2MM_CH6

# Ports for Channel 7 AXI interface
#
PORT m_axi_S2MM_CH7_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM_CH7
PORT m_axi_S2MM_CH7_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI_S2MM_CH7
PORT m_axi_S2MM_CH7_awid = AWID, DIR = O, VEC = [3:0]
PORT m_axi_S2MM_CH7_awaddr = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_S2MM_CH7, ENDIAN = LITTLE
PORT m_axi_S2MM_CH7_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH7, ENDIAN = LITTLE
PORT m_axi_S2MM_CH7_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH7, ENDIAN = LITTLE
PORT m_axi_S2MM_CH7_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM_CH7, ENDIAN = LITTLE
PORT m_axi_S2MM_CH7_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM_CH7, ENDIAN = LITTLE
PORT m_axi_S2MM_CH7_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM_CH7, ENDIAN = LITTLE
PORT m_axi_S2MM_CH7_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM_CH7
PORT m_axi_S2MM_CH7_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM_CH7
PORT m_axi_S2MM_CH7_wdata = WDATA, DIR = O, VEC = [63:0], BUS = M_AXI_S2MM_CH7, ENDIAN = LITTLE
PORT m_axi_S2MM_CH7_wstrb = WSTRB, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM_CH7, ENDIAN = LITTLE
PORT m_axi_S2MM_CH7_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM_CH7
PORT m_axi_S2MM_CH7_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM_CH7
PORT m_axi_S2MM_CH7_wready = WREADY, DIR = I, BUS = M_AXI_S2MM_CH7
PORT m_axi_S2MM_CH7_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM_CH7
PORT m_axi_S2MM_CH7_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM_CH7
PORT m_axi_S2MM_CH7_bready = BREADY, DIR = O, BUS = M_AXI_S2MM_CH7


# General control / status ports
#
PORT o_mbIrq_p     = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = EDGE_RISING
PORT o_PcieMsi_p	 = "", DIR = O,

# RX interface
#
IO_INTERFACE IO_IF = CHANNEL0_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL1_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL2_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL3_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL4_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL5_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL6_IF, IO_TYPE = GPIO
IO_INTERFACE IO_IF = CHANNEL7_IF, IO_TYPE = GPIO

PORT i_RxUserClk_p            = "", DIR = I, SIGIS = CLK, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 0 )

PORT o_RxReadyCh0_p           = "", DIR = O, IO_IF = CHANNEL0_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 0 )
PORT i_RxReCh0_p              = "", DIR = I, IO_IF = CHANNEL0_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 0 )
PORT ov32_RxDataCh0_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL0_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 0 )
PORT o_RxDataValidCh0_p       = "", DIR = O, IO_IF = CHANNEL0_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 0 )

PORT o_RxReadyCh1_p           = "", DIR = O, IO_IF = CHANNEL1_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 1 )
PORT i_RxReCh1_p              = "", DIR = I, IO_IF = CHANNEL1_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 1 )
PORT ov32_RxDataCh1_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL1_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 1 )
PORT o_RxDataValidCh1_p       = "", DIR = O, IO_IF = CHANNEL1_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 1 )

PORT o_RxReadyCh2_p           = "", DIR = O, IO_IF = CHANNEL2_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 2 )
PORT i_RxReCh2_p              = "", DIR = I, IO_IF = CHANNEL2_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 2 )
PORT ov32_RxDataCh2_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL2_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 2 )
PORT o_RxDataValidCh2_p       = "", DIR = O , IO_IF = CHANNEL2_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 2 )

PORT o_RxReadyCh3_p           = "", DIR = O, IO_IF = CHANNEL3_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 3 )
PORT i_RxReCh3_p              = "", DIR = I, IO_IF = CHANNEL3_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 3 )
PORT ov32_RxDataCh3_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL3_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 3 )
PORT o_RxDataValidCh3_p       = "", DIR = O, IO_IF = CHANNEL3_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 3 )

PORT o_RxReadyCh4_p           = "", DIR = O, IO_IF = CHANNEL4_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 4 )
PORT i_RxReCh4_p              = "", DIR = I, IO_IF = CHANNEL4_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 4 )
PORT ov32_RxDataCh4_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL4_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 4 )
PORT o_RxDataValidCh4_p       = "", DIR = O, IO_IF = CHANNEL4_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 4 )

PORT o_RxReadyCh5_p           = "", DIR = O, IO_IF = CHANNEL5_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 5 )
PORT i_RxReCh5_p              = "", DIR = I, IO_IF = CHANNEL5_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 5 )
PORT ov32_RxDataCh5_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL5_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 5 )
PORT o_RxDataValidCh5_p       = "", DIR = O, IO_IF = CHANNEL5_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 5 )

PORT o_RxReadyCh6_p           = "", DIR = O, IO_IF = CHANNEL6_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 6 )
PORT i_RxReCh6_p              = "", DIR = I, IO_IF = CHANNEL6_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 6 )
PORT ov32_RxDataCh6_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL6_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 6 )
PORT o_RxDataValidCh6_p       = "", DIR = O, IO_IF = CHANNEL6_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 6 )

PORT o_RxReadyCh7_p           = "", DIR = O, IO_IF = CHANNEL7_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 7 )
PORT i_RxReCh7_p              = "", DIR = I, IO_IF = CHANNEL7_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 7 )
PORT ov32_RxDataCh7_p         = "", DIR = O, VEC = [31:0], IO_IF = CHANNEL7_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 7 )
PORT o_RxDataValidCh7_p       = "", DIR = O, IO_IF = CHANNEL7_IF, ISVALID = ( C_RTDEX_RX_NUMBER_OF_CHANNELS > 7 )

# TX interface
#
PORT i_TxUserClk_p           = "", DIR = I, SIGIS = CLK, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 )

PORT o_TxReadyCh0_p          = "", DIR = O, IO_IF = CHANNEL0_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 )
PORT i_TxWeCh0_p             = "", DIR = I, IO_IF = CHANNEL0_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 )
PORT iv32_TxDataCh0_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL0_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 0 )

PORT o_TxReadyCh1_p          = "", DIR = O, IO_IF = CHANNEL1_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 )
PORT i_TxWeCh1_p             = "", DIR = I, IO_IF = CHANNEL1_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 )
PORT iv32_TxDataCh1_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL1_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 1 )

PORT o_TxReadyCh2_p          = "", DIR = O, IO_IF = CHANNEL2_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 )
PORT i_TxWeCh2_p             = "", DIR = I, IO_IF = CHANNEL2_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 )
PORT iv32_TxDataCh2_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL2_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 2 )

PORT o_TxReadyCh3_p          = "", DIR = O, IO_IF = CHANNEL3_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 )
PORT i_TxWeCh3_p             = "", DIR = I, IO_IF = CHANNEL3_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 )
PORT iv32_TxDataCh3_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL3_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 3 )

PORT o_TxReadyCh4_p          = "", DIR = O, IO_IF = CHANNEL4_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 )
PORT i_TxWeCh4_p             = "", DIR = I, IO_IF = CHANNEL4_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 )
PORT iv32_TxDataCh4_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL4_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 4 )

PORT o_TxReadyCh5_p          = "", DIR = O, IO_IF = CHANNEL5_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 )
PORT i_TxWeCh5_p             = "", DIR = I, IO_IF = CHANNEL5_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 )
PORT iv32_TxDataCh5_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL5_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 5 )

PORT o_TxReadyCh6_p          = "", DIR = O, IO_IF = CHANNEL6_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 )
PORT i_TxWeCh6_p             = "", DIR = I, IO_IF = CHANNEL6_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 )
PORT iv32_TxDataCh6_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL6_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 6 )

PORT o_TxReadyCh7_p          = "", DIR = O, IO_IF = CHANNEL7_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 )
PORT i_TxWeCh7_p             = "", DIR = I, IO_IF = CHANNEL7_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 )
PORT iv32_TxDataCh7_p        = "", DIR = I, VEC = [31:0], IO_IF = CHANNEL7_IF, ISVALID = ( C_RTDEX_TX_NUMBER_OF_CHANNELS > 7 )

END
